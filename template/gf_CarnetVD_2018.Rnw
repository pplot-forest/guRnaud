\documentclass[a4paper,openany]{book}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath}
\usepackage[french,english]{babel}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage[svgnames]{colortbl, xcolor}
% \usepackage{xcolor}
\usepackage{tikz}
\usepackage{fancyvrb}
\usepackage{float} % Allows increasing the font size of specific fonts beyond LaTeX default specifications
\usepackage{xifthen}
\usepackage{array}
\usepackage{multirow}
\usepackage[justification=centering]{caption}
\usepackage{booktabs}
\usepackage{eurosym}
\usepackage{multicol}
\usepackage[section]{placeins}
% \usepackage{uarial}
\usepackage{helvet}
\renewcommand{\familydefault}{\sfdefault}
\usepackage[toc,page]{appendix}
\usepackage{scrextend}
\usepackage{hyperref}
\usepackage{fix-cm}
\usepackage{tabularx}
\usepackage{enumitem}
\usepackage{graphicx}
\usepackage{pgfsys}
\usepackage{keyval}
% \usepackage{subfig}
\usepackage{subcaption}
\usepackage{titlesec}
\usepackage{tabularx}
\usepackage{pdfpages}
\usepackage{pdflscape}
\usepackage{chngcntr}
% \usepackage{subcaption}
% \usepackage[output-decimal-marker={,}]{siunitx}
\usepackage[autolanguage,np]{numprint}
\usepackage[bottom]{footmisc}
% \renewcommand{\familydefault}{\sfdefault}
\usepackage[left=1.5cm,right=1.5cm,top=1.5cm,bottom=1.5cm]{geometry}

% \voffset -2cm
% \hoffset 0cm
% \oddsidemargin 0cm
% \evensidemargin -0.5cm
% \textwidth 17cm
% \topmargin 1cm
% \textheight 24cm
% \parindent 0cm
% \columnsep 0.7cm

\setcounter{tocdepth}{3}     % Dans la table des matieres
\setcounter{secnumdepth}{3}  % Avec un numero.

% Séparation entre les colonnes de multicols
\setlength{\columnsep}{1cm}

 % --- espaces avant et après les floats
\setlength{\intextsep}{5pt} % Vertical space above & below [h] floats
\setlength{\textfloatsep}{5pt} % Vertical space below (above) [t] ([b]) floats
\setlength{\abovecaptionskip}{7pt}
\setlength{\belowcaptionskip}{3pt}
% ----- Numérotation figures en fonction des sections :
% \counterwithin{figure}{subsection}
% \counterwithin{table}{subsection}
% \RemoveFromReset{figure}{chapter}
% \AddToReset{figure}{section}
% \renewcommand{\thefigure}{\arabic{figure}}

% ----- Numérotation figures variable : en fonction des subsections, des sections ou des chapitres :
% \counterwithin*{figure}{subsubsection}
% \renewcommand{\thefigure}{%
% \ifnum\value{subsubsection}=0
%   \ifnum\value{subsection}=0
%     \ifnum\value{section}=0
%       \thechapter.%
%     \else
%       \thesection.%
%     \fi
%   \else
%     \thesubsection.%
%   \fi
% \else
%   \thesubsubsection.%
% \fi
%   \arabic{figure}%
% }
%
%
% \counterwithin*{table}{subsubsection}
% \renewcommand{\thetable}{%
% \ifnum\value{subsubsection}=0
%   \ifnum\value{subsection}=0
%     \ifnum\value{section}=0
%       \thechapter.%
%     \else
%       \thesection.%
%     \fi
%   \else
%     \thesubsection.%
%   \fi
% \else
%   \thesubsubsection.%
% \fi
%   \arabic{table}%
% }

% \setlength{\oddsidemargin}{0mm} % Adjust margins to center the colored title box
% \setlength{\evensidemargin}{0mm} % Margins on even pages - only necessary if adding more content to this template
\addto\captionsenglish{\def\tablename{Tableau}}
\addto\captionsenglish{\def\figurename{Figure}}
\addto\captionsenglish{\def\contentsname{Sommaire}}

%%%%%%%%%%%%%%%%%%%% Tronches des chapitres
\titleformat{\chapter}[frame]
{\normalsize}%
{\filright\sffamily\Large%
\enspace Chapitre \thechapter\enspace}%
{8pt}
{\sffamily\Huge\bfseries\filcenter}

%%%%%%%%%%%%%%%%%%%% Chapitre au milieu de la page
\newcommand*{\fancychapterstyle}{%
  \titleformat{\chapter}[frame]
{\normalsize}%
{\filright\sffamily\Large%
\enspace Chapitre \thechapter\enspace}%
{8pt}
{\sffamily\Huge\bfseries\filcenter}
  \titlespacing*{\chapter}{0pt}{250pt}{80pt}
}

\newcommand*{\standardchapterstyle}{%
  \titleformat{\chapter}[display]
  {\normalfont\huge\bfseries}{\chaptertitlename\ \thechapter}{20pt}{\Huge}
  \titlespacing*{\chapter}{0pt}{50pt}{40pt}
}

% \titlespacing*{\chapter}{0pt}{0pt}{3cm}

%%%%% sections
% \titleformat{\section}[frame]
% {}%
% {}%
% {5pt}
% {\sffamily\Large\bfseries\filcenter\thesection\enspace}
%%%%%%%%%%%%%%%%%%%%

% ----- Réglage espace avant et après titres (left-before-after)
\titlespacing*{\chapter}
{0pt}{0.2cm plus 0.25cm minus 0.25cm}{1.5cm plus 0.1cm minus 0.1cm}
\titlespacing*{\section}
{0pt}{0.4cm plus 0cm minus 0cm}{0.4cm plus 0cm minus 0cm}
\titlespacing*{\subsection}
{0pt}{0.2cm plus 0cm minus 0cm}{0.2cm plus 0cm minus 0cm}
\titlespacing*{\paragraph}
{0pt}{0.1cm plus 0cm minus 0cm}{0.1cm plus 0cm minus 0cm}



%%%%% Sections invisibles
\newcommand\invisiblesection[1]{%
  \refstepcounter{section}%
  \addcontentsline{toc}{section}{\protect\numberline{\thesection}#1}%
  \sectionmark{#1}}




%%%% changement marge %%%%
\newenvironment{changemargin}[2]{\begin{list}{}{%
\setlength{\topsep}{0pt}%
\setlength{\leftmargin}{0pt}%
\setlength{\rightmargin}{0pt}%
\setlength{\listparindent}{\parindent}%
\setlength{\itemindent}{\parindent}%
\setlength{\parsep}{0pt plus 1pt}%
\addtolength{\leftmargin}{#1}%
\addtolength{\rightmargin}{#2}%
}\item }{\end{list}}
%%%% fin macro %%%%


% ---------- A propos des pages où pas assez de texte pour remplir tous les espaces (ce qui conduit latex à répartir équitablement le texte => espaces verticaus dans le texte) :
% "LaTeX uses \flushbottom for two-sided documents (book by default). Odd pages and even pages are forced to be aligned. In one-sided documents (article, report by default) LaTeX uses \raggedbottom, extra spaces will gone. cf. classes document.
%
% You can use \raggedbottom if you meet too many bad page breaks. However, it is preferred to prevent big boxes in your document. Use floats instead of put big tabulars and figures directly. For lists and section titles, it is often not too serious, be sure you put enough text for each sections."
\raggedbottom



% Commande édition conditionnelle
\newcommand{\EditIf}[4]{
\ifthenelse{
\equal{#1}{#2}
}{#3}{#4}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<OptionsGenerales, include=FALSE>>=
opts_chunk$set(concordance=T, include=T, tidy=F, warning=F, comment=F, error=F, echo=F, message=F, cache=F, eval=T)
opts_chunk$set(size='normalsize')
# repFigures <-"D:/foret/Travail/Programmation/AFI/Out/Carnet_Bois_des_Brosses/Figures/"
# opts_chunk$set(fig.path='Figures/', dev='pdf')
opts_chunk$set(fig.path=repFigures, dev='pdf')
opts_chunk$set(fig.align='center',fig.show='hold')
options(width=45)
opts_knit$set(eval.after = 'fig.cap') # evaluate fig.cap after the chunk
par(mar=c(0,0,0,0))
@

<<Librairies, echo=FALSE, warning=F, error=F, comment=F, message=F >>=
# library(DBI)
    suppressMessages({
   library("xtable")
   library("ggplot2")
   library("reshape2")
   library("scales")
   library("doBy")
   library("gridExtra")
   library("gdata")
   library("rgdal")
   library("maptools")
   library("stringr")
   library("dplyr")
   library("tidyr")
   library("ggthemes")
   library("rgeos")
   library("tools")
   library("ggrepel")
   library("grid")
   library("openxlsx")
   library("fmsb")
    })
@

<<Import_Vrai, echo=F, warning=F, error=F, comment=NA, message=F, results='hide', eval=T, include=T >>=
# ---------- Choix du répertoire de travail ---------- #
# repGF <- "/Users/Valentin/Foret/Travail/PNRVN/Traitement_GF"
# repAFI <- "/Users/Valentin/Foret/Travail/Programmation/AFI"
# repGF <- "/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve"
# repGF <- "/Users/Valentin/Foret/Travail/PNRVN/PP_Fleckenstein"

# repGF <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/data/HauteMarne"

# # ---------- Identification du dispositif ---------- #
# Name <- "Bois des Brosses"
# Name <- "FD de Versoix"

#####
# # setwd(repGF)
# # repGF <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/uploads/excel/2"
# # Name <- "FD de Marchiennes"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/9"
# # Name <- "Forêt communale de Bouvante"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/10"
# # Nam <- "Exemple"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/16"
# # Nam <- "Clairmarais"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/4"
# # Name <- "Forêts privées du canton de Genève"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/6"
# # Name <- "FD de Versoix"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/30"
# # Name <- "FD Bezange"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/19"
# # Name <- "Port Royal"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/31"
# # Name <- "Test Franck"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/35"
# # Name <- "LA SAUSSAYE"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/44"
# # Name <- "Forêt départementale de St Apolline"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/43"
# # Name <- "Forêt domaniale de Marly"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/test_psdrf"
# # Name <- "Forêt des Houches"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/56"
# # Name <- "Vivey"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/57"
# # Name <- "Port Royal"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/17"
# # Name <- "Raismes"
#
# repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/Lamadeleine"
# Name <- "La Madeleine"
#
# repLogos <- file.path("/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes", "scripts/images/logos/")
#
# # repGF <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/uploads/excel/6"
# # Name <- "FD de Versoix"
#
# # repGF <- "/Users/Valentin/Travail/Projets/PlateformeTraitement_ONF/programs/placettes/uploads/excel/5"
# # # Name <- "Cirey sur Vezouze"
# # Name <- "Cirey sur Vezouze - Groupe I2"
#
# Choix <- 1
# # Choix <- 4
# # Choix <- 5
# # Choix <- 10
# # Choix <- 2
# setwd(repGF)
#
# load("out/job1/gfDonneesBrutes.Rdata")
# load("out/job3/gfTablesBrutes.Rdata")
# load("out/job4/gfTablesElaboreesPlac.Rdata")
#     for(i in 1:length(TabPla)) {assign(names(TabPla)[i],TabPla[[i]])}
# load("out/job5/gfTablesElaborees.Rdata")
#     for(i in 1:length(Tableaux)) {assign(names(Tableaux)[i],Tableaux[[i]])}
#
#     # Préparation des tables
#     Choix <- Forets$NumForet
#     NomForet <- Forets$Nom[match(Choix,Forets$NumForet)]
#     DernierCycle <- max(Cycles$Cycle[Cycles$NumForet==Choix],na.rm=T)
#     Annee_Fin <- Cycles$Annee[Cycles$NumForet==Choix & Cycles$Cycle==DernierCycle]
#####

# Name <- "Forêt Régionale du Fleckenstein"

# Name <- "3-ExempleGF3"


# file1 <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/data/HauteMarne/out/job1/gfDonneesBrutes.RData"
# file2 <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/data/HauteMarne/out/job3/gfTablesBrutes.RData"
# file3 <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/data/HauteMarne/out/job4/gfTablesElaboreesPlac.RData"
# file4 <- "/Users/Valentin/Foret/Travail/PlateformeTraitement_ONF/placettes/data/HauteMarne/out/job5/gfTablesElaborees.RData"
# load(file1)
# load(file2)
# load(file3)
# for(i in 1:length(TabPla)) {assign(names(TabPla)[i],TabPla[[i]])}
# load(file4)
# for(i in 1:length(Tableaux)) {assign(names(Tableaux)[i],Tableaux[[i]])}
#
# # Préparation des tables
# Choix <- Forets$NumForet
# NomForet <- Forets$Nom[match(Choix,Forets$NumForet)]
# DernierCycle <- max(Cycles$Cycle[Cycles$NumForet==Choix],na.rm=T)
# Annee_Fin <- Cycles$Annee[Cycles$NumForet==Choix & Cycles$Cycle==DernierCycle]

# Nom <- Name
# Name <- "Forêt de Gergy"
# Name <- "Forêt de la Quiquengrogne"
# Name <- "Forêt de Chamberceau"
# Name <- "Forêt de Monivea"
# Name <- "Forêt de Mellory"
# Name <- "Forêt de Lisdowney"
# Name <- "Forêt de Rahin"
# Name <- "Bois de Barnal"
# Name <- "Forêt de la Rivière"
# Name <- "Forêt Communale de Wiltz"
# Name <- "Bois des Mauves"
# Name <- "Forêt de Mollberg"
# Name <- "Forêt Domaniale de Versoix"
# Name <- "Bois du Pré Jeanreau"

# Name <- "Bois des Etangs d'Aige et du Prince"
# Name <- "La Touche aux Loups"
# Name <- "Bois de la Forêt"

# Name <- "Bauges"



# Choix <- 5
# Choix <- 6

# Choix <- 3

# Choix <- 102
# Choix <- 103
# Choix <- 105
# Choix <- 107
# Choix <- 93
# Choix <- 4
# Choix <- 57 # 4 cycles
# Choix <- 63 # 3 cycles
# Choix <- 41
# Choix <- 69
# Choix <- 95
# Choix <- 127
# Choix <- 111
# Choix <- 32
# Name_rep <- gsub(" ", "", Name, fixed = T)
# Name_rep <- gsub("'", "", Name_rep, fixed = T)
# # Name_rep <- str_replace_all(Name_rep, "<U+00EA>", "e")
# Name_rep <- gsub("\U00EA", "e", Name_rep)
# Name_rep <- str_replace_all(Name_rep, "\u00EA", "e")
# Name_rep <- str_replace_all(Name_rep, "\u00E2", "a")
# Name_rep <- str_replace_all(Name_rep, "<U00E9>", "e")
# Name_rep <- str_replace_all(Name_rep, "\u00E8", "e")
# Name_rep <- str_replace_all(Name_rep, "\u00FB", "u")
# Name_rep <- str_replace_all(Name_rep, "\u00EE", "i")
# Name_rep <- str_replace_all(Name_rep, "\u00F4", "o")
# repSav <- paste0(repGF,"/Out/",
#                  Choix,"-",Name_rep)
# tk_messageBox(type="ok",
#               message=Name)
# tk_messageBox(type="ok",
#               message=repSav)

# # --------------- # INTERFACE AGREGATION PAR ENSEMBLES # --------------- #
# # ----- Chargement des données d'inventaire
# load("Tables/gfCodes.Rdata")
# load("Tables/gfDonneesBrutes.Rdata")
# load(paste0(repSav,"/Tables/gfTablesBrutes.RData"))
# load("Tables/Dictionary.RData")

# load(paste0(repSav,"/Tables/gfTablesElaboreesPlac.RData"))
# for(i in 1:length(TabPla)) {assign(names(TabPla)[i],TabPla[[i]])}
# load(paste0(repSav,"/Tables/gfTablesElaborees.RData"))
# for(i in 1:length(Tableaux)) {assign(names(Tableaux)[i],Tableaux[[i]])}


# ---------- Chargement des données SIG ---------- #
# placettes_FILE <- tk_choose.files(caption = "Sélectionner le shape des placettes",
#                                   multi=F,
#                                   filter=matrix(c("shapefile","shapefile",".shp",".shp"),2))
# placettes_FILE <- "/Users/Valentin/Foret/Travail/Programmation/AFI/Data/SIG/Vecteurs/AFI_Plac_L93.shp"
# placettes <- readOGR(dsn=dirname(placettes_FILE),
#                      layer=file_path_sans_ext(basename(placettes_FILE)))

# ----- Sécurité : vérification que données SIG sont disponibles ----- #
# if (!is.element(Choix,placettes$NumForet)) {
#   tk_messageBox(type="ok",
#                 message="Attention : données SIG non disponibles.
#
# Fusionner les données SIG (afi_RewriteShapes) dans le shape global (Plac_AFI_L93) avant d'éditer le carnet d'analyse automatique",
#                 icon="error")
# }
# placettes <- placettes[placettes$NumForet %in% Choix,]

# Answer_SIG <- tk_messageBox(type="yesno",
#                             message="Existe-t-il un périmètre pour ce dispositif ?",
#                             caption="Choix du dispositif")
Answer_SIG="no"
if (Answer_SIG=="yes") {
  limite_FILE <- tk_choose.files(caption = "Sélectionner le shape du périmètre",
                                  multi=F,
                                  filter=matrix(c("shapefile","shapefile",".shp",".shp"),2))
 limite <- readOGR(dsn=dirname(limite_FILE),
                    layer=file_path_sans_ext(basename(limite_FILE)),
                    encoding="UTF8")
}
# else {
  # placettes <- spTransform(placettes,CRS(projargs = "+init=epsg:2154"))
  # buf1 <- gBuffer(placettes, width=400, byid=TRUE)
  # limite <- gUnaryUnion(buf1)
# }

# ----- Fichier Commentaires -----
Eval_Comment <- F
# Answer_Comments <- tk_messageBox(type="yesno",
#                             message="Editer le livret GF avec les commentaires ?",
#                             caption="Edition des commentaires")
Answer_Comments <- "no"
if (Answer_Comments=="yes") {
Eval_Comment <- T
Comments_FILE <- tk_choose.files(default="",
                                 caption="Sélection du classeur de commentaires",
                                 filters=matrix(c(".xls",".xlsx"),
                                                1,2,byrow=T))
# Comments_FILE <- paste0(repAFI,"/Data/Excel/Afi_Carnet_Comments.xlsx")
# Eval_Comment <- T
}


# ----- Autres -----
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
ArbresEnTour <- left_join(IdArbres,ValArbres) %>%
  left_join(EssReg) %>%
  filter(NumForet==Choix)
DernierCycle <- max(Cycles_Disp$Cycle,na.rm=T)
ArbresEnTour     <- filter(ArbresEnTour,
                           Cycle==DernierCycle)
TauxR=0.03
NbrePlac <- length(unique(Placettes$NumPlac[which(Placettes$NumForet==Choix)]))
# NbrePlac <- Cycles$NbPlacettes[Cycles$NumForet==Choix &
#                                  Cycles$Cycle==DernierCycle]
Eval_GF <- FALSE

Param_CodesEcoRare <- 8
Param_CodesEco <- 8
Param_CodesEcoCat <- 8
CodeEcolos <- mutate(CodeEcolos,
                     Code=toupper(Code))
# Eval_Comment=F
# Eval_Comment=T

# Evaluation des qualités :
Eval_Qual <- FALSE
t_Sentence <- c()
pos <- which(!is.na(Arbres$Qual))
if (length(pos) > 0) {
  Eval_Qual <- TRUE
}

# Evaluation du bois mort :
BMP_Disp <-
  BMP %>%
  filter(NumForet == Choix & Cycle == DernierCycle & Vha > 0)
BMortSup30_Disp <-
  BMSsup30 %>%
  filter(NumForet == Choix & Cycle == DernierCycle)
BMortLineaires_Disp <-
  BMSLineaires %>%
  filter(NumForet == Choix & Cycle == DernierCycle)
Eval_BMP <- TRUE
if (dim(BMP_Disp)[1] == 0) {
  Eval_BMP <- FALSE
}

Eval_BMortLineaires <- TRUE
if (dim(BMortLineaires_Disp)[1] == 0) {
  Eval_BMortLineaires <- FALSE
}

Eval_BMortSup30 <- TRUE
if (dim(BMortSup30_Disp)[1] == 0) {
  Eval_BMortSup30 <- FALSE
}

Eval_BM <- TRUE
if (Eval_BMP==FALSE & Eval_BMortLineaires == 0 & Eval_BMortSup30 == 0) {
  Eval_BM <- FALSE
}

Eval_Taillis <- TRUE
if (dim(Taillis[which(Taillis$NumForet==Choix &
                      Taillis$Cycle==DernierCycle),])[1]==0) {
  Eval_Taillis <- FALSE
}

Eval_Rege <- TRUE
if (dim(Reges[which(Reges$NumForet==Choix &
                      Reges$Cycle==DernierCycle),])[1]==0) {
  Eval_Rege <- FALSE
}

# -- Evaluation des stades écorce et de décomposition :
# Eval_Stades <- F
Eval_Stades <- TRUE
df1 <-
  BMP %>%
  filter(NumForet==Choix & Cycle == DernierCycle & !is.na(Stade))
df2 <-
  BMSCercles %>%
  filter(NumForet==Choix & Cycle == DernierCycle & !is.na(Stade))
df3 <-
  BMSLineaires %>%
  filter(NumForet==Choix & Cycle == DernierCycle & !is.na(Stade))
test = dim(df1)[1] + dim(df2)[1] + dim(df3)[1]
if (test == 0) {
  Eval_Stades <- FALSE
}

Eval_Evol=ifelse(DernierCycle > 1,
                 TRUE,
                 FALSE)
Eval_Geneve <- F # Pour besoin traitement Leforestier
Eval_Appendix <- F
Titre_Chap2 =
  ifelse(DernierCycle > 1, "Bilan et évolution du patrimoine", "Bilan du patrimoine")

# Fig_Evol=4
if (Eval_Evol == FALSE) {
  VcHa_VAR=0
  VpHa_VAR=0
  Periode=0

  # Fig_Evol=3
  }
Codes_Disp <- Codes %>% filter(NumForet == Choix)
  Eval_Codes = FALSE
  Eval_Codes_AFI = FALSE
if (dim(Codes_Disp[Codes_Disp$Cycle == DernierCycle, ])[1] > 0) {
  Eval_Codes = TRUE
  if (is.element(unique(tolower(Codes_Disp$Ref_CodeEcolo)), c("afi", "engref"))) {
    Eval_Codes_AFI = TRUE
  }
}

if (dim(Codes_Disp[Codes_Disp$Cycle==DernierCycle,])[1] == 0) {
  Note_Totale=0
  NoteForte_Totale=0
  Indice1=Indice2=Indice3=Indice4=Indice5=0
}

# SuiviEcono <- filter(InfosSuiviEco,
#                      NumForet==Choix) %>%
#   select(SuiviEcono) %>%
#   unlist() %>%
#   unname()
# SuiviEcono <- ifelse(SuiviEcono==1 & !is.na(SuiviEcono),
#                      TRUE,FALSE)
SuiviEcono=FALSE

# ----- Palette -----
df_PALETTE1 <- select(Essences,
                      Nom,Couleur) %>%
  distinct(Nom,Couleur) %>%
  rename(Essence=Nom)
df_PALETTE2 <- select(EssReg,
                      EssReg,Couleur) %>%
  distinct(EssReg,
           .keep_all=T) %>% # ,Couleur # Attention si on prend EssReg depuis Essences, on a
  rename(Essence=EssReg)

df_Palette <- filter(df_PALETTE1,
                     !is.element(Essence,df_PALETTE2$Essence)) %>%
                       rbind(df_PALETTE2) %>%
  distinct()

Palette_Essence <- df_Palette$Couleur
names(Palette_Essence) <- df_Palette$Essence
# Palette <- CodeCouleur$Couleur
# names(Palette) <- CodeCouleur$Nom
# # Palette <- c("limegreen") #"turquoise3"
# Palette <- CodeCouleur1$Couleur
# names(Palette) <- CodeCouleur1$Nom
# ColPalette <- Palette
# Palette_Essence <- Palette

# Tri -> essence majoritaire==max de Gha
order_DF <- filter(gfForetDen_Essence,
                   NumForet==Choix & Cycle==DernierCycle) %>%
  arrange(desc(Gha))
Essence_ORDER <- order_DF$Essence
Palette_Essence <- Palette_Essence[c(match(Essence_ORDER,names(Palette_Essence)),
                                     which(!is.element(names(Palette_Essence),Essence_ORDER)))]
# Palette_Essence <- Palette_Essence[c(Essence_ORDER,
#                                      names(Palette_Essence)[which(!is.element(names(Palette_Essence),Essence_ORDER))])]

# Palette <- CodeCouleur2$Couleur
# # Palette <- c("limegreen") #"turquoise3"
# names(Palette) <- CodeCouleur2$Nom
# ColPalette_EssReg <- Palette

# ----- Test changement de protocole
protoc_CHG = F
change_protocole <- function (echant_DF) {
  # echant_DF <- Echantillonnages # debug
  # on détecte si le protocole change à travers les cycles d'inventaire
  # echant_NAMES <- syms(setdiff(names(echant_DF), "Cycle"))
  echant_NAMES <- c(
    "NumForet", "Strate", "DiamLim1", "Rayon1", "DiamLim2", "Rayon2",
    "DiamLim3", "Rayon3", "Coeff", "DiamLim"
  )
  echant_DF <-
    echant_DF %>%
    distinct(echant_NAMES, .keep_all = T)
  # on recrée une table "echant_DF" avec les paramètres du plus
  # grand dénominateur commun entre les 2 (ou plus) protocoles d'inventaire
  # différents
  echant_DF <-
    echant_DF %>%
    group_by(NumForet, Strate) %>%
    mutate(
      DiamLim1 = min(DiamLim1),
      Rayon1 = min(Rayon1),

      DiamLim2 = min(DiamLim2),
      Rayon2 = min(Rayon2),

      DiamLim3 = min(DiamLim3),
      Rayon3 = min(Rayon3),

      DiamLim = min(DiamLim),
      Coeff = max(Coeff),

      # Identifiant pour retrouver les arbres concernés par le
      # changement de protocole
      echant_ID =
        paste0(
          NumForet, "-", Cycle,"-", Strate
        ),
      Observations = NULL
    ) %>%
    ungroup()
  # retour fonction change_protocole
  return(echant_DF)
}
# extrait de la table Echantillonnages des cycles concernés par
# le changement de protocole (s'il existe)
echant_DF <- change_protocole(Echantillonnages)
if (dim(echant_DF)[1] > 1) {
  protoc_CHG = T
}

# ----- Test changement de placettes
plac_CHG = F
df <-
  Placettes %>%
  select(NumForet, NumPlac, Cycle) %>%
  # filter(NumPlac %in% c(46,47,48)) %>% # debug
  complete(NumPlac, nesting(Cycle)) %>%
  arrange(NumForet, NumPlac, Cycle) %>%
  filter(is.na(NumForet)) %>%
  select(-NumForet)
if (dim(df)[1] > 1) {
  plac_CHG = T
}
@


<<Formats, echo=F>>=
# ------------- Formats
MyTheme <-  theme_bw() +
  theme(axis.text.x  = element_text(size=8),
        axis.text.y  = element_text(size=8),
        legend.text = element_text(size=8),
        axis.title.x  = element_text(size=9),
        axis.title.y  = element_text(size=9),
        legend.title = element_text(size=9),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))

MyTheme1 <-  theme_bw() +
  theme(axis.text.x  = element_text(size=6),
        axis.text.y  = element_text(size=6),
        legend.text = element_text(size = 6),
        plot.title = element_text(size=7),
        axis.title.x  = element_text(size=7),
        axis.title.y  = element_text(size=7),
        legend.title = element_text(size = 7),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))

MyTheme2 <- theme_bw() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        axis.text.y  = element_text(size=8),
        axis.title.y  = element_text(size=9),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))

par(mar=c(0,0,0,0))

# ----- Functions -----
MultiRow <- function(Table,Columns) {
  for(i in Columns) {
    pos <- which(duplicated(Table[,i]))
    if (length(pos) > 0) {
      # pos <- sort(unique(c(pos, which(duplicated(t[,1],fromLast=T)))))
      # Table[] <- data_frame(Table)
      # Table[,i] <- as.factor(as.numeric(unlist(Table[,i])))
      Table[,i] <- factor(Table[,i])
      Table <- mutate(Table,
                      Mark=as.numeric(Table[,i])) %>% # Mark=factor(Table[,i])
        # Table$Mark <- Table[,i]
        # Table <- group_by(Table,Mark) %>%
          group_by(Mark) %>%
        mutate(Count=length(Mark)) %>%
        ungroup() %>%
        data.frame()
      Table[,i] <- as.character(Table[,i])
      Table[pos,i] <- NA

      # Repere des lignes à mettre en multirow
      pos2 <- which(Table$Count > 1 & !is.na(Table[,i]))
      # pos3 <- which(!is.na(Table[,i]))
      Table[pos2,i] <- paste0("\\multirow{",Table$Count[pos2],"}{*}{",Table[pos2,i],"}")
      Table$Count <- NULL
      Table$Mark <- NULL
    }
  }
  return(Table)
}

# # -- MultiRow pour le tableau de régé (charactère dans la colonnes à traiter en multirow)
# MultiRow <- function(Table,Columns) {
#   for(i in Columns) {
#     pos <- which(duplicated(Table[,i]))
#     if (length(pos) > 0) {
#       # pos <- sort(unique(c(pos, which(duplicated(t[,1],fromLast=T)))))
#       # Table[] <- data_frame(Table)
#       Table[,i] <- as.factor(Table[,i])
#       Table <- mutate(Table,
#                       Mark=levels(Table[,i])) %>%
#         # Table$Mark <- Table[,i]
#         # Table <- group_by(Table,Mark) %>%
#           group_by(Mark) %>%
#         mutate(Count=length(Mark)) %>%
#         ungroup() %>%
#         data.frame()
#       Table[,i] <- as.character(Table[,i])
#       Table[pos,i] <- NA
#
#       # Repere des lignes à mettre en multirow
#       pos2 <- which(Table$Count > 1 & !is.na(Table[,i]))
#       # pos3 <- which(!is.na(Table[,i]))
#       Table[pos2,i] <- paste0("\\multirow{",Table$Count[pos2],"}{*}{",Table[pos2,i],"}")
#       Table$Count <- NULL
#       Table$Mark <- NULL
#     }
#   }
#   return(Table)
# }


g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}


# ----- Fonction mise en forme texte (string vector) pour édition LaTeX -----
utf82LaTeX <- function(string, ...) {
  string <- paste0(string, ...)
  string <- gsub("-", "--", string, fixed = T)
  string <- gsub("—", "---", string, fixed = T)
  string <- gsub("#", "\\#", string, fixed = T)
  # string <- gsub("{", "\\{", string, fixed  = T)
  # string <- gsub("}", "\\}", string, fixed  = T)
  string <- gsub("$", "\\$", string, fixed = T)
  string <- gsub("_", "\\_", string, fixed = T)
  string <- gsub("&", "\\&", string, fixed = T)
  string <- gsub("œ", "\\oe ", string, fixed = T)
  string <- gsub("æ", "\\ae ", string, fixed = T)
  string <- gsub("«", "\\og ", string, fixed = T)
  string <- gsub("»", "\\fg{}", string, fixed = T)
  string <- gsub("“", "``", string, fixed = T)
  string <- gsub("”", "''", string, fixed = T)
  string <- gsub("n°", "\\no ", string, fixed = T)
  string <- gsub("N°", "\\No ", string, fixed = T)
  string <- gsub("%", "\\%", string, fixed = T)
  string <- gsub("°", "\\textdegree", string, fixed = T)
  string <- gsub("‰", "\\textperthousand", string, fixed = T)
  string <- gsub("€", "\\texteuro", string, fixed = T)
  string <- gsub("^", "\\textasciicircum", string, fixed = T)
  string <- gsub("~", "\\textasciitilde", string, fixed = T)

  string <- gsub("ê","\u00EA", string, fixed = T)
  string <- gsub("à","\u00E0", string, fixed = T)
  string <- gsub("â","\u00E2", string, fixed = T)
  string <- gsub("é","\u00E9", string, fixed = T)
  string <- gsub("è","\u00E8", string, fixed = T)
  string <- gsub("û","\u00FB", string, fixed = T)
  string <- gsub("î","\u00EE", string, fixed = T)
  string <- gsub("ô","\u00F4", string, fixed = T)

  string <- gsub("\u2028"," ", string, fixed = T)
  string <- gsub("\\retour\\","\\\\", string, fixed = T)
  string <- gsub("\\saut\\","\\\\

                 ", string, fixed = T)
  # cat(string)
  return(string)
}

# ----- Fonction conversion caractères UTF8 en LaTeX : (tiré de Fiches_Rem)
df_Trad <- data.frame(UTF8=c("#","{","}","$","_","&","\u0153","œ","oe",
                             "æ","«","»","“","”","n°","N°",
                             "%","‰","€",
                             "^","~","\u2026","\u00A0"),
                      LaTeX=c("\\#","\\{","\\}","\\$","\\_","\\&","\\oe ","\\oe ","\\oe ",
                              "\\ae ","\\og ","\\fg{}","``","''","\\no ","\\No ",
                              "\\%","\\textperthousand","\\texteuro",
                              "\\textasciicircum","\\textasciitilde","\\ldots"," "),
                      nchar_suppl=c(2,2,2,2,2,2,4,4,3,
                                    4,4,5,2,2,3,3,
                                    2,16,9,
                                    16,15,6,0),
                      stringsAsFactors=F)
utf8_To_LateX <- function(vector,df_Trad) {
  for (i in 1:dim(df_Trad)[1]) {
    vector <- gsub(df_Trad$UTF8[i],df_Trad$LaTeX[i],
                   vector,fixed=T)
  }
  return(vector)
}
@

<<Images, echo=F>>=
Sentence <- c()

interact = F

AFI_LOGO <- c()
if (interact == T) {
  AFI_LOGO <-
    tk_choose.files(default = "", caption = "Sélection du logo", multi = T)
}


Couverture_PHOTO <- c()
if (interact == T) {
  Couverture_PHOTO <-
    tk_choose.files(default = "", caption = "Choix de la photo de couverture")
}

Financeurs_LOGOS <- c()
if (interact == T) {
  Financeurs_LOGOS <-
    tk_choose.files(
      default = "", caption="Sélection du/des logo(s) du/des financeur(s)", multi = T
    )
}

if (length(Financeurs_LOGOS) == 0) {
  Financeur1_LOGO <- NA
  Financeur2_LOGO <- NA
  Couverture_WIDTH <- "15cm"
}
if (length(Financeurs_LOGOS) == 1) {
  Financeur1_LOGO <- Financeurs_LOGOS
  Financeur2_LOGO <- Financeurs_LOGOS
  Couverture_WIDTH <- "10cm"
}
if (length(Financeurs_LOGOS) == 2) {
  Financeur1_LOGO <- Financeurs_LOGOS[1]
  Financeur2_LOGO <- Financeurs_LOGOS[2]
  Couverture_WIDTH <- "10cm"
}

Localisation_Globale <- c()
if (interact == T) {
Localisation_Globale <-
  tk_choose.files(default = "", caption = "Choix du plan de localisation globale")
}

Plan_Foret <- c()
if (interact == T) {
Plan_Foret <-
  tk_choose.files(default = "", caption = "Sélection du plan de la forêt")
}

Plan_Placettes <- c()
if (interact == T) {
Plan_Placettes <-
  tk_choose.files(default = "", caption = "Sélection du plan des placettes")
}

Station_Doc <- c()
if (interact == T) {
Station_Doc <-
  tk_choose.files(
    default = "", caption = "Sélection du document d'analyse stationnelle"
    )
}

Geol_Doc <- c()
if (interact == T) {
Geol_Doc <-
  tk_choose.files(default = "", caption = "Sélection de la carte géologique")
}

# ---- Cartes de résultats :
Answer_MAPS <- "no"

if (interact == T) {
Answer_MAPS <-
  tk_messageBox(
    type = "yesno",
    message = "Souhaitez-vous ajouter des cartes de résultats (format '.png') ?\n\nattention ordre de sélection !"
  )
}

Map_ListFiles <- c()
while(Answer_MAPS == "yes") {
  Map_FILE <-
    tk_choose.files(
      default = "", caption = "Sélection d'une carte de résultats",
      filters = matrix(c("jpg", ".jpg"), ncol = 2),
      multi = T
    )

  Map_ListFiles <- c(Map_ListFiles, Map_FILE)
  Answer_MAPS <-
    tk_messageBox(
      type = "yesno",
      message = "Souhaitez-vous ajouter des cartes de résultats (format '.png') ?\n\nattention ordre de sélection !"
    )
}

Eval_Maps <- ifelse(length(Map_ListFiles) > 0, TRUE, FALSE)


# ---- Autres éléments :
DerniereAnnee <-
  Cycles$Annee[Cycles$NumForet == Choix & Cycles$Cycle == DernierCycle]

# ----- Logos
ONF_LOGO <- paste0(repLogos, "logoONF_2.png")
AFI_LOGO <- paste0(repLogos, "AFI_Logo.jpg")
APT_LOGO <- paste0(repLogos, "APT_LOGO.png")


# -- Propriétaire
# Nom
# Proprietaire <- Adresses$Nom[which(Adresses$NumForet==Choix &
#                                             Adresses$Type=="Propriétaire")]
# Proprietaire <- Cle$Nom[which(Cle$NumForet==Choix &
#                                             Cle$Type=="P")]
# Proprietaire <- paste0(Proprietaire,
#                        collapse=", ")
# Proprietaire <- gsub("\U0026", "et", Proprietaire, fixed = T)
# pos_NA <- which(is.na(Proprietaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Proprietaire <- Proprietaire[-pos_NA]
# }
# # Adresse
# # Adresse_Proprietaire <- Adresses$Adresse1[which(Adresses$NumForet==Choix &
# #                                                   Adresses$Type=="Propriétaire")]
# Adresse_Proprietaire <- Adresses[which(is.element(tolower(Adresses$Nom),
#                                                            tolower(Proprietaire))),
#                                  c("Adresse1","Adresse2")]
# pos_NA <- which(is.na(Adresse_Proprietaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Adresse_Proprietaire <- Adresse_Proprietaire[-pos_NA]
# }
# Adresse_Proprietaire <- paste0(Adresse_Proprietaire,
#                                collapse="\\\\")
# # Tel
# # Tel_Proprietaire <- Adresses$Tel[which(Adresses$NumForet==Choix &
# #                                          Adresses$Type=="Propriétaire")]
# Tel_Proprietaire <- Adresses$Tel[which(is.element(tolower(Adresses$Nom),
#                                                            tolower(Proprietaire)))]
# pos_NA <- which(is.na(Tel_Proprietaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Tel_Proprietaire <- Tel_Proprietaire[-pos_NA]
# }
# Tel_Proprietaire <- paste0(Tel_Proprietaire,
#                            collapse=", ")
# # Email
# # Email_Proprietaire <- Adresses$Email[which(Adresses$NumForet==Choix &
# #                                          Adresses$Type=="Proprietaire")]
# Email_Proprietaire <- Adresses[which(is.element(tolower(Adresses$Nom),
#                                                   tolower(Proprietaire))),
#                                "E-Mail"]
# pos_NA <- which(is.na(Email_Proprietaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Email_Proprietaire <- Email_Proprietaire[-pos_NA]
# }
# Email_Proprietaire <- paste0(Email_Proprietaire,
#                            collapse=", ")
# Email_Proprietaire <- paste0(Email_Proprietaire,
#                                collapse=", ")
#
#
# # -- Gestionnaire
# # Nom
# # Gestionnaire <- Adresses$Nom[which(Adresses$NumForet==Choix &
# #                                             Adresses$Type=="Gestionnaire")]
# Gestionnaire <- Cle$Nom[which(Cle$NumForet==Choix &
#                 Cle$Type=="G")]
# Gestionnaire <- paste0(Gestionnaire,
#                        collapse=", ")
# Gestionnaire <- gsub("\U0026", "et", Gestionnaire, fixed = T)
# pos_NA <- which(is.na(Gestionnaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Gestionnaire <- Gestionnaire[-pos_NA]
# }
# # Adresse
# # Adresse_Gestionnaire <- Adresses$Adresse1[which(Adresses$NumForet==Choix &
# #                                                   Adresses$Type=="Gestionnaire")]
# Adresse_Gestionnaire <- Adresses[which(is.element(tolower(Adresses$Nom),
#                                                       tolower(Gestionnaire))),
#                                           c("Adresse1","Adresse2")]
# pos_NA <- which(is.na(Adresse_Gestionnaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Adresse_Gestionnaire <- Adresse_Gestionnaire[-pos_NA]
# }
# Adresse_Gestionnaire <- paste0(Adresse_Gestionnaire,
#                                collapse="\\\\")
# # Tel
# # Tel_Gestionnaire <- Adresses$Tel[which(Adresses$NumForet==Choix &
# #                                          Adresses$Type=="Gestionnaire")]
# Tel_Gestionnaire <- Adresses$Tel[which(is.element(tolower(Adresses$Nom),
#                                                   tolower(Gestionnaire)))]
# pos_NA <- which(is.na(Tel_Gestionnaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Tel_Gestionnaire <- Tel_Gestionnaire[-pos_NA]
# }
# Tel_Gestionnaire <- paste0(Tel_Gestionnaire,
#                            collapse=", ")
# # Fax
# # Fax_Gestionnaire <- Adresses$Fax[which(Adresses$NumForet==Choix &
# #                                          Adresses$Type=="Gestionnaire")]
# Fax_Gestionnaire <- Adresses$Fax[which(is.element(tolower(Adresses$Nom),
#                                                   tolower(Gestionnaire)))]
# pos_NA <- which(is.na(Fax_Gestionnaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Fax_Gestionnaire <- Fax_Gestionnaire[-pos_NA]
# }
# Fax_Gestionnaire <- paste0(Fax_Gestionnaire,
#                            collapse=", ")
# Fax_Gestionnaire <- paste0(Fax_Gestionnaire,
#                                collapse=", ")
# # Email
# # Email_Gestionnaire <- Adresses$Email[which(Adresses$NumForet==Choix &
# #                                          Adresses$Type=="Gestionnaire")]
# Email_Gestionnaire <- Adresses[which(is.element(tolower(Adresses$Nom),
#                                                   tolower(Gestionnaire))),
#                                "E-Mail"]
# pos_NA <- which(is.na(Email_Gestionnaire)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Email_Gestionnaire <- Email_Gestionnaire[-pos_NA]
# }
# Email_Gestionnaire <- paste0(Email_Gestionnaire,
#                            collapse=", ")
# Email_Gestionnaire <- paste0(Email_Gestionnaire,
#                                collapse=", ")
#
#
# # -- Pays
# Pays <- Admin$Pays[Admin$NumForet==Choix]
# pos_NA <- which(is.na(Pays)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Pays <- Pays[-pos_NA]
# }
# # -- Région
# Region <- Admin[Admin$NumForet==Choix,"Région"]
# pos_NA <- which(is.na(Region)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Region <- Region[-pos_NA]
# }
# # -- Département
# Departement <- Admin$NomDep[Admin$NumForet==Choix]
# pos_NA <- which(is.na(Departement)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Departement <- Departement[-pos_NA]
# }
# # -- Commune
# Commune <- Admin$Commune[Admin$NumForet==Choix]
# pos_NA <- which(is.na(Commune)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Commune <- Commune[-pos_NA]
# }
#
# # -- SylvoEcoRégion
# SER <- Stations$SylvoEcoReg[Stations$NumForet==Choix]
# pos_NA <- which(is.na(SER)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   SER <- SER[-pos_NA]
# }
# # -- Région forestière IGN
# Region_Foret_IGN <- Stations[Stations$NumForet==Choix,"NomRégionNaturelle"]
#
# pos_NA <- which(is.na(Region_Foret_IGN)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Region_Foret_IGN <- Region_Foret_IGN[-pos_NA]
# }
# # Region_Foret_IGN <- utf82LaTeX(Region_Foret_IGN)
# # Region_Foret_IGN <- "Hautes-Vosges gréseuses"
# # -- Parcelle
# NumParcelle <- Dispositifs$Parcelle[Dispositifs$NumForet==Choix] # as.numeric
# pos_NA <- which(is.na(NumParcelle)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   NumParcelle <- NumParcelle[-pos_NA]
# }
# # -- Surfaces
# SurfForet <- as.numeric(Dispositifs$SurfForet[Dispositifs$NumForet==Choix])
# pos_NA <- which(is.na(SurfForet)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   SurfForet <- SurfForet[-pos_NA]
# } else {
#   SurfForet <- paste0(SurfForet," ha")
# }
# SurfParc <- as.numeric(Dispositifs$SurfParc[Dispositifs$NumForet==Choix])
# pos_NA <- which(is.na(SurfParc)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   SurfParc <- SurfParc[-pos_NA]
# } else {
#   SurfParc <- paste0(SurfParc," ha")
# }
#
#
# # -- Auteur fiche
# Auteur_Fiche <- "Julien Tomasini"
# Organisme_Suivi <- "AFI-ENGREF"
# # -- Observations
# Observations <- Dispositifs$Observation[Dispositifs$NumForet==Choix]
# pos_NA <- which(is.na(Observations)) # Sécurité valeurs vides
# if (length(pos_NA) > 0) {
#   Observations <- Observations[-pos_NA]
# }
NumParcelle <- c()
Commune <- c()
@

\newcolumntype{P}[1]{>{\centering\arraybackslash}p{#1}}
\newcolumntype{M}[1]{>{\centering\arraybackslash}m{#1}}
\newcolumntype{N}{@{}m{0pt}@{}}

\def\appendixtocname{Annexes}
\def\appendixpagename{Annexes}
\def\appendixname{Annexe}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\raggedbottom
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\thispagestyle{empty}

\begin{center}
% \EditIf{\Sexpr{length(AFI_LOGO) > 0}}{TRUE}{
% \begin{figure}[ht]
% \centering
% % \includegraphics[width=6cm]{/Users/bruciamacchiemax/Desktop/AFI/Images/Logos/AFI_logo}
% \includegraphics[width=3cm]{\Sexpr{AFI_LOGO}}
% \end{figure}
% }{
% \vspace{6cm}
% }
\begin{figure}[ht]
\centering
% \includegraphics[width=6cm]{/Users/bruciamacchiemax/Desktop/AFI/Images/Logos/AFI_logo}
\includegraphics[height=1.5cm]{\Sexpr{ONF_LOGO}}
\end{figure}

\vspace*{0.5cm}

\vspace*{5cm}
\large{\textbf{Livret des résultats de l'inventaire forestier\\par placettes permanentes\\
- \Sexpr{DerniereAnnee} -}}\\
\vspace*{0.5cm}
\Sexpr{NomForet}


\vspace*{1cm}

\EditIf{\Sexpr{length(Couverture_PHOTO) > 0}}{TRUE}{
\begin{figure*}[ht]
\begin{center}
\includegraphics[height=13cm]{\Sexpr{Couverture_PHOTO}}
%    \includegraphics[width=17cm]{/Users/bruciamacchiemax/Desktop/AFI/Images/PhotosLivret/5.jpg}
\end{center}
\end{figure*}
}{
\vspace{10cm}
}

\vfill

% \footnotesize{Placettes installées par :}\\
% \includegraphics[height=2.5cm]{Figures/Logo_JT_CabinetFL.png}
% \begin{minipage}[h]{\dimexpr.2\textwidth-\tabcolsep-.1pt}
% \bigbreak
% Valentin DEMETS\\
% Benjamin ROUVIERE\\
%\end{minipage}
%\begin{minipage}[h]{\dimexpr.1\textwidth-\tabcolsep-.1pt}
%\centering
%
% \end{minipage}
\EditIf{\Sexpr{length(Financeurs_LOGOS)}}{0}{
}{
\vspace*{0.5cm}
avec le financement de\\
\EditIf{\Sexpr{length(Financeurs_LOGOS)}}{1}{
\includegraphics[height=3cm]{\Sexpr{Financeur1_LOGO}}
}{
\begin{multicols}{2}

\begin{flushleft}
\includegraphics[height=3cm]{\Sexpr{Financeur1_LOGO}}
\end{flushleft}

\begin{flushright}
\includegraphics[height=3cm]{\Sexpr{Financeur2_LOGO}} % changement
\end{flushright}

\end{multicols}
}
}
\end{center}


\begin{multicols}{3}
\begin{flushleft}
\includegraphics[height=1.5cm]{\Sexpr{AFI_LOGO}}
\end{flushleft}

\scriptsize{Conçu et développé par\\ Max Bruciamacchie et Valentin Demets\\ en collaboration avec Julien Tomasini}

\begin{flushright}
\includegraphics[height=1.5cm]{\Sexpr{APT_LOGO}} % changement
\end{flushright}
\end{multicols}

% \newpage
% \thispagestyle{empty}
\pagestyle{plain}
% \clearpage
\tableofcontents


% \noindent\fbox{\parbox{\linewidth-2\fboxrule-2\fboxsep}{\centering \huge \textbf{FORÊT DE GERGY}}}\\
% \vfill

% \noindent\fbox{\parbox{\linewidth-2\fboxrule-2\fboxsep}{
% \LARGE \centering \textbf{Généralités}
% }}

\chapter{Généralités}
<<Comment_1, echo=F,message=F,results='asis',eval=F,include=F>>=
# setwd("D:/foret/Travail/Programmation/AFI/Template")
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1")
cat(Comment$Texte)
@

% \setcounter{page}{1}
\section{Domaine d'inventaire}
% \vspace{1cm}
<<Comment_1.1, echo=F,message=F,results='asis',eval=Eval_Comment, include=Eval_Comment>>=
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1.1")
cat(utf82LaTeX(Comment$Texte))
@
%%%%%%%%%%%%%%%%%%%%

% \subsection{Rappel sur les raisons du suivi}



%%%%%%%%%%%%%%%%%%%%%
\captionsetup{labelformat=empty}
<<Operateurs,results="asis",eval=T, include=T>>=
Tiers_PrenomNOM <- paste0(Tiers$Prénom," ",Tiers$Nom)
df <- rename_(Cycles,
              "Operateurs"="Opérateurs") %>%
  select(Cycle,Annee,Operateurs) %>%
  distinct()

  List <- c()
      for (i in 1:dim(df)[1]) {
        List <- c(List,
                  list(str_extract(df$Operateurs, Tiers_PrenomNOM)[!is.na(str_extract(df$Operateurs, Tiers_PrenomNOM))]))
      }

  df1 <- data.frame(Cycle=rep.int(df$Cycle, sapply(List, length)),
                    Annee=rep.int(df$Annee, sapply(List, length)),
                    Operateurs=unlist(List),
                    stringsAsFactors = F) %>%
    melt(id=c("Cycle","Annee")) %>%
    filter(!is.na(value)) %>%
    arrange(Cycle,Annee,variable)



df2 <- MultiRow(df1,c(1,2)) %>%
  select(Cycle,Annee,value) %>%
  mutate(Vide=NA) %>% # Création colonne vide pour mise en forme tableau
  rename_("\\cellcolor{LightGray} Cycle"="Cycle",
          "\\cellcolor{LightGray} Année"="Annee",
          "\\cellcolor{LightGray} Opérateurs"="value",
          " "="Vide")
pos_Lines <- which(!is.na(df2[,"\\cellcolor{LightGray} Année"]))
if (is.element(1,pos_Lines)) {
  pos_Lines <- pos_Lines[-which(pos_Lines==1)]
}

# Commande pour régler la hauteur de la première ligne :
command="[3ex]\n\\hline"
pos=list(0)


print(xtable(df2,
             caption="Ce réseau a été mis en place et mesuré par les opérateurs suivants :",
             digits=rep(0,dim(df2)[2]+1),
             align=c("M{0cm}|","|M{2cm}|","M{2cm}|","M{6cm}|","N"),
             label="TabOperateurs"),
      include.rownames=FALSE,
      caption.placement="top",
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,pos_Lines-1,dim(df2)[1]),
      floating=T,
      add.to.row=list(
        pos=pos,
        command=command), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      #             #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      #             # rep("\\cline{3-6}",3))
      # # ),
      size="\\normalsize")
@
\captionsetup{labelformat=default}
%\vspace{1cm}
% \vfill
%%%%%%%%%%%%%%%%%%%%%
% \begin{figure}[H]
\EditIf{\Sexpr{length(Localisation_Globale) > 0}}{TRUE}{
\section{Plan de situation}
\begin{center}
% \textbf{Plan de situation (1/\np{200000})}
\includegraphics[width=\textwidth]{\Sexpr{Localisation_Globale}}
\end{center}
% \end{figure}
}{}

\newpage


% \invisiblesection{Plan de localisation}
\EditIf{\Sexpr{length(Plan_Foret) > 0}}{TRUE}{
\section{Plan de localisation}
\begin{center}
% \textbf{Plan de situation (1/\np{200000})}
\includegraphics[width=\textwidth]{\Sexpr{Plan_Foret}}
\end{center}
% \includepdf[pages=-]{\Sexpr{Plan_Foret}}
% \clearpage
}{}

% \begin{landscape}
% % -- Plan de localisation Versoix
% \includepdf[scale=0.8,pagecommand=\section{Plan de localisation}]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Data/Plans/Plan_Placettes_Versoix_Nord.pdf}
%
% \includepdf[pages=-,scale=0.8]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Data/Plans/Plan_Placettes_Versoix_Hangar.pdf}
% \includepdf[pages=-,scale=0.8]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Data/Plans/Plan_Placettes_Versoix_Sud.pdf}
% \end{landscape}
% \clearpage


\EditIf{\Sexpr{length(Plan_Placettes) > 0}}{TRUE}{
 \invisiblesection{Plan des placettes}
\includepdf[pages=-]{\Sexpr{Plan_Placettes}}
\clearpage
}{}
\EditIf{\Sexpr{length(Station_Doc) > 0}}{TRUE}{
 \invisiblesection{Stations}
\includepdf[pages=-]{\Sexpr{Station_Doc}}
}{}
\EditIf{\Sexpr{length(Geol_Doc) > 0}}{TRUE}{
 \invisiblesection{Géologie}
\includepdf[pages=-]{\Sexpr{Geol_Doc}}
}{}
\clearpage

% \section{Les raisons du choix}
<<Comment_Ancien,echo=F,message=F,results='asis',eval=F,include=F>>=

# setwd("D:/foret/Travail/Programmation/AFI/Template")
Comments <- data_frame(text=readLines("D:/foret/Travail/Programmation/AFI/Template/Comments.txt",
                                      encoding="UTF-8")) %>%
  filter(text!="") %>%
  separate(text, c("nature","section"), sep="-comment", fill = "left") %>%
  # mutate(section=str_replace_all(section,"’",""))
  summarise(nature = nature[1], section = str_c(section[-1], collapse = "\\\\"))

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, nature=="Introduction")
cat(Comment$section)
# cat(str_detectreplace(Comment$section,"’","'")
# print(Comment$section,
#       sanitize.text.function=function(x){return(x)})
@

<<Comment_1.6, echo=F,message=F,results='asis',eval=F,include=F>>=
# setwd("D:/foret/Travail/Programmation/AFI/Template")
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1.6")
cat(utf82LaTeX(Comment$Texte))
@
% \section{Les raisons du choix}


<<Photos_Supplementaires,echo=F,message=F,results='asis',eval=T,include=T>>=
# Photo1=paste0(repAFI,"/Images/1.jpg")
# Photo2=paste0(repAFI,"/Images/3.jpg")
# Photo3=paste0(repAFI,"/Images/4.jpg")
# Photo4=paste0(repAFI,"/Images/5.jpg")

# Title1="Photo 1"
# Title2="Photo 2"
# Title3="Photo 3"
# Title4="Photo 4"

# Disp_PHOTOS <- tk_choose.files(default="",
#                 caption="Sélection des photos à rajouter (4 maximum)",
#                                     # filters=matrix(c(".JPG",".jpg",
#                                     #                  ".PDF",".pdf",
#                                     #                  ".PNG",".png"),
#                                     #             3,2,byrow=T),
#                                       multi=T)
Disp_PHOTOS <- c()
if (length(Disp_PHOTOS) == 0) {
  Disp1_PHOTO <- NA
  Disp2_PHOTO <- NA
  Disp3_PHOTO <- NA
  Disp4_PHOTO <- NA
}
if (length(Disp_PHOTOS) == 1) {
  Disp1_PHOTO <- Disp_PHOTOS[1]
  Disp2_PHOTO <- NA
  Disp3_PHOTO <- NA
  Disp4_PHOTO <- NA
}
if (length(Disp_PHOTOS) == 2) {
  Disp1_PHOTO <- Disp_PHOTOS[1]
  Disp2_PHOTO <- Disp_PHOTOS[2]
  Disp3_PHOTO <- NA
  Disp4_PHOTO <- NA
}
if (length(Disp_PHOTOS) == 3) {
  Disp1_PHOTO <- Disp_PHOTOS[1]
  Disp2_PHOTO <- Disp_PHOTOS[2]
  Disp3_PHOTO <- Disp_PHOTOS[3]
  Disp4_PHOTO <- NA
}
if (length(Disp_PHOTOS) == 4) {
  Disp1_PHOTO <- Disp_PHOTOS[1]
  Disp2_PHOTO <- Disp_PHOTOS[2]
  Disp3_PHOTO <- Disp_PHOTOS[3]
  Disp4_PHOTO <- Disp_PHOTOS[4]
}
@

% \textcolor{red}{Plusieurs essais d'arrangement des photos ci-dessous. A discuter vis-à-vis des contraintes de dimensions/format}\\

% \begin{figure}[ht!]
% \centering
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth, height=0.205\textheight]{\Sexpr{Photo1}}
% \caption{\Sexpr{Title1}}\label{fig:\Sexpr{Title1}}
% \end{subfigure}
% ~ % ce symbole ajoute un espacement horisontal entre les premières deux images
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth, height=0.205\textheight]{\Sexpr{Photo2}}
% \caption{\Sexpr{Title2}}\label{fig:\Sexpr{Title2}}
% \end{subfigure}
%
% % la ligne blanche correspond au retour à la ligne après le deuxième image
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth, height=0.205\textheight]{\Sexpr{Photo3}}
% \caption{\Sexpr{Title3}}\label{fig:\Sexpr{Title3}}
% \end{subfigure}
% ~
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth, height=0.205\textheight]{\Sexpr{Photo4}}
% \caption{\Sexpr{Title4}}\label{fig:\Sexpr{Title4}}
% \end{subfigure}
%
% \caption{Différentes situations rencontrées sur les dispositifs AFI. Attention au format des photos. Corrections/règles de format seront à apporter au fur et à mesure de la résolution des bugs}
% \label{fig:animals}
% \end{figure}

% \clearpage

% \begin{figure}[ht!]
% \centering
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth]{\Sexpr{Photo1}}
% \caption{\Sexpr{Title1}}\label{fig:\Sexpr{Title1}}
% \end{subfigure}
% ~ % ce symbole ajoute un espacement horisontal entre les premières deux images
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth]{\Sexpr{Photo2}}
% \caption{\Sexpr{Title2}}\label{fig:\Sexpr{Title2}}
% \end{subfigure}
%
% % la ligne blanche correspond au retour à la ligne après le deuxième image
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth]{\Sexpr{Photo3}}
% \caption{\Sexpr{Title3}}\label{fig:\Sexpr{Title3}}
% \end{subfigure}
% ~
% \begin{subfigure}[b]{0.45\textwidth}
% \includegraphics[width=\textwidth]{\Sexpr{Photo4}}
% \caption{\Sexpr{Title4}}\label{fig:\Sexpr{Title4}}
% \end{subfigure}

% \caption{Différentes situations rencontrées sur les dispositifs AFI. Attention au format des photos. Corrections/règles de format seront à apporter au fur et à mesure de la résolution des bugs}
% \label{fig:animals}
% \end{figure}

% \clearpage

\EditIf{\Sexpr{length(Disp_PHOTOS)}}{0}{

}{

%%%%%%%%%%

\EditIf{\Sexpr{length(Disp_PHOTOS)}}{1}{

\includegraphics[width=\textwidth]{\Sexpr{Disp1_PHOTO}}

}{

%%%%%%%%%%

\EditIf{\Sexpr{length(Disp_PHOTOS)}}{2}{

\begin{multicols}{2}

\begin{flushleft}
\includegraphics[width=0.45\textwidth]{\Sexpr{Disp1_PHOTO}}
\end{flushleft}

\begin{flushright}
\includegraphics[width=0.45\textwidth]{\Sexpr{Disp2_PHOTO}} % changement
\end{flushright}

\end{multicols}

}{

%%%%%%%%%%

\EditIf{\Sexpr{length(Disp_PHOTOS)}}{3}{

\begin{figure}[ht!]
\centering
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp1_PHOTO}}
% \caption{Title2}\label{fig:Title2}
\end{subfigure}
~ % ce symbole ajoute un espacement horisontal entre les premières deux images
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp2_PHOTO}}
% \caption{Title4}\label{fig:Title4}
\end{subfigure}

% la ligne blanche correspond au retour à la ligne après le deuxième image
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp3_PHOTO}}
% \caption{Title3}\label{fig:Title3}
\end{subfigure}
\end{figure}

}{

%%%%%%%%%%

\EditIf{\Sexpr{length(Disp_PHOTOS)}}{4}{

\begin{figure}[ht!]
\centering
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp1_PHOTO}}
% \caption{\Sexpr{Title2}}\label{fig:\Sexpr{Title2}}
\end{subfigure}
~ % ce symbole ajoute un espacement horisontal entre les premières deux images
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp2_PHOTO}}
% \caption{\Sexpr{Title4}}\label{fig:\Sexpr{Title4}}
\end{subfigure}

% la ligne blanche correspond au retour à la ligne après le deuxième image
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp3_PHOTO}}
% \caption{\Sexpr{Title3}}\label{fig:\Sexpr{Title3}}
\end{subfigure}
~
\begin{subfigure}[b]{0.45\textwidth}
\includegraphics[width=\textwidth]{\Sexpr{Disp4_PHOTO}}
% \caption{\Sexpr{Title1}}\label{fig:\Sexpr{Title1}}
\end{subfigure}
\end{figure}

}{}
}
}
}
}


\clearpage

\section{Commentaires des résultats}
<<Comment_1.7, echo=F,message=F,results='asis',eval=Eval_Comment,include=Eval_Comment>>=
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1.6")
cat(utf82LaTeX(Comment$Texte))
@
\subsection{Aspects sylvicoles}
<<Comment_1.7.1, echo=F,message=F,results='asis',eval=Eval_Comment,include=Eval_Comment>>=
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1.7.1")
cat(utf82LaTeX(Comment$Texte))
@

\vspace{0.2cm}





\subsection{Aspects écologiques}
<<Comment_1.7.2, echo=F,message=F,results='asis',eval=Eval_Comment,include=Eval_Comment>>=
Comments <- read.xlsx(Comments_FILE,
                      sheet="Feuil1")

#Ici dans introduction on prend le texte correspondant :
Comment <- filter(Comments, Section=="1.7.2")
cat(utf82LaTeX(Comment$Texte))
@



\clearpage

\chapter{\Sexpr{Titre_Chap2}}
<<Comment_2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2")
cat(Comment$Texte)
@

% \section{Patrimoine financier}
% \subsection{Etat du capital volume et argent au cours du temps}

\section{Capital sur pied}
<<Comment_2.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.1")
cat(Comment$Texte)
@

% \subsection{Variables dendrométriques}
<<Comment_2.1.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.1.1")
cat(Comment$Texte)
@
Le tableau \ref{TabMoyDisp} présente les résultats sur les principales variables dendrométriques pour le dernier inventaire.

% {\Large \textcolor{red}{Attention pour vérifications plus tard : prendre les valeurs d'accroissement par périodes lorsqu'elles sont disponibles}}
<<TabMoyDisp, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=
if (DernierCycle > 1) {
t <- filter(gfForetDen_,
            Cycle == DernierCycle & NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(-one_of(c("VcHa","VpHa","Gainper",
                   "CV_VcHa","CV_VpHa","CV_Gainper",
                   "Er_VcHa","Er_VpHa","Er_Gainper"))) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         AcctG=round(AcctG,1),
         AcctGper=round(AcctGper,2),
         AcctV=round(AcctV,1),
         AcctVper=round(AcctVper,1),

         CV_Nha=round(CV_Nha,0),
         CV_Gha=round(CV_Gha,0),
         CV_Vha=round(CV_Vha,0),
         CV_AcctG=round(CV_AcctG,0),
         CV_AcctGper=round(CV_AcctGper,0),
         CV_AcctV=round(CV_AcctV,0),
         CV_AcctVper=round(CV_AcctVper,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_AcctG=round(Er_AcctG,1),
         Er_AcctGper=round(Er_AcctGper,1),
         Er_AcctV=round(Er_AcctV,1),
         Er_AcctVper=round(Er_AcctVper,1)) %>%
  melt(id=c("NumForet","Foret","Annee","NbrePlacettes")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Annee + Foret + NbrePlacettes ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,0),"-",round(Nha+Er_Nha*Nha/100,0),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,0),"-",round(Vha+Er_Vha*Vha/100,0),"]"),
         # IC_VhaIFN=paste0("[",round(VhaIFN-Er_VhaIFN*VhaIFN/100,1),"-",round(VhaIFN+Er_VhaIFN*VhaIFN/100,1),"]"),
         IC_AcctGper=paste0("[",round(AcctGper-Er_AcctGper*AcctGper/100,2),"-",round(AcctGper+Er_AcctGper*AcctGper/100,2),"]"),
         IC_AcctVper=paste0("[",round(AcctVper-Er_AcctVper*AcctVper/100,1),"-",round(AcctVper+Er_AcctVper*AcctVper/100,1),"]")) %>%
  melt(id=c("NumForet","Annee","Foret","NbrePlacettes")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
             stat=variable,
             # gsub(" ", "", Nom1, fixed = T)
             # variable=gsub("CV_","",variable,fixed=T),
             # variable=gsub("Er_","",variable,fixed=T),
             # variable=gsub("IC_","",variable,fixed=T))
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"_AcctGper",""),
             stat=str_replace(stat,"_AcctVper",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=str_replace(stat,"AcctGper","Moy"),
             stat=str_replace(stat,"AcctVper","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat)) %>%
  arrange(Annee,variable,stat) %>%
  dcast(NumForet + Annee + Foret + NbrePlacettes + stat ~ variable)
t2 <- select(t1,Annee,stat,Nha,Gha,Vha,AcctGper,AcctVper) %>% #,NbrePlacettes
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))

t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
  # mutate(stat=str_replace(stat,"textbf{Moyenne}","\\textbf{Moyenne2}"), # Mise en forme du tableau
  #        stat=str_replace(stat,"IC","\\emph{Intervalle de confiance}")) %>%
  rename_("Année"="Annee",
          "N"="Nha",
          "G"="Gha",
          "V"="Vha",
          "AcctG"="AcctGper",
          "AcctV"="AcctVper",
          # "Population"="Cat",
          # "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[length(ListPos)+1] <- i
}

# Commande pour agrandir la ligne des moyennes
Command_Height="[3ex]\n\\hline\n\\rule{0pt}{3ex}"
pos_Height=0

ListPos[length(ListPos)+1] <- pos_Height

t3 <- mutate(t3,
             Vide=NA) %>%
  rename_(" "="Vide")

names(t3)[-length(names(t3))] <- paste0("\\cellcolor{LightGray} ",
                                       names(t3)[-length(names(t3))])

# # Commande pour agrandir la ligne des titres des colonnes du tableau
# command="[4ex]\n\\hline"
# pos=list(0)
# ListPos[length(ListPos)+1] <- pos_Height

print(xtable(t3,
             caption = "Principales caractéristiques dendrométriques des tiges précomptables, avec leur précision.\\\\\\scriptsize{N = nombre de tiges (tiges/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
             caption.placement = "top",
             digits=c(rep(0,4),1,0,rep(1,dim(t3)[2]-5)), #rep(1,dim(t3)[2]-6),2,1,0),
             align=c("|M{0.5cm}|","|M{1cm}|","M{1.8cm}|",rep("M{1.8cm}|",dim(t3)[2]-4),"M{1.5cm}|","N"),
             label = "TabMoyDisp"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,dim(t3)[1]),
      floating=T,
      add.to.row=list(
        pos=ListPos,
        command=c(rep("\\cline{2-7}",length(ListPos)-1),
                  Command_Height)), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle==1) {
  t <- filter(gfForetDen_,
            Cycle == DernierCycle & NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(-one_of(c("VcHa","VpHa",
                   "CV_VcHa","CV_VpHa",
                   "Er_VcHa","Er_VpHa"))) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         # AcctG=round(AcctG,1),
         # AcctGper=round(AcctGper,1),
         # AcctV=round(AcctV,1),
         # AcctVper=round(AcctVper,1),

         CV_Nha=round(CV_Nha,0),
         CV_Gha=round(CV_Gha,0),
         CV_Vha=round(CV_Vha,0),
         # CV_AcctG=round(CV_AcctG,0),
         # CV_AcctGper=round(CV_AcctGper,0),
         # CV_AcctV=round(CV_AcctV,0),
         # CV_AcctVper=round(CV_AcctVper,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1)) %>%
         # Er_AcctG=round(Er_AcctG,1),
         # Er_AcctGper=round(Er_AcctGper,1),
         # Er_AcctV=round(Er_AcctV,1),
         # Er_AcctVper=round(Er_AcctVper,1)) %>%
  melt(id=c("NumForet","Foret","Annee","NbrePlacettes")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Annee + Foret + NbrePlacettes ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,0),"-",round(Nha+Er_Nha*Nha/100,0),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,0),"-",round(Vha+Er_Vha*Vha/100,0),"]")) %>%
  melt(id=c("NumForet","Annee","Foret","NbrePlacettes")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
             stat=variable,
             # gsub(" ", "", Nom1, fixed = T)
             # variable=gsub("CV_","",variable,fixed=T),
             # variable=gsub("Er_","",variable,fixed=T),
             # variable=gsub("IC_","",variable,fixed=T))
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat)) %>%
  arrange(Annee,variable,stat) %>%
  dcast(NumForet + Annee + Foret + NbrePlacettes + stat ~ variable)
t2 <- select(t1,Annee,stat,Nha,Gha,Vha) %>% #,NbrePlacettes
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))

t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
  # mutate(stat=str_replace(stat,"textbf{Moyenne}","\\textbf{Moyenne2}"), # Mise en forme du tableau
  #        stat=str_replace(stat,"IC","\\emph{Intervalle de confiance}")) %>%
  rename_("Année"="Annee",
          "N"="Nha",
          "G"="Gha",
          "V"="Vha",
          # "Population"="Cat",
          # "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[length(ListPos)+1] <- i
}

# Commande pour agrandir la ligne des moyennes
Command_Height="[3ex]\n\\hline\n\\rule{0pt}{3ex}"
pos_Height=0

ListPos[length(ListPos)+1] <- pos_Height

t3 <- mutate(t3,
             Vide=NA) %>%
  rename_(" "="Vide")

names(t3)[-length(names(t3))] <- paste0("\\cellcolor{LightGray} ",
                                       names(t3)[-length(names(t3))])

# # Commande pour agrandir la ligne des titres des colonnes du tableau
# command="[4ex]\n\\hline"
# pos=list(0)
# ListPos[length(ListPos)+1] <- pos_Height

print(xtable(t3,
             caption = "Principales caractéristiques dendrométriques des tiges précomptables, avec leur précision.\\\\\\scriptsize{N = nombre de tiges (tiges/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
             caption.placement = "top",
             digits=c(rep(0,4),1,0,rep(1,dim(t3)[2]-5)), #rep(1,dim(t3)[2]-6),2,1,0),
             align=c("|M{0.5cm}|","|M{1cm}|","M{1.8cm}|",rep("M{1.8cm}|",dim(t3)[2]-4),"M{1.5cm}|","N"),
             label = "TabMoyDisp"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,dim(t3)[1]),
      floating=T,
      table.placement="H",
      add.to.row=list(
        pos=ListPos,
        command=c(rep(paste0("\\cline{2-",dim(t3)[2],"}"),length(ListPos)-1),
                  Command_Height)), #9,"\\cmidrule[0.8pt]{2-7}"
      #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")
}

@

La figure \ref{fig:VarDendro} illustre la variabilité des principales composantes dendrométriques à l'échelle du dispositif, soit \Sexpr{NbrePlac} placettes.\\
\emph{La médiane de chaque variable est représentée par le trait horizontal au milieu de chaque boîte à moustache. Les traits au-dessus et en-dessous de la boîte représentent respectivement le premier et le dernier quartile des résultats obtenus par placettes. Les points pouvant apparaître en dehors de la boîte sont des valeurs considérées comme exceptionnelles.}

<<VarDendro, echo=F, fig.pos='H', size='footnotesize', include=TRUE, eval=T, fig.height=2, fig.width=ifelse(DernierCycle==1,4.5,7), fig.cap="Variabilité des principales caractéristiques dendrométriques pour les tiges précomptables", error=F, comment=F, warning=F, message=F>>=
# "\\Sexpr{ifelse(DernierCycle==1,3.5,\\maxwidth)}"
#Essai autre représentation 22/12/2015
t <- filter(gfPlaDen_,
            Cycle==DernierCycle & NumForet==Choix) %>%
  select(-NumPlac) %>%
  melt(id=c("NumForet","Cycle"))
  # mutate(log=log(value))
tN <-filter(t, variable=="Nha") %>%
  mutate(variable="N")
tG <-filter(t, variable=="Gha") %>%
  mutate(variable="G")
tV <-filter(t, variable=="Vha") %>%
  mutate(variable="V")
if (DernierCycle > 1) {
  tAcctG <-filter(t, variable=="AcctGper") %>%
    mutate(variable="AcctG")
  tAcctV <-filter(t, variable=="AcctVper") %>%
    mutate(variable="AcctV")
}

p1 <- ggplot() +
  geom_boxplot(tN,mapping=aes(variable,value)) +
  scale_y_continuous(limits=c(0,max(tN$value,na.rm=T)*1.1),
                     # breaks=floor(seq(0,max(tN$value,na.rm=T)*1.1,max(tN$value,na.rm=T)*1.1/4)/125+0.5)*125,
                     expand=c(0,0),
                     name="(tiges/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"), #element_text(hjust=1,angle=0)
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #blue

p2 <- ggplot() +
  geom_boxplot(tG,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tG$value,na.rm=T)+max(tG$value,na.rm=T)*0.1),
                       name="(m2/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #royalblue4
p3 <- ggplot() +
  geom_boxplot(tV,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tV$value,na.rm=T)+max(tV$value,na.rm=T)*0.1),
                       name="(m3/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #navy
if (DernierCycle > 1) {
p4 <- ggplot() +
  geom_boxplot(tAcctG,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tAcctG$value,na.rm=T)+max(tAcctG$value,na.rm=T)*0.1),
                       name="(m2/ha/an)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #navy
p5 <- ggplot() +
  geom_boxplot(tAcctV,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tAcctV$value,na.rm=T)+max(tAcctV$value,na.rm=T)*0.1),
                       name="(m3/ha/an)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #navy
grid.arrange(p1,p2,p3,p4,p5,widths=c(1,1,1,1,1))
} else {
  grid.arrange(p1,p2,p3,widths=c(1,1,1))
}

@

\FloatBarrier
% \subsection{Variables économiques}
% <<Comment_2.1.2, echo=F,message=F,results='asis',eval=F,include=F>>=
% Comment <- filter(Comments, Section=="2.1.2")
% cat(Comment$Texte)
% @
%
% Le tableau \ref{TabCapital} présente les résultats sur les principales variables économiques, pour le dernier inventaire.
% % \textcolor{red}{Mettre en place calcul gain par période}
% <<TabCapital, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=T, include=T>>=
% # tk_messageBox(type="ok",
% #               message=paste0(getOption("encoding"),"\n",Sys.getlocale()))
% if (DernierCycle > 1) {
% t <- filter(gfForetDen_,
%             Cycle == DernierCycle & NumForet==Choix) %>%
%   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
%   mutate(VcHa=round(VcHa,0),
%          VpHa=round(VpHa,0),
%          Gainper=round(Gainper,0),
%
%          CV_VcHa=round(CV_VcHa,0),
%          CV_VpHa=round(CV_VpHa,0),
%          CV_Gainper=round(CV_Gainper,0),
%
%          Er_VcHa=round(Er_VcHa,1),
%          Er_VpHa=round(Er_VpHa,1),
%          Er_Gainper=round(Er_Gainper,1)) %>%
%   melt(id=c("NumForet","Foret","Annee","NbrePlacettes")) %>%
%   mutate(value=round(value,1)) %>%
%   dcast(NumForet + Annee + Foret + NbrePlacettes ~ variable) %>%
%   mutate(IC_VcHa=paste0("[",round(VcHa-Er_VcHa*VcHa/100,0),"-",round(VcHa+Er_VcHa*VcHa/100,0),"]"),
%          IC_VpHa=paste0("[",round(VpHa-Er_VpHa*VpHa/100,0),"-",round(VpHa+Er_VpHa*VpHa/100,0),"]"),
%          IC_Gainper=paste0("[",round(Gainper-Er_Gainper*Gainper/100,1),"-",round(Gainper+Er_Gainper*Gainper/100,1),"]")) %>%
%   melt(id=c("NumForet","Annee","Foret","NbrePlacettes")) %>%
%   mutate(stat=variable,
%          variable=str_replace(variable,"CV_",""),
%          variable=str_replace(variable,"Er_",""),
%          variable=str_replace(variable,"IC_",""),
%          stat=str_replace(stat,"_VcHa",""),
%          stat=str_replace(stat,"_VpHa",""),
%          stat=str_replace(stat,"_Gainper",""),
%          stat=str_replace(stat,"VcHa","Moy"),
%          stat=str_replace(stat,"VpHa","Moy"),
%          stat=str_replace(stat,"Gainper","Moy"),
%          stat=factor(stat,levels=c("Moy","CV","Er","IC")),
%
%          value=ifelse(stat=="IC",
%                           paste0("\\emph{",value,"}"),
%                           value),
%              value=ifelse(stat=="Moy",
%                           paste0("\\textbf{",value,"}"),
%                           value)) %>%
%   filter(!is.na(stat)) %>%
%   arrange(Annee,variable,stat) %>%
%   dcast(NumForet + Annee + Foret + NbrePlacettes + stat ~ variable)
% t2 <- select(t,Annee,stat,VcHa,VpHa,Gainper) %>% #,NbrePlacettes
%   mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
%          stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
%          stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
%          stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))
% t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
%   rename_("Année"="Annee",
%           "Vc"="VcHa",
%           "Vp"="VpHa",
%           "Gain"="Gainper",
%           # "Population"="Cat",
%           # "Nombre de placettes"="NbrePlacettes",
%           " "="stat")
% ListPos <- list()
% for (i in 1:(dim(t3)[1]-1)) {
%   ListPos[i] <- i
% }
%
% # Commande pour agrandir la ligne des moyennes
% Command_Height="[3ex]\n\\hline\n\\rule{0pt}{3ex}"
% pos_Height=0
%
% ListPos[length(ListPos)+1] <- pos_Height
%
% t3 <- mutate(t3,
%              Vide=NA) %>%
%   rename_(" "="Vide")
%
% names(t3)[-length(names(t3))] <- paste0("\\cellcolor{LightGray} ",
%                                        names(t3)[-length(names(t3))])
%
% print(xtable(t3,
%              caption = "Principales caractéristiques économiques des tiges précomptables, avec leur précision.\\\\\\scriptsize{Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}",
%              caption.placement = "top",
%              digits=c(rep(0,dim(t3)[2]-1),1,0), #c(rep(0,4),rep(1,dim(t3)[2]-4),0),
%              align=c("|M{0.5cm}","|M{1cm}|","M{2.5cm}|",rep("M{2.5cm}|",dim(t3)[2]-4),"M{1.8cm}|","N"), #,"M{1.5cm}"
%              label = "TabCapital"),
%       include.rownames=FALSE,
%       sanitize.text.function=function(x){return(x)},
%       hline.after=c(-1,dim(t3)[1]),
%       add.to.row=list(
%         pos=ListPos,
%         command=c(rep("\\cline{2-5}",length(ListPos)-1),
%                   Command_Height)), #9,"\\cmidrule[0.8pt]{2-7}"
%       #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
%       #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
%       # rep("\\cline{3-6}",3))
%       # ),
%       size="\\footnotesize")
% }
%
%
%
% # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
%
% if (DernierCycle==1) {
%   t <- filter(gfForetDen_,
%             Cycle == DernierCycle & NumForet==Choix) %>%
%   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
%   mutate(VcHa=round(VcHa,0),
%
%          CV_VcHa=round(CV_VcHa,0),
%
%          Er_VcHa=round(Er_VcHa,1)) %>%
%   melt(id=c("NumForet","Foret","Annee","NbrePlacettes")) %>%
%   mutate(value=round(value,1)) %>%
%   dcast(NumForet + Annee + Foret + NbrePlacettes ~ variable) %>%
%   mutate(IC_VcHa=paste0("[",round(VcHa-Er_VcHa*VcHa/100,0),"-",round(VcHa+Er_VcHa*VcHa/100,0),"]")) %>%
%   melt(id=c("NumForet","Annee","Foret","NbrePlacettes")) %>%
%   mutate(stat=variable,
%          variable=str_replace(variable,"CV_",""),
%          variable=str_replace(variable,"Er_",""),
%          variable=str_replace(variable,"IC_",""),
%          stat=str_replace(stat,"_VcHa",""),
%          stat=str_replace(stat,"VcHa","Moy"),
%          stat=factor(stat,levels=c("Moy","CV","Er","IC")),
%
%          value=ifelse(stat=="IC",
%                           paste0("\\emph{",value,"}"),
%                           value),
%              value=ifelse(stat=="Moy",
%                           paste0("\\textbf{",value,"}"),
%                           value)) %>%
%   filter(!is.na(stat)) %>%
%   arrange(Annee,variable,stat) %>%
%   dcast(NumForet + Annee + Foret + NbrePlacettes + stat ~ variable)
% t2 <- select(t,Annee,stat,VcHa) %>% #,NbrePlacettes
%   mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
%          stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
%          stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
%          stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))
% t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
%   rename_("Année"="Annee",
%           "Vc"="VcHa",
%           # "Population"="Cat",
%           # "Nombre de placettes"="NbrePlacettes",
%           " "="stat")
% ListPos <- list()
% for (i in 1:(dim(t3)[1]-1)) {
%   ListPos[i] <- i
% }
%
% # Commande pour agrandir la ligne des moyennes
% Command_Height="[3ex]\n\\hline\n\\rule{0pt}{3ex}"
% pos_Height=0
%
% ListPos[length(ListPos)+1] <- pos_Height
%
% t3 <- mutate(t3,
%              Vide=NA) %>%
%   rename_(" "="Vide")
%
% names(t3)[-length(names(t3))] <- paste0("\\cellcolor{LightGray} ",
%                                        names(t3)[-length(names(t3))])
%
% print(xtable(t3,
%              caption = "Principales caractéristiques économiques des tiges précomptables, avec leur précision.\\\\\\scriptsize{Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}",
%              caption.placement = "top",
%              digits=c(rep(0,dim(t3)[2]-1),1,0), #c(rep(0,4),rep(1,dim(t3)[2]-4),0),
%              align=c("|M{0.5cm}","|M{1cm}|","M{2.5cm}|",rep("M{2.5cm}|",dim(t3)[2]-4),"M{1.8cm}|","N"), #,"M{1.5cm}"
%              label = "TabCapital"),
%       include.rownames=FALSE,
%       sanitize.text.function=function(x){return(x)},
%       hline.after=c(-1,dim(t3)[1]),
%       add.to.row=list(
%         pos=ListPos,
%         command=c(rep(paste0("\\cline{2-",dim(t3)[2],"}"),length(ListPos)-1),
%                   Command_Height)), #9,"\\cmidrule[0.8pt]{2-7}"
%       #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
%       #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
%       # rep("\\cline{3-6}",3))
%       # ),
%       size="\\footnotesize")
% }
% @
%
% La figure \ref{fig:VarEco} illustre la variabilité des principales composantes économiques.
%
% <<VarEco, echo=F, fig.pos='H', size='footnotesize', include=TRUE, fig.height=2, fig.width=ifelse(DernierCycle==1,1.5,4.5), fig.cap="Variabilité des principales caractéristiques économiques pour les tiges précomptables", error=F, comment=F, warning=F, message=F>>=
%
% #Essai autre représentation 22/12/2015
% t <- filter(gfPlaDen_,
%             Cycle==DernierCycle & NumForet==Choix) %>%
%   select(-NumPlac) %>%
%   melt(id=c("NumForet","Cycle"))
%   # mutate(log=log(value))
% tVc <-filter(t, variable=="VcHa") %>%
%   mutate(variable="Vc")
%
% if (DernierCycle > 1) {
% tVp <-filter(t, variable=="VpHa") %>%
%   mutate(variable="Vp")
%   tGain <-filter(t, variable=="Gainper") %>%
%     mutate(variable="Gain")
% Vmax <- max(tVc$value,tVp$value)
% } else {
%   Vmax <- max(tVc$value)
% }
%
% p1 <- ggplot() +
%   geom_boxplot(tVc,mapping=aes(variable,value)) +
%   scale_y_continuous(limits=c(0,Vmax*1.1),
%                      # breaks=floor(seq(0,max(tVc$value,na.rm=T)*1.1,max(tVc$value,na.rm=T)*1.1/4)/125+0.5)*125,
%                      expand=c(0,0),
%                      name="(euros/ha)") +
%   theme_bw() +
%   theme(axis.title.x=element_blank(),
%         axis.title.y=element_text(size=9,colour="navy"), #element_text(hjust=1,angle=0)
%         axis.ticks.x=element_blank(),
%         axis.line.x=element_blank(),
%         axis.text.x=element_text(size=9,colour="springgreen4"),
%         axis.text.y=element_text(size=7,colour="navy")) #blue
%
% if (DernierCycle > 1) {
% p2 <- ggplot() +
%   geom_boxplot(tVp,mapping=aes(variable,value)) +
%     scale_y_continuous(expand=c(0,0),
%                        limits=c(0,Vmax*1.1),
%                        name="(euros/ha)") +
%   theme_bw() +
%   theme(axis.title.x=element_blank(),
%         axis.title.y=element_text(size=9,colour="navy"),
%         axis.ticks.x=element_blank(),
%         axis.line.x=element_blank(),
%         axis.text.x=element_text(size=9,colour="springgreen4"),
%         axis.text.y=element_text(size=7,colour="navy")) #royalblue4
% p3 <- ggplot() +
%   geom_boxplot(tGain,mapping=aes(variable,value)) +
%     scale_y_continuous(expand=c(0,0),
%                        limits=c(0,max(tGain$value,na.rm=T)+max(tGain$value,na.rm=T)*0.1),
%                        name="(euros/ha/an)") +
%   theme_bw() +
%   theme(axis.title.x=element_blank(),
%         axis.title.y=element_text(size=9,colour="navy"),
%         axis.ticks.x=element_blank(),
%         axis.line.x=element_blank(),
%         axis.text.x=element_text(size=9,colour="springgreen4"),
%         axis.text.y=element_text(size=7,colour="navy")) #navy
% grid.arrange(p1,p2,p3,widths=c(1,1,1))
% } else {
%   grid.arrange(p1,widths=c(1))
% }
% @
% \FloatBarrier


\section{Analyse de la composition}
% \section{Analyse de la composition}

<<Comment_2.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.2")
cat(Comment$Texte)
@

\subsection{Composition globale}

<<Comment_2.2.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.2.1")
cat(Comment$Texte)
@

<<Subset2, echo=F, message=F, comment=NA, warning=F>>=
# -- Arbres
t1 <- filter(gfForetDen_Essence,
             Cycle == DernierCycle & NumForet==Choix) %>%
  select(Essence,Gha) %>%
  mutate(Population="Précomptables",
         Gha=round(Gha,1)) %>%
  # ListArbres <- data.frame(Essence=unique(gfForetFpied_Essence$Essence),
  #                             Population="Arbres",
  #                             stringsAsFactors=F) %>%
  #   left_join(t1) %>%
  rename(Valeur=Gha) %>%
  arrange(-Valeur)

# ----- Sous-ensemble d'essences faisant au moins 10% (15%) de la surface terrière : = Essences principales
Seuil <- 0.15
Essences_Seuil <- t1$Essence[which(t1$Valeur >= Seuil*sum(t1$Valeur))]
Essence_Princ <- Essences_Seuil[1]

# -- Perches
t2 <- filter(gfForetPer_Essence,
             Cycle == DernierCycle & NumForet==Choix) %>%
  select(Essence,Gha) %>%
  mutate(Population="Perches",
         Gha=round(Gha,1)) %>%
  # ListArbres <- data.frame(Essence=unique(gfForetFpied_Essence$Essence),
  #                             Population="Arbres",
  #                             stringsAsFactors=F) %>%
  #   left_join(t1) %>%
  rename(Valeur=Gha) %>%
  arrange(-Valeur)
# -- Taillis
if (dim(gfForetTaillis_Essence)[1] > 0) {
t3 <- filter(gfForetTaillis_Essence,
             Cycle == DernierCycle & NumForet==Choix) %>%
  select(Essence,Nha) %>%
  mutate(Population="Taillis",
         Nha=round(Nha,0)) %>%
# ListTaillis   <- data.frame(Essence=unique(gfForetTaillis_Essence$Essence),
#                             Population="Taillis",
#                             stringsAsFactors=F) %>%
#   left_join(t2) %>%
  rename(Valeur=Nha)
} else {
  # ListTaillis <- ListArbres[0,]
  t3 <- t1[0,]
}
# -- Reged
t4 <- filter(gfForetRege_EssenceRejet,
             Cycle == DernierCycle & NumForet==Choix & Rejet==0) %>% #!is.element(Rejet,c("X","x"))
  select(Essence,Classe1Ha,Classe2Ha,Classe3Ha) %>%
# ListRege <- data.frame(Essence=unique(gfForetRege_Essence$Essence),
#                        Population ="Rege",
#                        stringsAsFactors=F) %>%
#   left_join(t3) %>%
  rename_("Classe 1"="Classe1Ha",
          "Classe 2"="Classe2Ha",
          "Classe 3"="Classe3Ha") %>%
  melt(id=c("Essence"),
       variable.name="Population",
       value.name="Valeur") %>%
  mutate(Valeur=round(Valeur,0))
# ListRege.m    <- melt(ListRege, id=c("Essence","Population")) %>%
#   mutate(Population=NULL)

# -- Total
# names(ListRege.m)[2:3] <-c("Population","Valeur")
# ListEss       <- rbind(ListArbres,ListTaillis, ListRege.m)
ListEss       <- rbind(t1,t2,t3,t4)


# Préparation hauteur du chunk suivant :
ListEss.m <- group_by(ListEss,Population) %>%
  mutate(rescale=rescale(Valeur),
         value_sum=sum(Valeur,na.rm=T),
         value_rel=Valeur/value_sum) %>%
  ungroup()# %>%
  # filter(value_rel!=0) Seuil supprimé
Essences_NBRE <- length(unique(ListEss.m$Essence))


# Paramètres pour équilibrer le paramètre fig.height en fonction du nombre d'essences dans la figures qui suit
Param_DF <-
  data.frame(
    Nb_Essences = seq(0, 50),
    Classe = sort(c(rep(c(1, seq(5, 45, 5)), 5), 45)),
    Height = c(sort(rep(seq(1, 10), 5)), 10)
  ) %>%
  mutate(
    Height = ifelse(Height == 1 | Height == 2 | Height == 3, 3, Height),
    Height = ifelse(Height > 5, 5, Height)
  )
Height_PARAM <-
  with(Param_DF, Height[match(Essences_NBRE, Nb_Essences)])
@

Le dispositif possède au total \Sexpr{length(unique(ListEss$Essence))} espèces sous forme de semis, de brins de taillis, de perches ou d'arbres précomptables. La figure \ref{fig:CompoGlobal} donne une image de l'importance des essences dans chacune des 4 populations. Elle fournit à la fois la répartition de la surface terrière (en relatif et en absolu) par essences pour les précomptables, les perches et le taillis, mais aussi celle du nombre de tiges par essences pour les semis.\\
% On tient compte uniquement des données de régénération dite acquise - on ne tiendra donc pas compte du recouvrement dans les classes de semis.

<<CompoGlobal, echo=F, size='footnotesize', fig.height=Height_PARAM, fig.cap="Composition en essence des différentes populations inventoriées, semis, taillis, perches, arbres précomptables.\\\\\\footnotesize{Classe 1 = hauteur semis $<$ 1.50 m\\\\Classe 2 = hauteur semis $\\geqslant$ 1.50 m et diamètre $<$ 2.5 cm\\\\Classe 3 = 2.5 cm $\\leqslant$ diamètre $<$ 7.5 cm\\\\Taillis = tiges issues d'un rejet de souche (distance à une tige de même essence d'au plus 30 cm) et avec 7.5 cm $\\leqslant$ diamètre $<$ 17.5 cm\\\\Perches = tiges de franc-pied avec 7.5 cm$\\leqslant$ diamètre $<$ 17.5 cm\\\\Précomptables = tiges de franc-pied avec diamètre $\\geqslant$ 17.5 cm}", error=F, comment=F, wxarning=F, message=F,fig.pos="ht">>=
Levels1 <- sort(unique(ListEss$Essence))
Levels2 <- c("Classe 1","Classe 2","Classe 3","Taillis","Perches","Précomptables")
ListEss.m <- group_by(ListEss,Population) %>%
  mutate(rescale=rescale(Valeur),
         value_sum=sum(Valeur,na.rm=T),
         value_rel=Valeur/value_sum) %>%
  ungroup() %>%
  filter(value_rel>=0) # !=0 supprimé -> plus de seuil
Levels1 <- sort(unique(ListEss.m$Essence))

# --- Tri des essences par Gha décroissant puis par Classe 1 décroissant :
Essences_ORDER1 <- filter(gfForetDen_Essence,
                          Cycle == DernierCycle & NumForet==Choix) %>%
  mutate(Gha=round(Gha,1)) %>%
  select(Essence,Gha) %>%
  filter(Gha >= 0) %>% # Ordre des essences classées par G décroissant
  distinct() %>%
  arrange(Gha) %>%
  select(Essence) %>%
  unlist() %>%
  unname()
# --- Autre ordre des essences pour EssReg
EssReg_ORDER1 <- filter(gfForetDen_EssReg,
                          Cycle == DernierCycle & NumForet==Choix) %>%
  mutate(Gha=round(Gha,1)) %>%
  rename(Essence=EssReg) %>%
  select(Essence,Gha) %>%
  filter(Gha >= 0) %>% # Ordre des essences classées par G décroissant
  distinct() %>%
  arrange(Gha) %>%
  select(Essence) %>%
  unlist() %>%
  unname()
# Ordre des essences pour tout le document :
Niveaux_Essence1 <- Essences_ORDER1
Niveaux_Essence2 <- Essences_ORDER1[length(Essences_ORDER1):1]
Niveaux_EssReg1 <- EssReg_ORDER1
Niveaux_EssReg2 <- EssReg_ORDER1[length(EssReg_ORDER1):1]

Essences_ORDER2 <- filter(gfForetRege_EssenceRejet,
                          Cycle == DernierCycle & NumForet==Choix & Rejet==0) %>% #!is.element(Rejet,c("X","x"))
  select(Essence,Classe1Ha) %>%
  filter(Classe1Ha >= 0) %>% # Ordre des essences classées par Classe 1 décroissante
  distinct() %>%
  arrange(Classe1Ha) %>%
  select(Essence) %>%
  unlist() %>%
  unname()
Essences_ORDER2 <- Essences_ORDER2[which(!Essences_ORDER2 %in% Essences_ORDER1)]

# On rassemble Essences_ORDER1 et Essences_ORDER2 pour former l'ordre selon lequel trier les essences dans CompoGlobal
Essences_ORDER <- c(Essences_ORDER2,Essences_ORDER1)
# On complète éventuellement les essences manquantes :
Essences_ORDER <- c(Levels1[!is.element(Levels1,Essences_ORDER)],
                    Essences_ORDER)


ListEss.m <- mutate(ListEss.m,
                    Population=match(Population,Levels2),
         # Essence=match(Essence,Levels1),
         Essence=match(Essence,Essences_ORDER))
# ListEss.m <- mutate(ListEss.m,
#                     Population=factor(Population,levels=Levels2),
#          # Essence=match(Essence,Levels1),
#          Essence=factor(Essence,levels=Essences_ORDER))




ggplot(ListEss.m, aes(Population, Essence)) +
  geom_tile(aes(fill = value_rel*100), #, width=.5, height=.5
            colour = "gray80") +
  geom_text(aes(Population,Essence,
                label=ifelse(Valeur>0,
                             paste0(round(Valeur,ifelse(Valeur<0.1,2,1)),
                                    ifelse(Population==6,
                                           " m2/ha"," tiges/ha")),
                             ifelse(Valeur==0,
                                    paste0("~",Valeur,
                                           ifelse(Population==6,
                                           " m2/ha"," tiges/ha")),
                                    ""))),
            col="black",
            size=2) +
  scale_fill_gradient2(name="Part de la valeur totale (%)\npour chaque stade de\ndéveloppement",
                      low = "white", mid="forestgreen", high = "dodgerblue3",
                       midpoint=50,
                      limits=c(0,100),
                      breaks=c(0,25,50,75,100)) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(1,length(Levels2)),
                     limits=c(0.5,length(Levels2)+0.5),
                     minor_breaks=seq(0.5,length(Levels2)+0.5,0.25),
                     label=Levels2) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0.5,max(ListEss.m$Essence,na.rm=T)+0.5),
                     breaks=seq(1,max(ListEss.m$Essence,na.rm=T)),
                     minor_breaks=seq(0.5,max(ListEss.m$Essence,na.rm=T)+0.5,0.25),
                     # label=Levels1) +
                     label=Essences_ORDER) +
  labs(x=NULL, y=NULL) +
  # facet_wrap(~ Titre,ncol=2,shrink=T) +
  theme(axis.text.x  = element_text(size=7, angle = 45, hjust = 1),
        axis.text.y  = element_text(size=7),
        legend.text=element_text(size=7),
        legend.title=element_text(size=9,face='plain'),
        legend.position="bottom",
        panel.grid.major=element_line(colour="gray80"),
        panel.grid.minor=element_line(colour="gray80"),
        panel.background=element_rect(fill="white"),
        panel.border=element_rect(fill=NA,colour="gray80"))
@
\FloatBarrier

\subsection{Individus précomptables}
\label{subsec:Compo_Prec}

<<Comment_2.2.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.2.2")
cat(Comment$Texte)
@

Le tableau \ref{TabCompo} fournit la composition en essences des arbres précomptables (arbres dont le diamètre est supérieur à 17,5 cm) selon différentes variables. Il est trié par ordre de surface terrière décroissante.\\

% \textcolor{blue}{Attention, comme on arrondit les valeurs des tableaux, si jamais une essence contribue à 0.2\%, cela ne sera pas visible. voir AcctG (différence au total et somme des lignes)}

<<TabCompo, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=
if (DernierCycle > 1) {
  t <- filter(gfForetDen_EssReg,
              Cycle==DernierCycle &
                NumForet==Choix &
                Gha > 0) %>% # & Gha > sum(Gha,na.rm=T)*0.01
    # full_join(t) %>%
    arrange(-Gha) %>%
  mutate(Nha=ifelse(Nha < 0,
                      0,Nha),
           Gha=ifelse(Gha < 0,
                      0,Gha),
           Vha=ifelse(Vha < 0,
                      0,Vha),
           AcctGper=ifelse(AcctGper < 0,
                      0,AcctGper),
           AcctVper=ifelse(AcctVper < 0,
                      0,AcctVper),
           VcHa=ifelse(VcHa < 0,
                      0,VcHa),
           VpHa=ifelse(VpHa < 0,
                      0,VpHa),
         Gainper=ifelse(Gainper < 0,
                      0,Gainper),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_AcctGper=sum(AcctGper,na.rm=T),
         Tot_AcctVper=sum(AcctVper,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),
         Tot_Gainper=sum(Gainper,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100),
         Part_Gha=round(Gha/Tot_Gha*100),
         Part_Vha=round(Vha/Tot_Vha*100),
         Part_AcctGper=round(AcctGper/Tot_AcctGper*100,0),
         Part_AcctVper=round(AcctVper/Tot_AcctVper*100,0),
         Part_VcHa=round(VcHa/Tot_VcHa*100),
         Part_VpHa=round(VpHa/Tot_VpHa*100),
         Part_Gainper=round(Gainper/Tot_Gainper*100,0),

         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha >= 1,
                         round(Part_Nha,digits=0),
                         Part_Nha),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha >= 1,
                         round(Part_Gha,digits=0),
                         Part_Gha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha >= 1,
                         round(Part_Vha,digits=0),
                         Part_Vha),
         Part_AcctGper=ifelse(Part_AcctGper > 0 & Part_AcctGper >= 1,
                         round(Part_AcctGper,digits=0),
                         Part_AcctGper),
         Part_AcctVper=ifelse(Part_AcctVper > 0 & Part_AcctVper >= 1,
                         round(Part_AcctVper,digits=0),
                         Part_AcctVper),
         Part_VcHa=ifelse(Part_VcHa > 0 & Part_VcHa >= 1,
                         round(Part_VcHa,digits=0),
                         Part_VcHa),
         Part_VpHa=ifelse(Part_VpHa > 0 & Part_VpHa >= 1,
                         round(Part_VpHa,digits=0),
                         Part_VpHa),
         Part_Gainper=ifelse(Part_Gainper > 0 & Part_Gainper >= 1,
                         round(Part_Gainper,digits=0),
                         Part_Gainper),

         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha < 1,
                    "$\\approx$0",
                    Part_Gha),
         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha < 1,
                    "$\\approx$0",
                    Part_Nha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha < 1,
                    "$\\approx$0",
                    Part_Vha),
         Part_AcctGper=ifelse(Part_AcctGper > 0 & Part_AcctGper < 1,
                    "$\\approx$0",
                    Part_AcctGper),
         Part_AcctVper=ifelse(Part_AcctVper > 0 & Part_AcctVper < 1,
                    "$\\approx$0",
                    Part_AcctVper),
         Part_VcHa=ifelse(Part_VcHa > 0 & Part_VcHa < 1,
                    "$\\approx$0",
                    Part_VcHa),
         Part_VpHa=ifelse(Part_VpHa > 0 & Part_VpHa < 1,
                    "$\\approx$0",
                    Part_VpHa),
         Part_Gainper=ifelse(Part_Gainper > 0 & Part_Gainper < 1,
                    "$\\approx$0",
                    Part_Gainper),

         Gha=ifelse(Gha > 0 & Gha >= 10^(-1),
                    round(Gha,digits=1),
                    Gha),
         Gha=ifelse(Gha > 0 & Gha < 10^(-1),
                    "$\\approx$0",
                    Gha),
         Nha=ifelse(Nha > 0 & Nha >= 1,
                    round(Nha,digits=0),
                    Nha),
         Nha=ifelse(Nha > 0 & Nha < 1,
                    "$\\approx$0",
                    Nha),
         Vha=ifelse(Vha > 0 & Vha >= 1,
                    round(Vha,digits=0),
                    Vha),
         Vha=ifelse(Vha > 0 & Vha < 1,
                    "$\\approx$0",
                    Vha),
         AcctGper=ifelse(AcctGper > 0 & AcctGper >= 10^(-2),
                    round(AcctGper,digits=2),
                    AcctGper),
         AcctGper=ifelse(AcctGper > 0 & AcctGper < 10^(-2),
                    "$\\approx$0",
                    AcctGper),
         AcctVper=ifelse(AcctVper > 0 & AcctVper >= 10^(-1),
                    round(AcctVper,digits=1),
                    AcctVper),
         AcctVper=ifelse(AcctVper > 0 & AcctVper < 10^(-1),
                    "$\\approx$0",
                    AcctVper),
         VcHa=ifelse(VcHa > 0 & VcHa >= 1,
                    round(VcHa,digits=0),
                    VcHa),
         VcHa=ifelse(VcHa > 0 & VcHa < 1,
                    "$\\approx$0",
                    VcHa),
         VpHa=ifelse(VpHa > 0 & VpHa >= 1,
                    round(VpHa,digits=0),
                    VpHa),
         VpHa=ifelse(VpHa > 0 & VpHa < 1,
                    "$\\approx$0",
                    VpHa),
         Gainper=ifelse(Gainper > 0 & Gainper >= 1,
                    round(Gainper,digits=0),
                    Gainper),
         Gainper=ifelse(Gainper > 0 & Gainper < 1,
                    "$\\approx$0",
                    Gainper),

         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
         Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}"),
         AcctGper=paste0("\\footnotesize{",
                    AcctGper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctGper,
                    "\\%)}}"),
         AcctVper=paste0("\\footnotesize{",
                    AcctVper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctVper,
                    "\\%)}}"),
         VcHa=paste0("\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)}}"),
         VpHa=paste0("\\footnotesize{",
                    VpHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VpHa,
                    "\\%)}}"),
         Gainper=paste0("\\footnotesize{",
                    Gainper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gainper,
                    "\\%)}}")) %>%

  select(EssReg,Nha,Gha,Vha,AcctGper,AcctVper,Gainper,VcHa,VpHa) %>% #,VhaIFN
  rename(Essence=EssReg)
  # rename(N=Nha,
  #        G=Gha,
  #        V=Vha,
  #        Vc=VcHa,
  #        Vp=VpHa)
    # rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
    #      "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
    #      "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
    #      "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
    #      "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
    #      "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
    #      "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
    #      "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain")

  t_TOT <- filter(gfForetDen_,
                  Cycle==DernierCycle &
                    NumForet==Choix &
                    Gha > 0) %>% # & Gha > sum(Gha,na.rm=T)*0.01
    # full_join(t) %>%
  arrange(-Gha) %>%
  mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha),
         Gha=round(Gha,1),
         Vha=round(Vha),
         AcctGper=round(AcctGper,2),
         AcctVper=round(AcctVper,1),
         VcHa=round(VcHa),
         VpHa=round(VpHa),
         Gainper=round(Gainper,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_AcctGper=round(Er_AcctGper,1),
         Er_AcctVper=round(Er_AcctVper,1),
         Er_VcHa=round(Er_VcHa,1),
         Er_VpHa=round(Er_VpHa,1),
         Er_Gainper=round(Er_Gainper,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_AcctGper=sum(AcctGper,na.rm=T),
         Tot_AcctVper=sum(AcctVper,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),
         Tot_Gainper=sum(Gainper,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100),
         Part_Gha=round(Gha/Tot_Gha*100),
         Part_Vha=round(Vha/Tot_Vha*100),
         Part_AcctGper=round(AcctGper/Tot_AcctGper*100,1),
         Part_AcctVper=round(AcctVper/Tot_AcctVper*100,1),
         Part_VcHa=round(VcHa/Tot_VcHa*100),
         Part_VpHa=round(VpHa/Tot_VpHa*100),
         Part_Gainper=round(Gainper/Tot_Gainper*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                           "}}"),
         Gha=paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}",
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                           "}"),
         Vha=paste0("\\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                           "}}"),
         AcctGper=paste0("\\textbf{\\footnotesize{",
                      AcctGper,
                      "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                      Part_AcctGper,
                      "\\%)}",
                    # ifelse(!is.na(Er_AcctGper),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_AcctGper,
                    #               "\\%}}"),
                           "}}"),
         AcctVper=paste0("\\textbf{\\footnotesize{",
                      AcctVper,
                      "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                      Part_AcctVper,
                      "\\%)}",
                    # ifelse(!is.na(Er_AcctV),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_AcctV,
                    #               "\\%}}"),
                           "}}"),
         VcHa=paste0("\\textbf{\\footnotesize{",
                     VcHa,
                     "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                     Part_VcHa,
                     "\\%)}",
                    # ifelse(!is.na(Er_VcHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VcHa,
                    #               "\\%}}"),
                           "}}"),
         VpHa=paste0("\\textbf{\\footnotesize{",
                     VpHa,
                     "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                     Part_VpHa,
                     "\\%)}",
                    # ifelse(!is.na(Er_VpHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VpHa,
                    #               "\\%}}"),
                           "}}"),
                  Gainper=paste0("\\textbf{\\footnotesize{",
                    Gainper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gainper,
                    "\\%)}","}}")) %>%
                    # ifelse(!is.na(Er_Gain),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gain,
                    #               "\\%}}"),
                    #        "}"))) %>%
  select(Essence,Nha,Gha,Vha,AcctGper,AcctVper,Gainper,VcHa,VpHa)

t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
         "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha",
         "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3/ha)}}"="Vha",
         "\\textbf{AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}}"="AcctGper",
         "\\textbf{AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}}"="AcctVper",
         "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VcHa",
         "\\textbf{Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VpHa",
         "\\textbf{Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}}"="Gainper",

         "\\textbf{Essences}"="Essence")

# ----- Repères pour figures
Niveaux_Essence <- unique(t$Essence)

# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]

# Digits=c(0,0,0,1,1,2,2,0,0,1)
Digits=rep(0,dim(t)[2]+1)
print(xtable(t,
             digits=Digits,
             align=c("M{0cm}|","|M{1.5cm}",rep("|M{1.4cm}",dim(t)[2]-2),"|M{1.7cm}|"),
             caption = "Composition en essences des tiges précomptables",
             # \n(essences représentant au moins 1\\% du G total de précomptables)
             label   = "TabCompo"),
      caption.placement = "bottom",
      include.rownames=F,
      hline.after=c(-1:dim(t)[1]),
      sanitize.text.function=function(x){return(x)},
      # add.to.row =list(
      #   pos=list(dim(t)[1]),
      #   command="\\rowcolor{LightGray} "),
      size="\\footnotesize")
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle==1) {
  t <- filter(gfForetDen_Essence,
              Cycle==DernierCycle &
                NumForet==Choix &
                Gha > 0) %>% # & Gha > sum(Gha,na.rm=T)*0.01
    # full_join(t) %>%
    arrange(-Gha) %>%
    mutate(Nha=ifelse(Nha < 0,
                      0,Nha),
           Gha=ifelse(Gha < 0,
                      0,Gha),
           Vha=ifelse(Vha < 0,
                      0,Vha),
           VcHa=ifelse(VcHa < 0,
                       0,VcHa),

           Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100),
         Part_Gha=round(Gha/Tot_Gha*100),
         Part_Vha=round(Vha/Tot_Vha*100),
         Part_VcHa=round(VcHa/Tot_VcHa*100),

         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha >= 1,
                         round(Part_Nha,digits=0),
                         Part_Nha),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha >= 1,
                         round(Part_Gha,digits=0),
                         Part_Gha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha >= 1,
                         round(Part_Vha,digits=0),
                         Part_Vha),
         Part_VcHa=ifelse(Part_VcHa > 0 & Part_VcHa >= 1,
                         round(Part_VcHa,digits=0),
                         Part_VcHa),

         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha < 1,
                    "$\\approx$0",
                    Part_Nha),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha < 1,
                    "$\\approx$0",
                    Part_Gha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha < 1,
                    "$\\approx$0",
                    Part_Vha),
         Part_VcHa=ifelse(Part_VcHa > 0 & Part_VcHa < 1,
                    "$\\approx$0",
                    Part_VcHa),

         Nha=ifelse(Nha > 0 & Nha >= 1,
                    round(Nha,digits=0),
                    Nha),
         Nha=ifelse(Nha > 0 & Nha < 1,
                    "$\\approx$0",
                    Nha),
         Gha=ifelse(Gha > 0 & Gha >= 10^(-1),
                    round(Gha,digits=1),
                    Gha),
         Gha=ifelse(Gha > 0 & Gha < 10^(-1),
                    "$\\approx$0",
                    Gha),
         Vha=ifelse(Vha > 0 & Vha >= 1,
                    round(Vha,digits=0),
                    Vha),
         Vha=ifelse(Vha > 0 & Vha < 1,
                    "$\\approx$0",
                    Vha),
         VcHa=ifelse(VcHa > 0 & VcHa >= 1,
                    round(VcHa,digits=0),
                    VcHa),
         VcHa=ifelse(VcHa > 0 & VcHa < 1,
                    "$\\approx$0",
                    VcHa),

         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
         Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}"),
         VcHa=paste0("\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)}}")) %>%
  select(Essence,Nha,Gha,Vha,VcHa) #%>% #,VhaIFN
  # rename(N=Nha,
  #        G=Gha,
  #        V=Vha,
  #        Vc=VcHa,
  #        Vp=VpHa)
    # rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
    #      "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
    #      "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
    #      "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
    #      "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
    #      "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
    #      "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
    #      "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain")

  t_TOT <- filter(gfForetDen_,
                  Cycle==DernierCycle &
                    NumForet==Choix &
                    Gha > 0) %>% # & Gha > sum(Gha,na.rm=T)*0.01
    # full_join(t) %>%
    arrange(-Gha) %>%
    mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha),
         Gha=round(Gha,1),
         Vha=round(Vha),
         VcHa=round(VcHa),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_VcHa=round(Er_VcHa,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100),
         Part_Gha=round(Gha/Tot_Gha*100),
         Part_Vha=round(Vha/Tot_Vha*100),
         Part_VcHa=round(VcHa/Tot_VcHa*100),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                           "}}"),
         Gha=paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}",
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                           "}"),
         Vha=paste0("\\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                           "}}"),
         VcHa=paste0("\\textbf{\\footnotesize{",
                     VcHa,
                     "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                     Part_VcHa,
                     "\\%)}",
                    # ifelse(!is.na(Er_VcHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VcHa,
                    #               "\\%}}"),
                           "}}")) %>%
                    # ifelse(!is.na(Er_Gain),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gain,
                    #               "\\%}}"),
                    #        "}"))) %>%
  select(Essence,Nha,Gha,Vha,VcHa)

t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
         "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha",
         "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3/ha)}}"="Vha",
         "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VcHa",

         "\\textbf{Essences}"="Essence")
# ----- Repères pour figures
Niveaux_Essence <- unique(t$Essence)

# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]

# Digits=c(0,0,0,1,1,2,2,0,0,1)
Digits=rep(0,dim(t)[2]+1)
print(xtable(t,
             digits=Digits,
             align=c("M{0cm}|","|M{1.2cm}",rep("|M{1.4cm}",dim(t)[2]-2),"|M{1.7cm}|"),
             caption = "Composition en essences des tiges précomptables",
             # \n(essences représentant au moins 1\\% du G total de précomptables)
             label   = "TabCompo"),
      floating=T,
      table.placement="H",
      caption.placement = "bottom",
      include.rownames=F,
      hline.after=c(-1:dim(t)[1]),
      sanitize.text.function=function(x){return(x)},
      # add.to.row =list(
      #   pos=list(dim(t)[1]),
      #   command="\\rowcolor{LightGray} "),
      size="\\footnotesize")
}
@
\FloatBarrier

La figure \ref{fig:CompoRadar} permet de visualiser simultanément la contribution de chaque essence aux différentes variables économiques et dendrométriques présentées.\\

<<CompoRadar, echo=F, warning=F, size='footnotesize', fig.height=ifelse(DernierCycle==1,3,4), fig.cap="Importance relative des différentes essences.", fig.pos="H">>=
if (DernierCycle > 1) {
  # tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
  # tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
  # tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
  # t_Niveaux <- filter(gfForetDen_EssReg,
  #                     Cycle == DernierCycle &
  #                       NumForet==Choix &
  #                       Gha > 0) %>%
  #   rename(Essence=EssReg) %>%
  #   arrange(-Gha)

  # ----- Repères pour figures
  # Niveaux_EssReg1 <- unique(t_Niveaux$Essence)
  # Niveaux_EssReg2 <- Niveaux_EssReg1[length(Niveaux_EssReg1):1]
  # Niveaux_Essence1 <- unique(t_Niveaux$Essence)
  # Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

  t_Radar <- filter(gfForetDen_EssReg,
                    # t_Radar <- filter(gfForetDen_EssReg,
                    Cycle == DernierCycle &
                      NumForet==Choix &
                      Gha > 0) %>%
    rename(Essence=EssReg) %>%
    # select(EssReg,
    select(Essence,
           Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa) %>% #,VhaIFN,Gain
    mutate(Nha=ifelse(Nha < 0,
                      0,Nha),
           Gha=ifelse(Gha < 0,
                      0,Gha),
           Vha=ifelse(Vha < 0,
                      0,Vha),
           AcctGper=ifelse(AcctGper < 0,
                      0,AcctGper),
           AcctVper=ifelse(AcctVper < 0,
                      0,AcctVper),
           VcHa=ifelse(VcHa < 0,
                      0,VcHa),
           VpHa=ifelse(VpHa < 0,
                      0,VpHa)) %>%
    # full_join(t) %>%
    arrange(-Gha) %>%
    rename(N=Nha,
           G=Gha,
           V=Vha,
           AcctG=AcctGper,
           AcctV=AcctVper,
           Vc=VcHa,
           Vp=VpHa) %>%
    # group_by(EssReg) %>%
    # summarise(N=sum(N,na.rm=T),
    #           G=sum(G,na.rm=T),
    #           V=sum(V,na.rm=T),
    #           Vc=sum(Vc,na.rm=T),
    #           Vp=sum(Vp,na.rm=T)) %>%
    # ungroup() %>%
    mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
    # mutate(EssReg=factor(EssReg,levels=Niveaux_EssReg1)) %>%
    arrange(Essence)
  # arrange(EssReg)

  t_Radar.m <- melt(t_Radar, id="Essence") %>%
    group_by(variable) %>%
    mutate(Tot=sum(value,na.rm=T),
           Ratio=value/Tot,
           RatioCum=cumsum(value/Tot)) %>%
    ungroup() %>%
    mutate(label=NA,
           label=ifelse(variable=="N",
                        paste0(round(Ratio,3)*100," %"),
                        label),
           label=ifelse(variable=="G",
                        paste0(round(value,1)," m2/ha"),
                        label),
           label=ifelse(variable=="V",
                        paste0(round(value,1)," m3/ha"),
                        label),
           # label=ifelse(variable=="AcctG",
           #              paste0(round(value,2)," m2/ha/an"), #\U020AC
           #              label),
           # label=ifelse(variable=="AcctV",
           #              paste0(round(value,2)," m3/ha/an"), #\U020AC
           #              label),
           label=ifelse(variable=="Vc",
                        paste0(round(value,0)," euros/ha"), #\U020AC
                        label),
           label=ifelse(variable=="Vp",
                        paste0(round(value,0)," euros/ha"), # &#8364
                        label)) %>%
    # label=ifelse(variable=="Gain",
    #              paste0(round(value,0)," euros/ha/an"), #\U020AC
    #              label)) %>%
    # if(variable=="Vha") {paste0(Essence," : ",round(value,0)," m3/ha")}) %>%
    ungroup() %>%
    mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
    arrange(variable,Essence)
  # ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
  #       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
  #   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
  #       scale_fill_manual(values=ColPalette_Essence) + labs(y="", fill = "") +
  #       theme(axis.title.y=element_blank())
  t_Radar_Text <- group_by(t_Radar.m,
                           variable) %>%
    summarise(value=mean(value,na.rm=T)) %>%
    ungroup()

  ggplot() +
    geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Essence),
             stat='identity', position='fill') +
    # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
    #                                       y=0.5,
    #                                       label=variable),
    #                    size=3, colour="black", alpha=1, vjust=1,
    #                                fontface="bold") +
    geom_label(t_Radar_Text, mapping=aes(x=variable,
                                         y=0.5,
                                         label=variable),
               label.padding = unit(0.15, "lines"),
               label.r=unit(0, "lines"),
               size=2.5, fill="gray70", alpha=0.5,
               fontface="bold") +
    # # ggplot2::geom_text(t_Radar.m,
    # #                    mapping=aes(x=variable,
    # #                                y=round(RatioCum-Ratio/2,3),
    # #                                label = ifelse(Ratio > 0.05,
    # #                                               label,
    # #                                               "")),
    # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE

    # ----- Bonne version pour mettre les labels ----- #
    # geom_label_repel(t_Radar.m,
    #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
    scale_x_discrete("") +
    scale_y_continuous(breaks=seq(0,1,0.1),
                       name="Part relative des essences",
                       labels = percent) +
    # scale_fill_discrete("Essences Regroupées") +
    scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Essence)) > 8,
                                         round(length(unique(t_Radar.m$Essence))/6,0),1),
                             bycol=TRUE,
                             reverse=T)) +
    theme_bw() + MyTheme1 +
    theme(title=element_text(face='plain'),
          axis.text.y  = element_blank(),
          axis.text.x = element_text(size = 7),
          axis.ticks = element_blank(),
          axis.title.x=element_text(face='plain',size=9),
          legend.text = element_text(size = 7),
          # legend.title = element_text(size=9,face='plain'),
          legend.position="right",
          # legend.title=element_text(size = 7),
          plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
          panel.grid.major = element_blank(),
          panel.border=element_blank())
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
  # tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
  # tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
  # tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
  # t_Niveaux <- filter(gfForetDen_EssReg,
  #                     Cycle == DernierCycle &
  #                       NumForet==Choix &
  #                       Gha > 0) %>%
  #   rename(Essence=EssReg) %>%
  #   arrange(-Gha)

  # ----- Repères pour figures
  # Niveaux_EssReg1 <- unique(t_Niveaux$Essence)
  # Niveaux_EssReg2 <- Niveaux_EssReg1[length(Niveaux_EssReg1):1]
  # Niveaux_Essence1 <- unique(t_Niveaux$Essence)
  # Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

  t_Radar <- filter(gfForetDen_EssReg,
                    # t_Radar <- filter(gfForetDen_EssReg,
                    Cycle == DernierCycle &
                      NumForet==Choix &
                      Gha > 0) %>%
    rename(Essence=EssReg) %>%
    # select(EssReg,
    select(Essence,
           Nha,Gha,Vha,VcHa) %>% #,VhaIFN,Gain
    # full_join(t) %>%
    arrange(-Gha) %>%
    rename(N=Nha,
           G=Gha,
           V=Vha,
           Vc=VcHa) %>%
    # group_by(EssReg) %>%
    # summarise(N=sum(N,na.rm=T),
    #           G=sum(G,na.rm=T),
    #           V=sum(V,na.rm=T),
    #           Vc=sum(Vc,na.rm=T),
    #           Vp=sum(Vp,na.rm=T)) %>%
    # ungroup() %>%
    mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
    # mutate(EssReg=factor(EssReg,levels=Niveaux_EssReg1)) %>%
    arrange(Essence)
  # arrange(EssReg)

  t_Radar.m <- melt(t_Radar, id="Essence") %>%
    group_by(variable) %>%
    mutate(Tot=sum(value,na.rm=T),
           Ratio=value/Tot,
           RatioCum=cumsum(value/Tot)) %>%
    ungroup() %>%
    mutate(label=NA,
           label=ifelse(variable=="N",
                        paste0(round(Ratio,3)*100," %"),
                        label),
           label=ifelse(variable=="G",
                        paste0(round(value,1)," m2/ha"),
                        label),
           label=ifelse(variable=="V",
                        paste0(round(value,1)," m3/ha"),
                        label),
           # label=ifelse(variable=="AcctG",
           #              paste0(round(value,2)," m2/ha/an"), #\U020AC
           #              label),
           # label=ifelse(variable=="AcctV",
           #              paste0(round(value,2)," m3/ha/an"), #\U020AC
           #              label),
           label=ifelse(variable=="Vc",
                        paste0(round(value,0)," euros/ha"), #\U020AC
                        label)) %>%
    # label=ifelse(variable=="Gain",
    #              paste0(round(value,0)," euros/ha/an"), #\U020AC
    #              label)) %>%
    # if(variable=="Vha") {paste0(Essence," : ",round(value,0)," m3/ha")}) %>%
    ungroup() %>%
    mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
    arrange(variable,Essence)
  # ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
  #       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
  #   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
  #       scale_fill_manual(values=ColPalette_Essence) + labs(y="", fill = "") +
  #       theme(axis.title.y=element_blank())
  t_Radar_Text <- group_by(t_Radar.m,
                           variable) %>%
    summarise(value=mean(value,na.rm=T)) %>%
    ungroup()

  ggplot() +
    geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Essence),
             stat='identity', position='fill') +
    # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
    #                                       y=0.5,
    #                                       label=variable),
    #                    size=3, colour="black", alpha=1, vjust=1,
    #                                fontface="bold") +
    geom_label(t_Radar_Text, mapping=aes(x=variable,
                                         y=0.5,
                                         label=variable),
               label.padding = unit(0.15, "lines"),
               label.r=unit(0, "lines"),
               size=2.5, fill="gray70", alpha=0.5,
               fontface="bold") +
    # # ggplot2::geom_text(t_Radar.m,
    # #                    mapping=aes(x=variable,
    # #                                y=round(RatioCum-Ratio/2,3),
    # #                                label = ifelse(Ratio > 0.05,
    # #                                               label,
    # #                                               "")),
    # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE

    # ----- Bonne version pour mettre les labels ----- #
    # geom_label_repel(t_Radar.m,
    #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
    scale_x_discrete("") +
    scale_y_continuous(breaks=seq(0,1,0.1),
                       name="Part relative des essences",
                       labels = percent) +
    # scale_fill_discrete("Essences Regroupées") +
    scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Essence)) > 8,
                                         round(length(unique(t_Radar.m$Essence))/6,0),1),
                             bycol=TRUE,
                             reverse=T)) +
    theme_bw() + MyTheme1 +
    theme(title=element_text(face='plain'),
          axis.text.y  = element_blank(),
          axis.text.x = element_text(size = 7),
          axis.ticks = element_blank(),
          axis.title.x=element_text(face='plain',size=9),
          legend.text = element_text(size = 7),
          # legend.title = element_text(size=9,face='plain'),
          legend.position="right",
          # legend.title=element_text(size = 7),
          plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
          panel.grid.major = element_blank(),
          panel.border=element_blank())
}
@
\FloatBarrier


\subsection{Composition en essences et par classes de diamètre}

<<Comment_2.2.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.2.3")
cat(Comment$Texte)
@

% La figure \ref{fig:HistoGhaEssReg} fournit la répartition de la surface terrière par classe de diamètre pour les différents regroupements d'essence.\\

<<HistoGhaEssReg, echo=F, size='footnotesize', eval=F, include=F, error=F, comment=F, warning=F, message=F, fig.height=3, fig.cap="Répartition de la surface terrière par classe de diamètre et par essence.", fig.pos="H">>=
# ----- Préparation tables figures
if (DernierCycle > 1) {
  t_Histo <- filter(gfForetDen_EssenceClasse,
                    Cycle == DernierCycle & NumForet==Choix) %>%
    select(Essence,Classe,
           Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
    # full_join(t) %>%
    arrange(-Vha) %>%
    rename(N=Nha,
           G=Gha,
           V=Vha,
           Vc=VcHa,
           Vp=VpHa) %>%
    group_by(Essence,Classe) %>%
    summarise(N=sum(N,na.rm=T),
              G=sum(G,na.rm=T),
              V=sum(V,na.rm=T),
              Vc=sum(Vc,na.rm=T),
              Vp=sum(Vp,na.rm=T)) %>%
    ungroup() %>%
    # mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
    arrange(Essence)

  tab_lim <- group_by(t_Histo,
                      Classe) %>%
    summarise(N=sum(N,na.rm=T),
              G=sum(G,na.rm=T),
              V=sum(V,na.rm=T)) %>%
    ungroup()
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
  t_Histo <- filter(gfForetDen_EssenceClasse,
             Cycle == DernierCycle & NumForet==Choix) %>%
  select(Essence,Classe,
         Nha,Gha,Vha,VcHa,VpHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  group_by(Essence,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup() %>%
  # mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
  arrange(Essence)

tab_lim <- group_by(t_Histo,
                    Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T)) %>%
  ungroup()
}


 if (dim(tab_lim)[1] > 0) {
    X <- max(tab_lim$Classe,na.rm=T)
    Y <- max(tab_lim$G,na.rm=T)
  } else {
    X=100
    Y=50
  }


# ----- Figures
# --- Absolu
p1 <- ggplot() +
  geom_bar(t_Histo,
             mapping=aes(x=Classe, y=G, fill=Essence),
           stat = "identity", position = "stack") +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$G,na.rm=T),
  #          label=paste("G/ha =",
  #                      round(sum(t_Histo$G,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
    geom_label(data.frame(x=c(X*0.8),
                          y=c(Y*1.0),
                          label=paste0("G/ha = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " m2/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=Palette_Essence) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),10)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5),
                     breaks=seq(0,
                                max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                floor(max(tab_lim$G)/6/0.5+0.5)*0.5)) +
  labs(fill = "Essences", y="G (m2/ha)", x="Classe de diamètre") +
  guides(fill=guide_legend(nrow=ifelse(length(unique(t_Histo$Essence)) > 7,
                                         round(length(unique(t_Histo$Essence))/7,0),
                                         1),
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme1 + theme(legend.position="bottom",
                   legend.direction="horizontal")

# p2 <- ggplot(t_Histo,
#              aes(x=Classe, y=V, fill=Essence)) +
#   geom_bar(stat = "identity", position = "stack") +
#   annotate("text",
#            x=0.8*max(tab_lim$Classe,na.rm=T),
#            y=0.8*max(tab_lim$V,na.rm=T),
#            label=paste("V/ha =",
#                        round(sum(t_Histo$V,na.rm=T),1),
#                        " m3/ha"),
#            colour="black", size=2.5) +
#   scale_fill_manual(values=Palette_Essence) +
#   scale_x_continuous(expand=c(0,0),
#                      limits=c(0,max(t_Histo$Classe)+5),
#                      breaks=seq(0,max(t_Histo$Classe),20)) +
#   scale_y_continuous(expand=c(0,0),
#                      limits=c(0,
#                               max(tab_lim$V) +
#                                   floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
#                      breaks=seq(0,
#                                 max(tab_lim$V) +
#                                   floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
#                                 floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
#   labs(fill = "Essences\nregroupées", y="V (m3/ha)", x="Classe de diamètre") +
#   MyTheme1 + theme(legend.position="bottom",
#                    legend.direction="horizontal")
# # --- Relatif
# p3 <- ggplot(t_Histo,
#              aes(x=Classe, y=G, fill=Essence)) +
#   geom_bar(stat = "identity", position = "fill") +
#   # annotate("text",
#   #          x=0.8*max(tab_lim$Classe,na.rm=T),
#   #          y=0.8*max(tab_lim$V,na.rm=T),
#   #          label=paste("V/ha =",
#   #                      round(sum(t_Histo$V,na.rm=T),1),
#   #                      " m3/ha"),
#   #          colour="black", size=2.5) +
#   scale_fill_manual(values=Palette_Essence) +
#   scale_x_continuous(expand=c(0,0),
#                      limits=c(0,max(t_Histo$Classe)+5),
#                      breaks=seq(0,max(t_Histo$Classe),20)) +
#   scale_y_continuous(expand=c(0,0),
#                      # limits=c(0,1),
#                      # breaks=seq(0,1,0.25),
#                      labels=percent) +
#   labs(fill = "Essences\nregroupées", y="Part de G (%)", x="Classe de diamètre") +
#   MyTheme1 + theme(legend.position="bottom",
#                    legend.direction="horizontal")
#
# p4 <- ggplot(t_Histo,
#              aes(x=Classe, y=V, fill=Essence)) +
#   geom_bar(stat = "identity", position = "fill") +
#   # annotate("text",
#   #          x=0.8*max(tab_lim$Classe,na.rm=T),
#   #          y=0.8*max(tab_lim$V,na.rm=T),
#   #          label=paste("V/ha =",
#   #                      round(sum(t_Histo$V,na.rm=T),1),
#   #                      " m3/ha"),
#   #          colour="black", size=2.5) +
#   scale_fill_manual(values=Palette_Essence) +
#   scale_x_continuous(expand=c(0,0),
#                      limits=c(0,max(t_Histo$Classe)+5),
#                      breaks=seq(0,max(t_Histo$Classe),20)) +
#   scale_y_continuous(expand=c(0,0),
#                      # limits=c(0,1),
#                      # breaks=seq(0,1,0.25),
#                      labels=percent) +
#   labs(fill = "Essences\nregroupées", y="Part de V (%)", x="Classe de diamètre") +
#   MyTheme1 + theme(legend.position="bottom",
#                    legend.direction="horizontal")







# mylegend <- g_legend(p1)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p3 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          p4 + theme(legend.position="none"),
#                          nrow=2, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(8,1))
p1
@
\FloatBarrier

La figure \ref{fig:CompoNG_Bis} fournit une illustration de la répartition des précomptables sur les principales essences, en nombre de tiges et en surface terrière à l'hectare, de manière absolue et relative.

<<CompoNG, echo=F, size='footnotesize', include=F, eval=F, fig.height=4, fig.cap="Composition en regroupements d'essence des peuplements inventoriés : répartition de la densité de tiges et de la surface terrière en absolu et en relatif.", error=F, comment=F, warning=F, message=F, fig.pos="H">>=
# PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
temp <- filter(gfForetDen_EssRegCat,
               Cycle==DernierCycle & NumForet==Choix) %>%
  select(NumForet,Cycle,Foret,EssReg,Cat,Nha,Gha,Vha,AcctGper,AcctVper) %>%
  # mutate(EssReg=factor(EssReg, levels=Niveaux_EssReg1),
         mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(EssReg,Cat) %>%
  group_by(Cat) %>%
  mutate(Nha_Max=sum(Nha,na.rm=T),
         Gha_Max=sum(Gha,na.rm=T)) %>%
  ungroup()

p1 <- ggplot(temp, aes(Cat, Nha, fill=EssReg)) +
  geom_bar(stat="identity", position="stack") +
	labs(x = "",y="N (tiges/ha)") +
  scale_fill_manual(name="Essences\nregroupées",values=ColPalette_EssReg) +
  scale_y_continuous(breaks=seq(0,max(temp$Nha_Max),25)) +
  # guides(fill=F) +
  MyTheme1 + theme(legend.direction="vertical")
p2 <- ggplot(temp, aes(Cat, Nha, fill=EssReg)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=ColPalette_EssReg) +
  scale_y_continuous(name="Part de la densité",labels=percent) +
	labs(x = "", fill="") +
  # theme(legend.position = "none") +
  MyTheme1
# mylegend <- g_legend(p1)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend, nrow=1,widths=c(8, 2))
# grid.arrange(p1, p2, widths=c(0.4, 0.6), ncol=2)

#PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
p3 <- ggplot(temp, aes(Cat, Gha, fill=EssReg)) +
  geom_bar(stat="identity", position="stack") +
  # guides(fill=F) +
  labs(x = "",y="G (m2/ha)") +
  scale_fill_manual(name="Essences\nregroupées",values=ColPalette_EssReg) +
  scale_y_continuous(breaks=seq(0,max(temp$Gha_Max),2.5)) +
  # guides(fill=F) +
  MyTheme1
# + theme(legend.title=element_text(size=9))
p4 <- ggplot(temp, aes(Cat, Gha, fill=EssReg)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=ColPalette_EssReg) +
  scale_y_continuous(name="Part de la surface terrière",labels=percent) +
  labs(x = "", fill="") +
  MyTheme1
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=2, widths=rep(1,2)),
             mylegend, ncol=2,widths=c(8, 2))
# grid.arrange(p3, p4, widths=c(0.4, 0.6), ncol=2)
@

<<CompoNG_Bis, echo=F, size='footnotesize', include=T, eval=T, fig.height=4.5, fig.cap="Composition en essences des peuplements inventoriés : répartition de la densité de tiges et de la surface terrière en absolu et en relatif", error=F, comment=F, warning=F, message=F, fig.pos="H">>=

# PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
temp <- filter(gfForetDen_EssRegClasse,
               Cycle==DernierCycle &
                 NumForet==Choix &
                 Gha > 0) %>%
  rename(Essence=EssReg) %>%
  select(NumForet,Cycle,Foret,Essence,Classe,Nha,Gha,Vha) %>%
  # mutate(EssReg=factor(EssReg, levels=Niveaux_EssReg1),
  # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(Essence,Classe) %>%
  group_by(Classe) %>%
  mutate(Nha_Max=sum(Nha,na.rm=T),
         Gha_Max=sum(Gha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,
                        levels=Niveaux_EssReg1)) %>%
                        # levels=names(Palette_Essence)[length(Palette_Essence):1])) %>%
  arrange(Essence)

if (dim(temp)[1] > 0) {
    X <- max(temp$Classe,na.rm=T)
    Y <- max(temp$Nha_Max,na.rm=T)
  } else {
    X=80
    Y=20
  }

# by_VALUE <- ifelse(Y > 150,
#                    20,10)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p1 <- ggplot() +
  geom_bar(temp,
           mapping=aes(Classe,Nha,fill=Essence),
           stat="identity", position="stack") +
geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("N/ha = ",
                       round(sum(temp$Nha,na.rm=T),0),
                       " tiges/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
	labs(x = "",y="N (tiges/ha)") +
  scale_fill_manual(name="Essences",values=Palette_Essence) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(min(temp$Classe),
  #                             max(temp$Classe)+5),
  #                    breaks=seq(0,max(temp$Classe),10)) +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  guides(fill=guide_legend(nrow=ifelse(length(unique(temp$Essence)) > 7,
                                         round(length(unique(temp$Essence))/7,0),
                                         1),
                             byrow=T)) +
  MyTheme1 + theme(legend.direction="horizontal",
                   legend.position="bottom")
p2 <- ggplot(temp, aes(Classe, Nha, fill=Essence)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=Palette_Essence) +
  scale_y_continuous(name="Part de la densité",labels=percent) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(min(temp$Classe),
  #                             max(temp$Classe)+5),
  #                    breaks=seq(0,max(temp$Classe),10)) +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
	labs(x = "", fill="") +
  # theme(legend.position = "none") +
  MyTheme1
# mylegend <- g_legend(p1)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend, nrow=1,widths=c(8, 2))
# grid.arrange(p1, p2, widths=c(0.4, 0.6), ncol=2)

#PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\

if (dim(temp)[1] > 0) {
    X <- max(temp$Classe,na.rm=T)
    Y <- max(temp$Gha_Max,na.rm=T)
  } else {
    X=80
    Y=2
  }

p3 <- ggplot() +
  geom_bar(temp,
           mapping=aes(Classe, Gha, fill=Essence),
           stat="identity",position="stack") +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("G/ha = ",
                       round(sum(temp$Gha,na.rm=T),1),
                       " m2/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  # guides(fill=F) +
  labs(x = "",y="G (m2/ha)") +
  scale_fill_manual(name="Essences",values=Palette_Essence) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(min(temp$Classe),
  #                             max(temp$Classe)+5),
  #                    breaks=seq(0,max(temp$Classe),10)) +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              Y*1.1),
                     breaks=seq(0,max(temp$Gha_Max)*1.3,0.5)) +
  # guides(fill=F) +
  MyTheme1
# + theme(legend.title=element_text(size=9))
p4 <- ggplot(temp, aes(Classe, Gha, fill=Essence)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=Palette_Essence) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(min(temp$Classe),
  #                             max(temp$Classe)+5),
  #                    breaks=seq(0,max(temp$Classe),10)) +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(name="Part de la surface terrière",labels=percent) +
  labs(x = "", fill="") +
  MyTheme1
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=2, widths=rep(1,2)),
             mylegend, nrow=2, heights=c(9,1))
# grid.arrange(p3, p4, widths=c(0.4, 0.6), ncol=2)

@
\FloatBarrier


\section{Analyse de la structure}\label{chap:Chap_Structure}

<<Comment_2.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.3")
cat(Comment$Texte)
@

% \subsection{Structure globale}
% \label{sec:Struct_Global}

Le tableau \ref{TabCat_Disp} présente les résultats sur les individus précomptables, répartis selon les différentes catégories de diamètre.
% \textcolor{red}{Attention vérifier les population (Fpied et Précomptables)}
<<TabCat_Disp, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=
if (DernierCycle > 1) {
t <- filter(gfForetDen_Cat,
             Cycle == DernierCycle & NumForet==Choix) %>%
  arrange(-Gha)

pos <- c()
for (col in c("AcctVper","AcctGper","Gainper")) {
  pos <- c(pos,which(t[which(t$Cat=="TGB"),col] < 0))
}
pos <- unique(pos)

if (length(pos) > 0) {
  # # -- recalcul de l'erreur pour la Catégorie "GB et TGB"
  # # Nbre de placettes à ce tour
  # Plac_NBRE <- filter(NbPlac,
  #                     Cycle == DernierCycle & NumForet==Choix) %>%
  #   select(NbPlacettes) %>%
  #   unlist() %>%
  #   unname()
  #
  # # Agrégation à l'échelle du dispositif
  # t_Plac <- filter(gfPlaFpied_Cat,
  #                  Cycle == DernierCycle & NumForet==Choix) %>%
  #   mutate(Cat=ifelse(Cat=="GB",
  #                     "GB et TGB",Cat),
  #          Cat=ifelse(Cat=="TGB",
  #                     "GB et TGB",Cat)) %>%
  #   select(NumForet,NumPlac,Cycle,Cat,
  #          Nha,Gha,Vha,VcHa,VpHa,AcctG,AcctGper,AcctV,AcctVper,
  #          Gain,Gainper,TotalCarbha,Couvert) %>%
  #   melt(id=c("NumForet","NumPlac","Cycle","Cat")) %>%
  #   group_by(NumForet,Cycle,Cat,variable) %>%
  # summarise(Sd=sd(value,na.rm=T), # estimateur (non biaisé - a priori ?) de l'écart-type
  #           Moy=mean(value,na.rm=T)) %>%
  #   ungroup() %>%
  #   mutate(CV=Sd/Moy,
  #          Er=qt(0.975,df=10)*CV/sqrt(10),
  #          Sd=NULL) %>%
  #   rename(var_analyse=variable) %>%
  #   melt(id=c("NumForet","Cycle","Cat","var_analyse")) %>%
  #
  #   mutate(variable=as.character(variable),
  #          var_analyse=as.character(var_analyse),
  #
  #          variable=ifelse(variable=="Moy",
  #                          "",paste0(variable,"_")),
  #          var=paste0(variable,var_analyse),
  #
  #          var_analyse=NULL,
  #          variable=NULL) %>%
  #   dcast(NumForet + Cycle + Cat ~ variable, value.var="value")
  t <- mutate(t,
                Cat=as.character(Cat))

  t$Cat[which(t$Cat=="TGB")] <- "GB et TGB"
  t$Cat[which(t$Cat=="GB")] <- "GB et TGB"
  t <- group_by(t,
                Cat) %>%
    summarise(Nha=sum(Nha,na.rm=T),
              Gha=sum(Gha,na.rm=T),
              Vha=sum(Vha,na.rm=T),
              VcHa=sum(VcHa,na.rm=T),
              VpHa=sum(VpHa,na.rm=T),

              AcctGper=sum(AcctGper,na.rm=T),
              AcctVper=sum(AcctVper,na.rm=T),
              Gainper=sum(Gainper,na.rm=T)) %>%
    ungroup() %>%
    mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB et TGB"))) %>%
    arrange(Cat)

  Cat_LEVELS <- c("PER","PB","BM","GB et TGB")
} else {
    Cat_LEVELS <- c("PER","PB","BM","GB","TGB")
}

t <- mutate(t,
            Nha=round(Nha,0),
            Gha=round(Gha,1),
            Vha=round(Vha,0),
            AcctGper=round(AcctGper,2),
            AcctVper=round(AcctVper,1),
            VcHa=round(VcHa,0),
            VpHa=round(VpHa,0),
            Gainper=round(Gainper,0),

            # Er_Nha=round(Er_Nha,1),
            # Er_Gha=round(Er_Gha,1),
            # Er_Vha=round(Er_Vha,1),
            # Er_AcctGper=round(Er_AcctGper,1),
            # Er_AcctVper=round(Er_AcctVper,1),
            # Er_VcHa=round(Er_VcHa,1),
            # Er_VpHa=round(Er_VpHa,1),
            # Er_Gainper=round(Er_Gainper,1),

            Tot_Nha=sum(Nha,na.rm=T),
            Tot_Gha=sum(Gha,na.rm=T),
            Tot_Vha=sum(Vha,na.rm=T),
            Tot_AcctGper=sum(AcctGper,na.rm=T),
            Tot_AcctVper=sum(AcctVper,na.rm=T),
            Tot_VcHa=sum(VcHa,na.rm=T),
            Tot_VpHa=sum(VpHa,na.rm=T),
            Tot_Gainper=sum(Gainper,na.rm=T),

            Part_Nha=round(Nha/Tot_Nha*100,0),
            Part_Gha=round(Gha/Tot_Gha*100,0),
            Part_Vha=round(Vha/Tot_Vha*100,0),
            Part_AcctGper=round(AcctGper/Tot_AcctGper*100,0),
            Part_AcctVper=round(AcctVper/Tot_AcctVper*100,0),
            Part_VcHa=round(VcHa/Tot_VcHa*100,0),
            Part_VpHa=round(VpHa/Tot_VpHa*100,0),
            Part_Gainper=round(Gainper/Tot_Gainper*100,0),

            # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
            #            Part_Nha,
            #            "\\%)}} \\footnotesize{",
            #            Nha,
            #            "}\\hspace{1.4cm}",
            #            ifelse(!is.na(Er_Nha),
            #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
            #                          Er_Nha,
            #                          "\\%}}"),
            #                   "")),
            Nha=ifelse(Nha!=0,
                       paste0("\\footnotesize{",
                              Nha,
                              "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                              Part_Nha,
                              "\\%)}",
                              # ifelse(!is.na(Er_Nha),
                              #        paste0("\\textcolor{Gray}{±",
                              #               Er_Nha,
                              #               "\\%}}"),
                              "}"),
                       ""),
            Gha=ifelse(Gha!=0,
                       paste0("\\footnotesize{",
                              Gha,
                              "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                              Part_Gha,
                              "\\%)}",
                              # ifelse(!is.na(Er_Gha),
                              #        paste0("\\textcolor{Gray}{±",
                              #               Er_Gha,
                              #               "\\%}}"),
                              "}"),
                       ""),
            Vha=ifelse(Vha!=0,
                       paste0("\\footnotesize{",
                              Vha,
                              "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                              Part_Vha,
                              "\\%)}",
                              # ifelse(!is.na(Er_Vha),
                              #        paste0("\\textcolor{Gray}{±",
                              #               Er_Vha,
                              #               "\\%}}"),
                              "}"),
                       ""),
            AcctGper=ifelse(AcctGper!=0,
                            paste0("\\footnotesize{",
                                   AcctGper,
                                   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                   Part_AcctGper,
                                   "\\%)}",
                                   # ifelse(!is.na(Er_AcctGper),
                                   #        paste0("\\textcolor{Gray}{±",
                                   #               Er_AcctGper,
                                   #               "\\%}}"),
                                   "}"),
                            ""),
            AcctVper=ifelse(AcctVper!=0,
                            paste0("\\footnotesize{",
                                   AcctVper,
                                   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                   Part_AcctVper,
                                   "\\%)}",
                                   # ifelse(!is.na(Er_AcctV),
                                   #        paste0("\\textcolor{Gray}{±",
                                   #               Er_AcctV,
                                   #               "\\%}}"),
                                   "}"),
                            ""),
            VcHa=ifelse(VcHa!=0,
                        paste0("\\footnotesize{",
                               VcHa,
                               "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                               Part_VcHa,
                               "\\%)}",
                               # ifelse(!is.na(Er_VcHa),
                               #        paste0("\\textcolor{Gray}{±",
                               #               Er_VcHa,
                               #               "\\%}}"),
                               "}"),
                        ""),
            VpHa=ifelse(VpHa!=0,
                        paste0("\\footnotesize{",
                               VpHa,
                               "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                               Part_VpHa,
                               "\\%)}",
                               # ifelse(!is.na(Er_VpHa),
                               #        paste0("\\textcolor{Gray}{±",
                               #               Er_VpHa,
                               #               "\\%}}"),
                               "}"),
                        ""),
            Gainper=ifelse(Gainper!=0,
                           paste0("\\footnotesize{",
                                  Gainper,
                                  "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                  Part_Gainper,
                                  "\\%)}","}"),
                           "")) %>%
  # ifelse(!is.na(Er_Gain),
  #        paste0("\\textcolor{Gray}{±",
  #               Er_Gain,
  #               "\\%}}"),
  #        "}"))) %>%
  select(Cat,Nha,Gha,Vha,AcctGper,AcctVper,Gainper,VcHa,VpHa)

  # full_join(t) %>%
  # rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
  #        "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
  #        "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
  #        "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
  #        "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
  #        "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
  #        "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
  #        "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain") %>%
  # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  # arrange(Cat) %>%
  # rename_("catégories de diamètre"="Cat")


# --- Total
t_TOT <- filter(gfForetDen_,
             Cycle == DernierCycle & NumForet==Choix) %>%
  arrange(-Gha) %>%
  mutate(Cat="\\rowcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         AcctGper=round(AcctGper,2),
         AcctVper=round(AcctVper,1),
         VcHa=round(VcHa,0),
         VpHa=round(VpHa,0),
         Gainper=round(Gainper,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_AcctGper=round(Er_AcctGper,1),
         Er_AcctVper=round(Er_AcctVper,1),
         Er_VcHa=round(Er_VcHa,1),
         Er_VpHa=round(Er_VpHa,1),
         Er_Gainper=round(Er_Gainper,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_AcctGper=sum(AcctGper,na.rm=T),
         Tot_AcctVper=sum(AcctVper,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),
         Tot_Gainper=sum(Gainper,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_AcctGper=round(AcctGper/Tot_AcctGper*100,1),
         Part_AcctVper=round(AcctVper/Tot_AcctVper*100,1),
         Part_VcHa=round(VcHa/Tot_VcHa*100,1),
         Part_VpHa=round(VpHa/Tot_VpHa*100,1),
         Part_Gainper=round(Gainper/Tot_Gainper*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}",
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                           "}"),
                  Gha=paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
                  Vha=paste0("\\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                    #        "}")),
                  AcctGper=paste0("\\textbf{\\footnotesize{",
                    AcctGper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctGper,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_AcctG),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_AcctG,
                    #               "\\%}}"),
                    #        "}")),
                  AcctVper=paste0("\\textbf{\\footnotesize{",
                    AcctVper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctVper,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_AcctV),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_AcctV,
                    #               "\\%}}"),
                    #        "}")),
                  VcHa=paste0("\\textbf{\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_VcHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VcHa,
                    #               "\\%}}"),
                    #        "}")),
                  VpHa=paste0("\\textbf{\\footnotesize{",
                    VpHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VpHa,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_VpHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VpHa,
                    #               "\\%}}"),
                    #        "}")),
                  Gainper=paste0("\\textbf{\\footnotesize{",
                    Gainper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gainper,
                    "\\%)}}}")) %>%
  select(Cat,Nha,Gha,Vha,AcctGper,AcctVper,Gainper,VcHa,VpHa)

t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
          "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha",
          "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3/ha)}}"="Vha",
          "\\textbf{AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}}"="AcctGper",
          "\\textbf{AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}}"="AcctVper",
          "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VcHa",
          "\\textbf{Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VpHa",
          "\\textbf{Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}}"="Gainper") %>%
  mutate(Cat=factor(Cat,levels=c(Cat_LEVELS,
                                 "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
  arrange(Cat) %>%
  rename_("\\textbf{Catégories de diamètre}"="Cat")

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)


# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]
Digits=c(0,0,3,3,3,4,4,3,3,4)
Digits=rep(0,dim(t)[2]+1)
Digits=c(0,0,0,1,0,1,1,0,0,1)
print(xtable(t,
             digits=Digits,
             align=c("M{0cm}","|M{1.4cm}|",rep("M{1.5cm}|",dim(t)[2]-1)),
             caption = "Résultats d'analyse dendrométrique et économique des tiges de franc-pied répartis par catégories de diamètre.\\\\\\scriptsize{PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}", #PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
             label   = "TabCat_Disp"),
      caption.placement = "bottom",
      hline.after=-1:dim(t)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
t <- filter(gfForetDen_Cat,
             Cycle == DernierCycle & NumForet==Choix) %>%
  arrange(-Gha) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         VcHa=round(VcHa,0),
         VpHa=round(VpHa,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_VcHa=round(Er_VcHa,1),
         Er_VpHa=round(Er_VpHa,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0),
         Part_Gha=round(Gha/Tot_Gha*100,0),
         Part_Vha=round(Vha/Tot_Vha*100,0),
         Part_VcHa=round(VcHa/Tot_VcHa*100,0),
         Part_VpHa=round(VpHa/Tot_VpHa*100,0),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=ifelse(Nha!=0,
                    paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                           "}"),
                    ""),
         Gha=ifelse(Gha!=0,
                    paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                           "}"),
                    ""),
         Vha=ifelse(Vha!=0,
                    paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}",
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                           "}"),
                    ""),
         VcHa=ifelse(VcHa!=0,
                     paste0("\\footnotesize{",
                     VcHa,
                     "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                     Part_VcHa,
                     "\\%)}",
                    # ifelse(!is.na(Er_VcHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VcHa,
                    #               "\\%}}"),
                           "}"),
                    "")) %>%
                    # ifelse(!is.na(Er_Gain),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gain,
                    #               "\\%}}"),
                    #        "}"))) %>%
  select(Cat,Nha,Gha,Vha,VcHa)

  # full_join(t) %>%
  # rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
  #        "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
  #        "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
  #        "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
  #        "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
  #        "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
  #        "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
  #        "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain") %>%
  # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  # arrange(Cat) %>%
  # rename_("catégories de diamètre"="Cat")


# --- Total
t_TOT <- filter(gfForetDen_,
             Cycle == DernierCycle & NumForet==Choix) %>%
  arrange(-Gha) %>%
  mutate(Cat="\\rowcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         VcHa=round(VcHa,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_VcHa=round(Er_VcHa,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_VcHa=round(VcHa/Tot_VcHa*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}",
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                           "}"),
                  Gha=paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
                  Vha=paste0("\\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}}"),
                  VcHa=paste0("\\textbf{\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)}}}")) %>%
                    # ifelse(!is.na(Er_VcHa),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_VcHa,
                    #               "\\%}}"),
                    #        "}")),
  select(Cat,Nha,Gha,Vha,VcHa)

t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
         "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha",
         "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3/ha)}}"="Vha",
         "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}"="VcHa") %>%
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB","\\rowcolor{LightGray} \\textbf{Total}"))) %>%
  arrange(Cat) %>%
  rename_("\\textbf{Catégories de diamètre}"="Cat")

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)


# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]
Digits=c(0,0,3,3,3,4,4,3,3,4)
Digits=rep(0,dim(t)[2]+1)
Digits=c(0,0,0,1,0,0)
print(xtable(t,
             digits=Digits,
             align=c("M{0cm}","|M{1.4cm}|",rep("M{1.6cm}|",dim(t)[2]-1)),
             caption = "Résultats d'analyse dendrométrique et économique des tiges de franc-pied répartis par catégories de diamètre.\\\\\\scriptsize{PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}", #PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
             label   = "TabCat_Disp"),
      caption.placement = "bottom",
      hline.after=-1:dim(t)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
}
@
\FloatBarrier

La figure \ref{fig:Histos} permet de visualiser la structure des peuplements sous différents angles.

% \textcolor{red}{\Large Question à résoudre ici : pour moi ce type de représentation est un peu risqué avec des dispositifs à seulement 10 placettes : l'imprécision (qui est déjà de 20-30\% à l'échelle du dispositif) doit être très importante par classe de diamètre...}
% \textcolor{ForestGreen}{\Large => Figure à voir avec Max}

<<Histos, echo=F, size='footnotesize', fig.pos='H', fig.height=3, fig.cap="Contribution des différentes catégories de diamètre aux variables dendrométriques et économiques.", error=F, comment=F, warning=F, message=F>>=
if (DernierCycle > 1) {
# ----- Table
t <- filter(gfForetFpied_Cat,
            Cycle==DernierCycle & NumForet==Choix) %>%
  select(Cat,Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
#   group_by(Cat) %>%
# summarise(N=sum(N,na.rm=T),
#             V=sum(V,na.rm=T),
#             AcctV=sum(AcctV,na.rm=T),
#             Gain=sum(Gain,na.rm=T)) %>%
#   ungroup() %>%
  mutate(Part_N=N/sum(N,na.rm=T),
         Part_G=G/sum(G,na.rm=T),
         Part_V=V/sum(V,na.rm=T),
         Part_AcctGper=AcctGper/sum(AcctGper,na.rm=T),
         Part_AcctVper=AcctVper/sum(AcctVper,na.rm=T),
         Part_Vc=Vc/sum(Vc,na.rm=T),
         Part_Vp=Vp/sum(Vp,na.rm=T),
         Part_Gainper=Gainper/sum(Gainper,na.rm=T),

         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))
  # melt(id=c("Cat","G","AcctG","AcctV","Vp")) # ,"N","G","V","AcctG","AcctV","Vc","Vp","Gain"

t1 <- select(t,
             Cat,Part_N,Part_V,Part_Vc,Part_Gainper) %>%
  melt(id="Cat")

t2 <- select(t,
             N,V,Vc,Gainper) %>%
  summarise(N=sum(N,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Gain=sum(Gainper,na.rm=T))
# ----- Figures :

ggplot() +
  geom_line(t1,
            mapping=aes(x = Cat, y = value, color = variable, group=variable)) +
  # annotate("text",
  #          x=rep(0.8*max(t1$Cat,na.rm=T),dim(t2)[2]),
  #          y=seq(0.8*max(t1$value),max(t1$value),
  #                length.out=dim(t2)[2]),
  #          label=paste0("Total ",names(t2)," = ",round(t2[1,],1)),
  #          size=2) +
  scale_color_manual(name="Variables",
                     label=paste0(names(t2)," - Total = ",round(t2[1,],0),
                                  c(" tiges/ha"," m3/ha"," euros/ha"," euros/ha/an")),
                     values=c("red","limegreen","blue","black")) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent,
                     limits=c(0,max(t1$value)*1.1),
                     breaks=seq(0,max(t1$value,na.rm=T)*1.3,0.05)) +
  # scale_x_continuous(expand=c(0,0),
  #                    breaks=seq(0,max(t1$Cat,na.rm=T)-5,5)) +
  scale_x_discrete("") +
  labs(x="Catégories de diamètre",
       y="Contribution des différentes catégories de diamètre\naux variables dendrométriques et économiques") + #, color="Variable"
  # guides(colour=guide_legend(label.position=c(0.8,0.8))) +
  MyTheme1 + theme(legend.position="bottom",
                   # legend.position=c(0.8,0.7),
                   legend.background=element_rect(colour="gray50",
                                                  size=0.2))
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle==1) {
  # ----- Table
t <- filter(gfForetFpied_Cat,
            Cycle==DernierCycle & NumForet==Choix) %>%
  select(Cat,Nha,Gha,Vha,VcHa) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
#   group_by(Cat) %>%
# summarise(N=sum(N,na.rm=T),
#             V=sum(V,na.rm=T),
#             AcctV=sum(AcctV,na.rm=T),
#             Gain=sum(Gain,na.rm=T)) %>%
#   ungroup() %>%
  mutate(Part_N=N/sum(N,na.rm=T),
         Part_G=G/sum(G,na.rm=T),
         Part_V=V/sum(V,na.rm=T),
         Part_Vc=Vc/sum(Vc,na.rm=T),

         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))
  # melt(id=c("Cat","G","AcctG","AcctV","Vp")) # ,"N","G","V","AcctG","AcctV","Vc","Vp","Gain"

t1 <- select(t,
             Cat,Part_N,Part_V,Part_Vc) %>%
  melt(id="Cat")

t2 <- select(t,
             N,V,Vc) %>%
  summarise(N=sum(N,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T))
# ----- Figures :

ggplot() +
  geom_line(t1,
            mapping=aes(x = Cat, y = value, color = variable, group=variable)) +
  # annotate("text",
  #          x=rep(0.8*max(t1$Cat,na.rm=T),dim(t2)[2]),
  #          y=seq(0.8*max(t1$value),max(t1$value),
  #                length.out=dim(t2)[2]),
  #          label=paste0("Total ",names(t2)," = ",round(t2[1,],1)),
  #          size=2) +
  scale_color_manual(name="Variables",
                     label=paste0(names(t2)," - Total = ",round(t2[1,],1),
                                  c(" tiges/ha"," m3/ha"," euros/ha"," euros/ha/an")),
                     values=c("red","limegreen","blue","black")) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent,
                     limits=c(0,max(t1$value)*1.1),
                     breaks=seq(0,max(t1$value,na.rm=T),0.05)) +
  # scale_x_continuous(expand=c(0,0),
  #                    breaks=seq(0,max(t1$Cat,na.rm=T)-5,5)) +
  scale_x_discrete("") +
  labs(x="Catégories de diamètre",
       y="Contribution des différentes catégories de diamètre à\nla valeur totale de chaque variable") + #, color="Variable"
  # guides(colour=guide_legend(label.position=c(0.8,0.8))) +
  MyTheme1 + theme(legend.position="bottom",
                   # legend.position=c(0.8,0.7),
                   legend.background=element_rect(colour="gray50",
                                                  size=0.2))
}
@
\FloatBarrier

La figure \ref{fig:CatRadar} illustre la répartition des principales composantes dendrométriques et économiques entre les différentes catégories de diamètre.

<<CatRadar, echo=F, warning=F, size='footnotesize', fig.height=ifelse(DernierCycle==1,3,4), fig.cap=paste0("Importance relative des différentes catégories de diamètre"), fig.pos="H", eval=T, include=T>>=
if (DernierCycle > 1) {
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)

# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
t_Radar <- filter(gfForetDen_Cat,
             Cycle == DernierCycle) %>%
  select(Cat,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa) %>% #,VhaIFN,Gain
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         AcctG=AcctGper,
         AcctV=AcctVper,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Cat) %>%
  summarise(N=round(sum(N,na.rm=T),1),
            G=round(sum(G,na.rm=T),1),
            V=round(sum(V,na.rm=T),1),
            AcctG=round(sum(AcctG),1),
            AcctV=round(sum(AcctV),1),
            Vc=round(sum(Vc,na.rm=T),1),
            Vp=round(sum(Vp,na.rm=T),1)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=names(Palette_Cat))) %>%
  arrange(Cat)


# Détection s'il y a des valeurs négatives pour les TGB :
# pos <- c()
# for (col in c("AcctV","AcctG")) {
#   pos <- c(pos,which(t_Radar[which(t_Radar$Cat=="TGB"),col] < 0))
# }
# pos <- unique(pos)
#
# if (length(pos) > 0) {
#   t_Radar <- mutate(t_Radar,
#                     Cat=as.character(Cat)) %>%
#   arrange(Cat)
#   t_Radar$Cat[which(t_Radar$Cat=="GB")] <- "GB et TGB"
#   t_Radar$Cat[which(t_Radar$Cat=="TGB")] <- "GB et TGB"
#   t_Radar <- group_by(t_Radar,
#                       Cat) %>%
#     summarise(N=sum(N,na.rm=T),
#               G=sum(G,na.rm=T),
#               V=sum(V,na.rm=T),
#               AcctG=sum(AcctG,na.rm=T),
#               AcctV=sum(AcctV,na.rm=T),
#               Vc=sum(Vc,na.rm=T),
#               Vp=sum(Vp,na.rm=T)) %>%
#     ungroup() %>%
#     mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB et TGB"))) %>%
#     arrange(Cat)
#
#   Palette_Cat <- c("Gray40","Gray60","Gray80","Gray100")
# names(Palette_Cat) <- c("GB et TGB","BM","PB","PER")
# }

t_Radar.m <- melt(t_Radar, id="Cat") %>%
  group_by(variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="N",
                      paste0(round(Ratio,3)*100," %"),
                      label),
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="V",
                      paste0(round(value,1)," m3/ha"),
                      label),
         label=ifelse(variable=="AcctG",
                      paste0(round(value,2)," m2/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="AcctV",
                      paste0(round(value,2)," m3/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), # &#8364
                      label)) %>%
         # label=ifelse(variable=="Gain",
         #              paste0(round(value,0)," euros/ha/an"), #\U020AC
         #              label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  # mutate(Cat=factor(Cat,levels=c("TGB","GB","BM","PB","PER"))) %>% # "PER","PB","BM","GB","TGB"
  arrange(variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
  #                                       y=0.5,
  #                                       label=variable),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
      geom_label(t_Radar_Text, mapping=aes(x=variable,
                                        y=0.5,
                                        label=variable),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=variable,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") +
  #   geom_label_repel(t_Radar.m,
  #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Cat)) > 10,
                                         2,1),
                             bycol=TRUE,
                             reverse=F)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
}

# redéfinition de la palette des Cat (si AcctV ou AcctG négatif pour TGB)
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)

# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
t_Radar <- filter(gfForetDen_Cat,
             Cycle == DernierCycle) %>%
  select(Cat,
         Nha,Gha,Vha,VcHa) %>% #,VhaIFN,Gain
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  group_by(Cat) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=names(Palette_Cat))) %>%
  arrange(Cat)

t_Radar.m <- melt(t_Radar, id="Cat") %>%
  group_by(variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="N",
                      paste0(round(Ratio,3)*100," %"),
                      label),
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="V",
                      paste0(round(value,1)," m3/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # label=ifelse(variable=="Gain",
         #              paste0(round(value,0)," euros/ha/an"), #\U020AC
         #              label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("TGB","GB","BM","PB","PER"))) %>% # "PER","PB","BM","GB","TGB"
  arrange(variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
  #                                       y=0.5,
  #                                       label=variable),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
      geom_label(t_Radar_Text, mapping=aes(x=variable,
                                        y=0.5,
                                        label=variable),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=variable,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") +
  #   geom_label_repel(t_Radar.m,
  #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Cat)) > 10,
                                         2,1),
                             bycol=TRUE,
                             reverse=F)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
}
@
\FloatBarrier

<<HistoCat, echo=F, fig.pos="H", size='footnotesize', include=F, eval=F, error=F, comment=F, warning=F, message=F, fig.height=3.5, fig.cap="Répartition de la surface terrière par classe de diamètre et par qualité", fig.pos="H">>=
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

t_Histo <- filter(gfForetDen_ClasseReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Reg1,Classe,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Reg1,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=names(QualPalette))) %>%#c("A","B","C","D")
  arrange(Reg1)

tab_lim <- group_by(t_Histo,
                    Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T)) %>%
  ungroup()

X=max(tab_lim$Classe,na.rm=T)
Y=max(tab_lim$G,na.rm=T)

# ----- Figures
p1 <- ggplot() +
  geom_bar(t_Histo,
             mapping=aes(x=Classe, y=G, fill=Reg1),
           stat = "identity", position = "stack") +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$G,na.rm=T),
  #          label=paste("G/ha =",
  #                      round(sum(t_Histo$G,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
        geom_label(data.frame(x=c(X*0.2),
                          y=c(Y*1.0),
                          label=paste0("G/ha = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " m2/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),10)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                     max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                  max(tab_lim$G) + 0.5)),
                     breaks=seq(0,
                                ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                       max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                max(tab_lim$G) + 0.5),
                                ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                       floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                              0.5))) +
  guides(fill=guide_legend(reverse=T)) +
  labs(fill = "Qualités", y="G (m2/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

Y=max(tab_lim$N,na.rm=T)

p2 <- ggplot() +
  geom_bar(t_Histo,
          mapping=aes(x=Classe, y=N, fill=Reg1),
           stat = "identity", position = "stack") +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
      geom_label(data.frame(x=c(X*0.2),
                          y=c(Y*1.0),
                          label=paste0("N/ha = ",
                       round(sum(t_Histo$N,na.rm=T),1),
                       " tiges/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),10)) +
  # scale_y_continuous(expand=c(0,0),
  #                    limits=c(0,
  #                             max(tab_lim$N) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$V) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$N)/6/0.5+0.5)*0.5)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              max(tab_lim$N)*1.1),
                     breaks=seq(0,
                                max(tab_lim$N)*1.3,
                                5)) +
  guides(fill=guide_legend(reverse=T)) +
  labs(fill = "Qualités", y="N (tiges/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(9,1))


@

<<TabMoyDispEco_Cat, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, include=F, eval=F>>=
t <- filter(gfForetDen_Cat,
            Cycle == DernierCycle & NumForet == Choix) %>%
  select(-one_of(c("Nha","Gha","Vha","AcctGper","AcctVper",
                   "CV_Nha","CV_Gha","CV_Vha","CV_AcctGper","CV_AcctVper",
                   "Er_Nha","Er_Gha","Er_Vha","Er_AcctGper","Er_AcctVper"))) %>%
  mutate(VcHa=round(VcHa,0),
         VpHa=round(VpHa,0),
         Gainper=round(Gainper,0)) %>%
  melt(id=c("NumForet","Foret","Cycle","Cat","NbrePlacettes")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret + Cat + NbrePlacettes ~ variable) %>%
  mutate(IC_VcHa=paste0("[",round(VcHa-Er_VcHa*VcHa/100,1),"-",round(VcHa+Er_VcHa*VcHa/100,1),"]"),
         IC_VpHa=paste0("[",round(VpHa-Er_VpHa*VpHa/100,1),"-",round(VpHa+Er_VpHa*VpHa/100,1),"]"),
         IC_Gainper=paste0("[",round(Gainper-Er_Gainper*Gainper/100,1),"-",round(Gainper+Er_Gainper*Gainper/100,1),"]"),
         # -- Rajout des % :

         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),
         Tot_Gainper=sum(Gainper,na.rm=T),

         Part_VcHa=round(VcHa/Tot_VcHa*100,1),
         Part_VpHa=round(VpHa/Tot_VpHa*100,1),
         Part_Gainper=round(Gainper/Tot_Gainper*100,1),

         VcHa=paste0(VcHa," \\textcolor{blue}{(",Part_VcHa,"\\%)}"),
         VpHa=paste0(VpHa," \\textcolor{blue}{(",Part_VpHa,"\\%)}"),
         Gainper=paste0(Gainper," \\textcolor{blue}{(",Part_Gainper,"\\%)}")) %>%
  melt(id=c("NumForet","Foret","Cycle","Cat","NbrePlacettes")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
            stat=variable,
            # gsub(" ", "", Nom1, fixed = T)
            # variable=gsub("CV_","",variable,fixed=T),
            # variable=gsub("Er_","",variable,fixed=T),
            # variable=gsub("IC_","",variable,fixed=T))
            variable=str_replace(variable,"CV_",""),
            variable=str_replace(variable,"Er_",""),
            variable=str_replace(variable,"IC_",""),
            stat=str_replace(stat,"_VcHa",""),
            stat=str_replace(stat,"_VpHa",""),
            stat=str_replace(stat,"_Gainper",""),
            stat=str_replace(stat,"VcHa","Moy"),
            stat=str_replace(stat,"VpHa","Moy"),
            stat=str_replace(stat,"Gainper","Moy"),
            stat=factor(stat,levels=c("Moy","CV","Er","IC")),
            Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  filter(!is.na(stat)) %>%
  arrange(Cycle,Cat,variable,stat) %>%
  dcast(NumForet + Cycle + Foret + Cat + NbrePlacettes + stat ~ variable)

Niveaux_Cat <- c("PER","PB","BM","GB","TGB")

t2 <- select(t1,
             Cycle,Cat,stat,VcHa,VpHa,Gainper,NbrePlacettes) %>%
  mutate(stat=str_replace(stat,"Moy","Moyenne"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","Intervalle de confiance"))

t3 <- MultiRow(t2,c(1,2,dim(t2)[2])) %>%
  rename_("Vc"="VcHa",
          "Vp"="VpHa",
          "Gain"="Gainper",
          "Catégorie de bois"="Cat",
          "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 2:(dim(t3)[1])) {
  if (!is.na(t3[i,"Vc"])) {
  ListPos[length(ListPos)+1] <- i-1
  }
}

ListPos_Cat <- list()
for (i in 2:(dim(t3)[1])) {
  if (!is.na(t3[i,"Catégorie de bois"])) {
  ListPos_Cat[length(ListPos_Cat)+1] <- i-1
  }
}

print(xtable(t3,
             caption = "Principales caractéristiques économiques à l'échelle de la forêt avec leur précision - par catégories de diamètre.\\\\\\scriptsize{Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}",
             caption.placement = "top",
             digits=c(rep(0,4),rep(1,dim(t3)[2]-6),2,1,0),
             align=c("|M{0.5cm}","|M{0.6cm}|","M{1cm}|","M{2cm}|",
                     rep("M{1.5cm}|",dim(t3)[2]-3)),
             label = "TabMoyDispEco_Cat"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,0,dim(t3)[1]),
      add.to.row=list(
        pos=c(ListPos,ListPos_Cat),
        command=c(rep("\\cline{3-6}",length(ListPos)),
                  rep("\\cline{2-6}",length(ListPos_Cat)))), #9,"\\cmidrule[0.8pt]{2-7}"
      #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
      # rep("\\cline{3-6}",3))
      # ),
      size="\\scriptsize")
@

<<HistoClasse_Vp, echo=F, fig.pos="H", size='footnotesize', include=F, eval=F, error=F, comment=F, warning=F, message=F, fig.height=3.5, fig.cap="Répartition de la surface terrière par classe de diamètre et par essence", fig.pos="H">>=
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")


t_Histo <- filter(gfForetDen_ClasseReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Reg1,Classe,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Reg1,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Reg1)

tab_lim <- group_by(t_Histo,
                    Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T)) %>%
  ungroup()

# ----- Figures
p1 <- ggplot(t_Histo,
             aes(x=Classe, y=G, fill=Reg1)) +
  geom_bar(stat = "identity", position = "stack") +
  annotate("text",
           x=0.8*max(tab_lim$Classe,na.rm=T),
           y=0.8*max(tab_lim$G,na.rm=T),
           label=paste0("G/ha = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " m2/ha"),
           colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                     max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                  max(tab_lim$G) + 0.5)),
                     breaks=seq(0,
                                ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                       max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
                                max(tab_lim$G) + 0.5),
                                ifelse(floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                       floor(max(tab_lim$G)/6/0.5+0.5)*0.5 > 0,
                                              0.5))) +
  labs(fill = "Essences\nregroupées", y="G (m2/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p2 <- ggplot(t_Histo,
             aes(x=Classe, y=V, fill=Reg1)) +
  geom_bar(stat = "identity", position = "stack") +
  annotate("text",
           x=0.8*max(tab_lim$Classe,na.rm=T),
           y=0.8*max(tab_lim$V,na.rm=T),
           label=paste0("V/ha = ",
                       round(sum(t_Histo$V,na.rm=T),1),
                       " m3/ha"),
           colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              max(tab_lim$V) +
                                  floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     breaks=seq(0,
                                max(tab_lim$V) +
                                  floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                                floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Essences\nregroupées", y="V (m3/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(9,1))
@

% \subsection{Accroissements en diamètre pour les différentes classes de diamètre}
% {\LARGE Figure accroissements en diamètre par classe (interprétation avec valeur potentielle}
<<Fig_AccD_Cat_Ancien, echo=F, message=F, warning=F, fig.height=5.5, fig.cap="Valeurs d'accroissements en diamètre attribués aux différentes essences, selon les classes de diamètre", fig.pos='H', eval=F, include=F>>=
df <- filter(Arbres,
             NumForet==Choix & Cycle==DernierCycle)
df_AcctD1 <- left_join(df[,c("NumForet","NumPlac","NumArbre",
                                     "Essence","EssReg","Azimut","Dist","Cycle",
                                     "Diam1","Diam2","Diam","Classe")],
                       AcctD) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD) %>%
  filter(Cycle==DernierCycle & !is.na(AcctD)) %>%
  mutate(Population="Bois vivant\nde franc-pied")

df <- filter(Taillis,
             NumForet==Choix & Cycle==DernierCycle)
df_AcctD2 <- left_join(df[,c("NumForet","NumPlac",
                                     "Essence","EssReg","Cycle",
                                     "Diam","Classe")],
                       AcctD) %>%
  mutate(Population="Taillis",
         NumArbre=NA,
         Dist=NA,
         Azimut=NA) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD,Population) %>% # ,EssReg
  filter(Cycle==DernierCycle & !is.na(AcctD))

df_AcctD <- rbind(df_AcctD1,
                  df_AcctD2) %>%
  mutate(Cat=cut(Classe,
                 breaks = c(0,17.5,27.5,47.5,67.5,200),
                   labels = c("PER", "PB", "BM", "GB","TGB"),
                   include.lowest = T,
                   right = F),
         Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB")))
# %>%
#   group_by(Cat,Population) %>%
#   mutate(Moy_AcctD=mean(AcctD,na.rm=T)) %>%
#   ungroup()
df_AcctD_Bis <- group_by(df_AcctD,
                         Classe,Population) %>%
  mutate(Moy_AcctD=mean(AcctD,na.rm=T),
         Mark=factor(1)) %>%
  ungroup() %>%
  select(Mark,Population,Classe,Diam,Moy_AcctD) %>%
  distinct()


ggplot() +
  geom_point(df_AcctD,
             mapping=aes(Diam,AcctD,colour=Cat),
             alpha=0.4) +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,size=Mark),
            linetype=1,
            colour="yellow") +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,size=Mark),
            linetype=2,
            colour="navyblue") +
  scale_x_continuous(name="Classes de diamètre",
                     limits=c(10,max(df_AcctD$Classe,na.rm=T)),
                     breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,20)) + #,expand=c(0,0)
  scale_y_continuous(name="AcctD (cm/an)") +
  # ,
  # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
  #          max(df_AcctD$AcctD,na.rm=T)+0.5),
  # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
  # expand=c(0,0)) +
  # facet_wrap(~ Population,
  #            nrow=2,
  #            scales="free") +
  scale_colour_manual(name="Catégories de diamètre",
                      values=Palette_Cat) +
  scale_size_manual(name="",
                    label="AcctD moyen",
                    values=0.7) +
  guides(colour=guide_legend(nrow=1,
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
# ,
#                   legend.box="vertical",
#                   legend.box.spacing=unit(c(0,0,0,0), "cm"),
#                   legend.box.just="top"
@


% \subsection{Analyse détaillée des valeurs de consommation et potentielle {\Large ou Structure par classes de diamètre et par qualités}}
<<CalculTGB, echo=F>>=
if (DernierCycle > 1) {
  t1 <- filter(gfForetDen_ClasseReg1, Cycle==DernierCycle) %>%
    mutate(Reg1=ifelse(Reg1=="D","D","ABC")) %>%
    select(Classe,Reg1,Nha,Gha,Vha,AcctGper,AcctVper)
  t2 <- filter(gfForetDen_ClasseReg1, Cycle==DernierCycle) %>%
    mutate(Reg1=ifelse(Reg1=="D","D","ABC")) %>%
    select(Classe,Reg1,VcHa,VpHa,Gainper)

  HistD <- merge(t1,t2)
  HistQual <- HistD %>%
    rename(Qual=Reg1,
           N=Nha,
           V=Vha,
           Vc=VcHa,
           Vp=VpHa) %>%
    arrange(Qual)
  VcTGB <- sum(HistQual$Vc[which(HistQual$Classe>=70)])/sum(HistQual$Vc)
} else {
t1 <- filter(gfForetDen_ClasseReg1, Cycle==DernierCycle) %>%
  mutate(Reg1=ifelse(Reg1=="D","D","ABC")) %>%
  select(Classe,Reg1,Nha,Gha,Vha)
t2 <- filter(gfForetDen_ClasseReg1, Cycle==DernierCycle) %>%
  mutate(Reg1=ifelse(Reg1=="D","D","ABC")) %>%
  select(Classe,Reg1,VcHa)

HistD <- merge(t1,t2)
HistQual <- HistD %>%
  rename(Qual=Reg1,
         N=Nha,
         V=Vha,
         Vc=VcHa) %>%
  arrange(Qual)
VcTGB <- sum(HistQual$Vc[which(HistQual$Classe>=70)])/sum(HistQual$Vc)
}
@

<<HistoValeursHa, echo=F, size='footnotesize', fig.pos='H', fig.height=3, fig.width=5, fig.pos='H', fig.cap="Répartition des valeurs de consommation et potentielle par classe de diamètre en distinguant les tiges d'avenir ou avec peu avenir", error=F, comment=F, warning=F, message=F, include=F, eval=F>>=
t <- group_by(HistQual,
              Classe,Qual) %>%
  summarise(Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  arrange(Qual)
VMax <- max(t$Vc,t$Vp)
p1 <- ggplot(t, aes(x = Classe, y = Vc, fill = Qual)) +
  geom_bar(stat = "identity", position = "stack",col="black") +
  scale_fill_grey(name="Qualité") +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(gfForetDen_ClasseQual$Classe,na.rm=T),20)) +
  scale_y_continuous(limits=c(0,VMax)) +
# ,
#                      breaks=seq(0,VMax+200,round(VMax/5)) +
  guides(fill=guide_legend(reverse=F)) +
  labs(y="Vc (euros/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.direction="horizontal",
                   legend.title=element_text(size=9))
p2 <- ggplot(t, aes(x = Classe, y = Vp, fill = Qual)) +
  geom_bar(stat = "identity", position = "stack",col="black") +
  scale_fill_grey() +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(gfForetDen_ClasseQual$Classe,na.rm=T),20)) +
  scale_y_continuous(limits=c(0,VMax)) +
  guides(fill=guide_legend(reverse=T)) +
  labs(y="Vp (euros/ha)", x="Classe de diamètre") +
  MyTheme1
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend, nrow=2,heights=c(9, 1))
@

<<HistoValeurs, echo=F, size='footnotesize', fig.pos='H', fig.width=6, fig.height=3, fig.pos='H', fig.cap="Comparaison des valeurs de consommation et potentielle", error=F, comment=F, warning=F, message=F, include=F, eval=F>>=
tab <- subset(gfForetDen_Classe,
              Cycle == DernierCycle & NumForet == Choix,
              select=c("Classe","VcHa","VpHa")) %>%
  rename(Vc=VcHa,
         Vp=VpHa) %>%
  melt(id="Classe")
# tab.m <- melt(tab, id=c("Classe"))
ggplot(tab, aes(x = Classe, y = value, color=variable)) +
  geom_line() +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),20)) +
  labs(color="", y="Valeur (euros/ha)", x="Classe de diamètre") +
  MyTheme1
@

<<HistoValeurs_Taux, echo=F, size='footnotesize', fig.pos='H', fig.width=6, fig.height=3, fig.pos='H', fig.cap="Comparaison des tayx de fonctionnements (valeurs de consommation et potentielle.)", error=F, comment=F, warning=F, message=F, include=F, eval=F>>=
tab <- subset(gfForetDen_Classe,
              Cycle == DernierCycle & NumForet == Choix,
              select=c("Classe","VcHa","VpHa","Gainper")) %>%
  mutate(Taux_Vc=Gainper/VcHa,
         Taux_Vp=Gainper/VpHa) %>%
  # rename(Vc=VcHa,
  #        Vp=VpHa) %>%
  select(Classe,Taux_Vc,Taux_Vp) %>%
  melt(id="Classe")
# tab.m <- melt(tab, id=c("Classe"))
ggplot(tab, aes(x = Classe, y = value, color=variable)) +
  geom_line() +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),20)) +
  labs(color="", y="Valeur (euros/ha)", x="Classe de diamètre") +
  MyTheme1
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<TabMoyDisp_EssenceCat_Preparation, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=
# ----- Ordre essences :
# t_Niveaux <- filter(gfForetDen_Essence,
#                     Cycle == DernierCycle) %>%
#   arrange(-Vha)
# # %>%
# #   left_join(EssReg_PPTetras[,c("Essence","EssReg")], by="Essence")
#
# # ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]





if (DernierCycle > 1) {
t_Base <- filter(gfForetDen_EssenceCat,
             Cycle == DernierCycle) %>%
  group_by(Essence) %>%
  mutate(Nha=round(Nha,1),
         Gha=round(Gha,1),
         Vha=round(Vha,1),
         AcctGper=round(AcctGper,2),
         AcctVper=round(AcctVper,2),
         VcHa=round(VcHa,1),
         VpHa=round(VpHa,1),
         Gainper=round(Gainper,2),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_AcctGper=round(Er_AcctGper,1),
         Er_AcctVper=round(Er_AcctVper,1),
         Er_VcHa=round(Er_VcHa,1),
         Er_VpHa=round(Er_VpHa,1),
         Er_Gainper=round(Er_Gainper,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_AcctGper=sum(AcctGper,na.rm=T),
         Tot_AcctVper=sum(AcctVper,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),
         Tot_VpHa=sum(VpHa,na.rm=T),
         Tot_Gainper=sum(Gainper,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_AcctGper=round(AcctGper/Tot_AcctGper*100,1),
         Part_AcctVper=round(AcctVper/Tot_AcctVper*100,1),
         Part_VcHa=round(VcHa/Tot_VcHa*100,1),
         Part_VpHa=round(VpHa/Tot_VpHa*100,1),
         Part_Gainper=round(Gainper/Tot_Gainper*100,1)) %>%
  ungroup() %>%
  mutate(Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Nha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Nha,
                                  "\\%}}"),
                           "}")),
                  Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Gha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Gha,
                                  "\\%}}"),
                           "}")),
                  Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Vha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Vha,
                                  "\\%}}"),
                           "}")),
                  AcctGper=paste0("\\footnotesize{",
                    AcctGper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctGper,
                    "\\%)} ",
                    ifelse(!is.na(Er_AcctGper),
                           paste0("\\textcolor{Gray}{±",
                                  Er_AcctGper,
                                  "\\%}}"),
                           "}")),
                  AcctVper=paste0("\\footnotesize{",
                    AcctVper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_AcctVper,
                    "\\%)} ",
                    ifelse(!is.na(Er_AcctVper),
                           paste0("\\textcolor{Gray}{±",
                                  Er_AcctVper,
                                  "\\%}}"),
                           "}")),
                  VcHa=paste0("\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)} ",
                    ifelse(!is.na(Er_VcHa),
                           paste0("\\textcolor{Gray}{±",
                                  Er_VcHa,
                                  "\\%}}"),
                           "}")),
                  VpHa=paste0("\\footnotesize{",
                    VpHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VpHa,
                    "\\%)} ",
                    ifelse(!is.na(Er_VpHa),
                           paste0("\\textcolor{Gray}{±",
                                  Er_VpHa,
                                  "\\%}}"),
                           "}")),
                  Gainper=paste0("\\footnotesize{",
                    Gainper,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gainper,
                    "\\%)} ",
                    ifelse(!is.na(Er_Gainper),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Gainper,
                                  "\\%}}"),
                           "}")),
            Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")),
            Essence=factor(Essence,levels=Niveaux_Essence2)) %>%
  select(Essence,Cat,Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(Essence,Cat) %>%
  rename_("Catégorie de bois"="Cat",
          "N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
         "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
         "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctGper",
         "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctVper",
         "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
         "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
         "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gainper")

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

# ----- Liste des essences principales (3 plus grands volumes)
Essence1 <- Niveaux_Essence2[1]
Essence2 <- Niveaux_Essence2[2]
Essence3 <- Niveaux_Essence2[3]






# ----- Préparation table histogrammes qualités
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
# QualPalette <- c("#EDF8E9","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#005A32")
# RColorBrewer::brewer.pal(4,"Greens")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

t_Histo_Base <- filter(gfForetDen_EssenceClasseReg1,
             Cycle == DernierCycle) %>%
  select(Essence,Reg1,Classe,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(Reg1=Reg1,
         N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Essence,Reg1,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_Essence2),
         Reg1=factor(Reg1,levels=c("D","C","B","A"))) %>%
  arrange(Essence,Reg1)
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
t_Base <- filter(gfForetDen_EssenceCat,
             Cycle == DernierCycle) %>%
  group_by(Essence) %>%
  mutate(Nha=round(Nha,1),
         Gha=round(Gha,1),
         Vha=round(Vha,1),
         VcHa=round(VcHa,1),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         Er_VcHa=round(Er_VcHa,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         Tot_VcHa=sum(VcHa,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_VcHa=round(VcHa/Tot_VcHa*100,1)) %>%
  ungroup() %>%
  mutate(Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Nha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Nha,
                                  "\\%}}"),
                           "}")),
                  Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Gha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Gha,
                                  "\\%}}"),
                           "}")),
                  Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Vha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Vha,
                                  "\\%}}"),
                           "}")),
                  VcHa=paste0("\\footnotesize{",
                    VcHa,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_VcHa,
                    "\\%)} ",
                    ifelse(!is.na(Er_VcHa),
                           paste0("\\textcolor{Gray}{±",
                                  Er_VcHa,
                                  "\\%}}"),
                           "}")),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")),
            Essence=factor(Essence,levels=Niveaux_Essence2)) %>%
  select(Essence,Cat,Nha,Gha,Vha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(Essence,Cat) %>%
  rename_("Catégorie de bois"="Cat",
          "N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
         "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
         "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa")

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

# ----- Liste des essences principales (3 plus grands volumes)
Essence1 <- Niveaux_Essence2[1]
Essence2 <- Niveaux_Essence2[2]
Essence3 <- Niveaux_Essence2[3]






# ----- Préparation table histogrammes qualités
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
# QualPalette <- c("#EDF8E9","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#005A32")
# RColorBrewer::brewer.pal(4,"Greens")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

t_Histo_Base <- filter(gfForetDen_EssenceClasseReg1,
             Cycle == DernierCycle) %>%
  select(Essence,Reg1,Classe,
         Nha,Gha,Vha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(Reg1=Reg1,
         N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  group_by(Essence,Reg1,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_Essence2),
         Reg1=factor(Reg1,levels=c("D","C","B","A"))) %>%
  arrange(Essence,Reg1)
}
@

% \subsection{Essence principale : \Sexpr{Essence1}}

% Le tableau \ref{TabMoyDisp_EssenceCat_Essence1} présente les résultats d'analyse pour l'essence \Sexpr{Essence1}.

<<TabMoyDisp_EssenceCat_Essence1, eval=F, include=F, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=
t <- filter(t_Base,
            Essence==Essence1) %>%
  select(-one_of("Essence"))

# ----- Impression -----
Digits=rep(0,dim(t)[2]+1)

Title <- paste0("Résultats d'analyse pour l'essence ",
                              Essence1,
                              " à l'échelle de la forêt et par catégories de diamètre.\\\\\\scriptsize{N = densité de tiges (tiges/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)\\\\Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}")

print(xtable(t,
             caption = Title,
             caption.placement = "top",
             digits=Digits,
             align=c("M{0cm}|","M{1.2cm}",rep("|M{1.4cm}",dim(t)[2]-1)),
             label = "TabMoyDisp_EssenceCat_Essence1"),
      hline.after=-1:dim(t)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")
@
\FloatBarrier

% La figure \ref{fig:CatRadar_Essence1} complète l'analyse de la structure de l'essence et présente la contribution des différentes catégories de diamètre dans les différentes variables d'analyse.

<<CatRadar_Essence1, echo=F, warning=F, size='footnotesize', fig.height=3.5, fig.cap=paste0("Importance relative des différentes catégories de diamètre pour l'essence ",Essence1,""), fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)


t_Radar <- filter(gfForetDen_EssenceCat,
             Cycle == DernierCycle &
               Essence==Essence1) %>%
  select(Cat,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Cat) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(Cat)

t_Radar.m <- melt(t_Radar, id="Cat") %>%
  group_by(variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="N",
                      paste0(round(Ratio,3)*100," %"),
                      label),
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="V",
                      paste0(round(value,1)," m3/ha"),
                      label),
         label=ifelse(variable=="AcctGper",
                      paste0(round(value,2)," m2/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="AcctVper",
                      paste0(round(value,2)," m3/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), # &#8364
                      label),
         label=ifelse(variable=="Gainper",
                      paste0(round(value,0)," euros/ha/an"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("TGB","GB","BM","PB","PER"))) %>% # "PER","PB","BM","GB","TGB"
  arrange(variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
  #                                       y=0.5,
  #                                       label=variable),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
      geom_label(t_Radar_Text, mapping=aes(x=variable,
                                        y=0.5,
                                        label=variable),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") +
    geom_label_repel(t_Radar.m,
                     mapping=aes(x=variable,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                "")),

                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Cat)) > 10,
                                         2,1),
                             bycol=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
@
\FloatBarrier

% La figure \ref{fig:HistoQual_Essence1} illustre la répartition des qualités de billes de pied par classe de diamètre pour l'essence \Sexpr{Essence1}

<<HistoQual_Essence1, echo=F, fig.pos="H", size='footnotesize', include=F, eval=F, error=F, comment=F, warning=F, message=F, fig.height=3.5, fig.cap=paste0("Répartition de la qualité par classe de diamètre pour l'essence ",Essence1), fig.pos="H">>=

# ----- Tables
t_Histo <- filter(t_Histo_Base,
                  Essence==Essence1)

tab_lim <- group_by(t_Histo,
                    Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup()

# ----- Figures
p1 <- ggplot(t_Histo,
             aes(x=Classe, y=V, fill=Reg1)) +
  geom_bar(stat = "identity", position = "stack") +
  annotate("text",
           x=0.8*max(tab_lim$Classe,na.rm=T),
           y=0.8*max(tab_lim$V,na.rm=T),
           label=paste0("V = ",
                       round(sum(t_Histo$V,na.rm=T),1),
                       " m3/ha"),
           colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(limits=c(0, # expand=c(0,0),
                              max(tab_lim$V) +
                                  floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     breaks=seq(0,
                                max(tab_lim$V) +
                                  floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                                floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="V (m3/ha)", x="Classe de diamètre") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p2 <- ggplot(t_Histo,
             aes(x=Classe, y=V, fill=Reg1)) +
  geom_bar(stat = "identity", position = "fill") +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de V (%)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p3 <- ggplot(t_Histo,
             aes(x=Classe, y=Vc, fill=Reg1)) +
  geom_bar(stat = "identity", position = "stack") +
  annotate("text",
           x=0.8*max(tab_lim$Classe,na.rm=T),
           y=0.8*max(tab_lim$Vc,na.rm=T),
           label=paste0("Vc = ",
                       round(sum(t_Histo$Vc,na.rm=T),1),
                       " euros/ha"),
           colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(limits=c(0,
                              max(tab_lim$Vc) +
                                  floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
                     breaks=seq(0,
                                max(tab_lim$Vc) +
                                  floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
                                floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Vc (euros/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p4 <- ggplot(t_Histo,
             aes(x=Classe, y=Vc, fill=Reg1)) +
  geom_bar(stat = "identity", position = "fill") +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc/ha =",
  #                      round(sum(t_Histo$Vc,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(t_Histo$Classe)+5),
                     breaks=seq(0,max(t_Histo$Classe),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de Vc (%)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

mylegend <- g_legend(p1)

# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=2, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(8,1))
@
\FloatBarrier

\EditIf{\Sexpr{Eval_Qual}}{TRUE}{
\section{Analyse de la qualité}
<<Comment_2.4, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.4")
cat(Comment$Texte)
@

\subsection{A l'échelle du peuplement}
\label{subsec:Qual_Foret}

<<Comment_2.4.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.4.1")
cat(Comment$Texte)
@

Le tableau \ref{TabQual_Disp} fournit les principales caratéristiques dendrométriques par qualité. Il est complété par la figure \ref{fig:QualCatEss} qui détaille l'importance relative des qualités par classes de diamètre.

<<TabQual_Disp, echo=F, results='asis', fig.pos="H", include = Eval_Qual, eval = Eval_Qual>>=
if (DernierCycle > 1) {
  t <-
    gfForetDen_Reg1 %>%
    filter(Cycle == DernierCycle & NumForet == Choix) %>%
    arrange(-Vha) %>%
    mutate(
      Er_Nha = round(Er_Nha, 1),
      Er_Gha = round(Er_Gha, 1),
      Er_Vha = round(Er_Vha, 1),
      Er_AcctGper = round(Er_AcctGper, 1),
      Er_AcctVper = round(Er_AcctVper, 1),
      Er_VcHa = round(Er_VcHa, 1),
      Er_VpHa = round(Er_VpHa, 1),
      Er_Gainper = round(Er_Gainper, 1),

      Tot_Nha = sum(Nha, na.rm = T),
      Tot_Gha = sum(Gha, na.rm = T),
      Tot_Vha = sum(Vha, na.rm = T),
      Tot_AcctGper = sum(AcctGper, na.rm = T),
      Tot_AcctVper = sum(AcctVper, na.rm = T),
      Tot_VcHa = sum(VcHa, na.rm = T),
      Tot_VpHa = sum(VpHa, na.rm = T),
      Tot_Gainper = sum(Gainper, na.rm = T),

      Part_Nha = Nha / Tot_Nha * 100,
      Part_Gha = Gha / Tot_Gha * 100,
      Part_Vha = Vha / Tot_Vha * 100,
      Part_AcctGper = AcctGper / Tot_AcctGper * 100,
      Part_AcctVper = AcctVper / Tot_AcctVper * 100,
      Part_VcHa = VcHa / Tot_VcHa * 100,
      Part_VpHa = VpHa / Tot_VpHa * 100,
      Part_Gainper = Gainper / Tot_Gainper * 100,

      Nha = ifelse(Nha > 0 & Nha < 1, "$\\approx$0", round(Nha, 0)),
      Gha = ifelse(Gha > 0 & Gha < 0.1, "$\\approx$0", round(Gha, 1)),
      Vha = ifelse(Vha > 0 & Vha < 1, "$\\approx$0", round(Vha, 0)),
      AcctGper =
        ifelse(AcctGper > 0 & AcctGper < 0.1, "$\\approx$0", round(AcctGper, 2)),
      AcctVper =
        ifelse(AcctVper > 0 & AcctVper < 0.1, "$\\approx$0", round(AcctVper, 1)),
      VcHa = ifelse(VcHa > 0 & VcHa < 1, "$\\approx$0", round(VcHa, 0)),
      VpHa = ifelse(VpHa > 0 & VpHa < 0.1, "$\\approx$0", round(VpHa, 0)),
      Gainper =
        ifelse(Gainper > 0 & Gainper < 0.1, "$\\approx$0", round(Gainper, 0)),

      Part_Nha =
        ifelse(
          Part_Nha > 0 & Part_Nha < 1, "$\\approx$0", round(Part_Nha, digits = 0)
        ),
      Part_Gha =
        ifelse(
          Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", round(Part_Gha, digits = 0)
        ),
      Part_Vha =
        ifelse(
          Part_Vha > 0 & Part_Vha < 1, "$\\approx$0", round(Part_Vha, digits = 0)
        ),
      Part_AcctGper =
        ifelse(
          Part_AcctGper > 0 & Part_AcctGper < 1, "$\\approx$0", round(Part_AcctGper, digits = 0)
        ),
      Part_AcctVper =
        ifelse(
          Part_AcctVper > 0 & Part_AcctVper < 1, "$\\approx$0", round(Part_AcctVper, digits = 0)
        ),
      Part_VcHa =
        ifelse(
          Part_VcHa > 0 & Part_VcHa < 1, "$\\approx$0", round(Part_VcHa, digits = 0)
        ),
      Part_VpHa =
        ifelse(
          Part_VpHa > 0 & Part_VpHa < 1, "$\\approx$0", round(Part_VpHa, digits = 0)
        ),
      Part_Gainper =
        ifelse(
          Part_Gainper > 0 & Part_Gainper < 1, "$\\approx$0", round(Part_Gainper, digits = 0)
        ),

      Nha =
        ifelse(
          Nha != 0,
          paste0(
            "\\footnotesize{", Nha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Nha, "\\%)}", "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_Nha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Nha,
      #               "\\%}}"),
      Gha =
        ifelse(
          Gha != 0,
          paste0(
            "\\footnotesize{", Gha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}",
            "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_Gha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Gha,
      #               "\\%}}"),
      Vha =
        ifelse(
          Vha != 0,
          paste0(
            "\\footnotesize{", Vha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Vha, "\\%)}",
            "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_Vha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Vha,
      #               "\\%}}"),
      AcctGper =
        ifelse(
          AcctGper != 0,
          paste0(
            "\\footnotesize{", AcctGper,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_AcctGper, "\\%)}",
            "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_AcctG),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_AcctG,
      #               "\\%}}"),
      AcctVper =
        ifelse(
          AcctVper != 0,
          paste0(
            "\\footnotesize{", AcctVper,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_AcctVper, "\\%)}",
            "}"
          ),
          ""),
      # ifelse(!is.na(Er_AcctV),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_AcctV,
      #               "\\%}}"),
      VcHa =
        ifelse(
          VcHa != 0,
          paste0(
            "\\footnotesize{", VcHa,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VcHa, "\\%)}", "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_VcHa),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_VcHa,
      #               "\\%}}"),
      VpHa =
        ifelse(
          VpHa != 0,
          paste0(
            "\\footnotesize{", VpHa,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VpHa, "\\%)}",
            "}"
          ),
          ""
        ),
      # ifelse(!is.na(Er_VpHa),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_VpHa,
      #               "\\%}}"),
      Gainper =
        ifelse(
          Gainper!=0,
          paste0(
            "\\footnotesize{", Gainper,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gainper, "\\%)}", "}"
          ),
          ""
        )
    ) %>%
    # ifelse(!is.na(Er_Gainper),
    #        paste0("\\textcolor{Gray}{±",
    #               Er_Gainper,
    #               "\\%}}"),
    #        "}"))) %>%
    select(Reg1, Nha, Gha, Vha, AcctGper, AcctVper, Gainper, VcHa, VpHa)
  # full_join(t) %>%
  # rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
  #        "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
  #        "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
  #        "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
  #        "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
  #        "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
  #        "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
  #        "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain") %>%
  # mutate(Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  # arrange(Reg1) %>%
  # rename_("Qualités"="Reg1")

# --- Total
t_TOT <-
  gfForetDen_ %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-Vha) %>%
    mutate(
      Reg1 = "\\textbf{Total}",  # \\rowcolor{LightGray}

      Nha = round(Nha, 0),
      Gha = round(Gha, 1),
      Vha = round(Vha, 0),
      AcctGper = round(AcctGper, 2),
      AcctVper = round(AcctVper, 1),
      VcHa = round(VcHa, 0),
      VpHa = round(VpHa, 0),
      Gainper = round(Gainper, 0),

      Er_Nha = round(Er_Nha, 1),
      Er_Gha = round(Er_Gha, 1),
      Er_Vha = round(Er_Vha, 1),
      Er_AcctGper = round(Er_AcctGper, 1),
      Er_AcctVper = round(Er_AcctVper, 1),
      Er_VcHa = round(Er_VcHa, 1),
      Er_VpHa = round(Er_VpHa, 1),
      Er_Gainper = round(Er_Gainper, 1),

      Tot_Nha = sum(Nha, na.rm = T),
      Tot_Gha = sum(Gha, na.rm = T),
      Tot_Vha = sum(Vha, na.rm = T),
      Tot_AcctGper = sum(AcctGper, na.rm = T),
      Tot_AcctVper = sum(AcctVper, na.rm = T),
      Tot_VcHa = sum(VcHa, na.rm = T),
      Tot_VpHa = sum(VpHa, na.rm = T),
      Tot_Gainper = sum(Gainper, na.rm = T),

      Part_Nha = round(Nha / Tot_Nha * 100, 1),
      Part_Gha = round(Gha / Tot_Gha * 100, 1),
      Part_Vha = round(Vha / Tot_Vha * 100, 1),
      Part_AcctGper = round(AcctGper / Tot_AcctGper * 100, 1),
      Part_AcctVper = round(AcctVper / Tot_AcctVper * 100, 1),
      Part_VcHa = round(VcHa / Tot_VcHa * 100, 1),
      Part_VpHa = round(VpHa / Tot_VpHa * 100, 1),
      Part_Gainper = round(Gainper / Tot_Gainper * 100, 1),

      # Nha = paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
      #            Part_Nha,
      #            "\\%)}} \\footnotesize{",
      #            Nha,
      #            "}\\hspace{1.4cm}",
      #            ifelse(!is.na(Er_Nha),
      #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
      #                          Er_Nha,
      #                          "\\%}}"),
      #                   "")),
      Nha =
        paste0(
        "\\textbf{\\footnotesize{", Nha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Nha, "\\%)}}}"
        ),
      # ifelse(!is.na(Er_Nha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Nha,
      #               "\\%}}"),
      #        "}")),
      Gha =
        paste0(
          "\\textbf{\\footnotesize{", Gha,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_Gha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Gha,
      #               "\\%}}"),
      #        "}")),
      Vha =
        paste0(
          "\\textbf{\\footnotesize{", Vha,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Vha, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_Vha),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_Vha,
      #               "\\%}}"),
      #        "}")),
      AcctGper =
        paste0(
          "\\textbf{\\footnotesize{", AcctGper,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_AcctGper, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_AcctG),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_AcctG,
      #               "\\%}}"),
      #        "}")),
      AcctVper =
        paste0(
          "\\textbf{\\footnotesize{", AcctVper,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_AcctVper, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_AcctV),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_AcctV,
      #               "\\%}}"),
      #        "}")),
      VcHa =
        paste0(
          "\\textbf{\\footnotesize{", VcHa,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VcHa, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_VcHa),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_VcHa,
      #               "\\%}}"),
      #        "}")),
      VpHa =
        paste0(
          "\\textbf{\\footnotesize{", VpHa,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VpHa, "\\%)}}}"
          ),
      # ifelse(!is.na(Er_VpHa),
      #        paste0("\\textcolor{Gray}{±",
      #               Er_VpHa,
      #               "\\%}}"),
      #        "}")),
      Gainper =
        paste0(
          "\\textbf{\\footnotesize{", Gainper,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gainper, "\\%)}}}"
          )
    ) %>%
                    # ifelse(!is.na(Er_Gain),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gain,
                    #               "\\%}}"),
                    #        "}"))) %>%
  select(Reg1, Nha, Gha, Vha, AcctGper, AcctVper, Gainper, VcHa, VpHa)

t_TOT[1, ] <- paste0("\\cellcolor{LightGray} ", t_TOT[1, ])
  # rename_("N"="Nha",
  #        "G"="Gha",
  #        "V"="Vha",
  #        "Acct G"="AcctG",
  #        "Acct V"="AcctV",
  #        "Vc"="VcHa",
  #        "Vp"="VpHa")

t <-
  rbind(t, t_TOT) %>%
  rename_(
    "\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}" = "Nha",
    "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}" = "Gha",
    "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3/ha)}}" = "Vha",
    "\\textbf{AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}}" = "AcctGper",
    "\\textbf{AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}}" = "AcctVper",
    "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}" = "VcHa",
    "\\textbf{Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}}" = "VpHa",
    "\\textbf{Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}}" = "Gainper"
  ) %>%
  mutate(Reg1 = factor(Reg1, levels = c("A", "B", "C", "D", "\\cellcolor{LightGray} \\textbf{Total}"))) %>%
  arrange(Reg1) %>%
  rename_("\\textbf{Qualités}" = "Reg1")


t <- t %>% mutate(Vide = NA) %>% # création colonne vide pour agrandir hauteurs lignes
  rename_(" " = "Vide")

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)


# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,VcHa,VpHa,Gain))

# Commande pour agrandir la ligne des moyennes
Command_Height=rep("[3ex]\n\\hline \n", dim(t)[1])
ListPos <- list()
for (i in 1:dim(t)[1]) {ListPos[length(ListPos) + 1] <- i}




# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]
Digits = c(0, 0, 3, 3, 3, 4, 4, 3, 3, 4)
Digits = rep(0, dim(t)[2] + 1)
Digits = c(0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0)

print(
  xtable(
    t,
    digits = Digits,
    align = c("M{0cm}|", "|M{1.2cm}|", rep("M{1.4cm}|", dim(t)[2]-2), "N"),
    caption = "Résultats d'analyse dendrométrique et économique des tiges de franc-pied répartis par qualité (précomptables uniquement)",
    label = "TabQual_Disp"
  ),
  caption.placement = "bottom",
  hline.after = c(-1, 0),
  sanitize.text.function = function(x) {return(x)},
  include.rownames = F,
  add.to.row = list(
    pos = ListPos,
    command = Command_Height
  ),
  size = "\\footnotesize"
)
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
  t <-
    gfForetDen_Reg1 %>%
    filter(Cycle == DernierCycle & NumForet == Choix) %>%
    arrange(-Vha) %>%
    mutate(
      Er_Nha = round(Er_Nha, 1),
      Er_Gha = round(Er_Gha, 1),
      Er_Vha = round(Er_Vha, 1),
      Er_VcHa = round(Er_VcHa, 1),

      Tot_Nha = sum(Nha, na.rm = T),
      Tot_Gha = sum(Gha, na.rm = T),
      Tot_Vha = sum(Vha, na.rm = T),
      Tot_VcHa = sum(VcHa, na.rm = T),

      Part_Nha = Nha / Tot_Nha * 100, 0,
      Part_Gha = Gha / Tot_Gha * 100, 0,
      Part_Vha = Vha / Tot_Vha * 100, 0,
      Part_VcHa = VcHa / Tot_VcHa * 100, 0,

      Nha = ifelse(Nha > 0 & Nha < 1, "$\\approx$0", round(Nha, 0)),
      Gha = ifelse(Gha > 0 & Gha < 0.1, "$\\approx$0", round(Gha, 1)),
      Vha = ifelse(Vha > 0 & Vha < 1, "$\\approx$0", round(Vha, 0)),
      VcHa = ifelse(VcHa > 0 & VcHa < 1, "$\\approx$0", round(VcHa, 0)),

      Part_Nha =
        ifelse(
          Part_Nha > 0 & Part_Nha < 1, "$\\approx$0", round(Part_Nha, digits = 0)
        ),
      Part_Gha =
        ifelse(
          Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", round(Part_Gha, digits = 0)
        ),
      Part_Vha =
        ifelse(
          Part_Vha > 0 & Part_Vha < 1, "$\\approx$0", round(Part_Vha, digits = 0)
        ),
      Part_VcHa =
        ifelse(
          Part_VcHa > 0 & Part_VcHa < 1, "$\\approx$0", round(Part_VcHa, digits = 0)
        ),

      Nha =
        ifelse(
          Nha != 0,
          paste0(
            "\\footnotesize{", Nha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Nha,
            "\\%)}}"
          ),
          ""
        ),
      Gha =
        ifelse(
          Gha!= 0,
          paste0(
            "\\footnotesize{", Gha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha,
            "\\%)}}"
          ),
          ""
        ),
      Vha =
        ifelse(
          Vha!= 0,
          paste0(
            "\\footnotesize{", Vha,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Vha,
            "\\%)}}"
          ),
          ""
        ),
      VcHa =
        ifelse(
          VcHa!= 0,
          paste0(
            "\\footnotesize{", VcHa,
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VcHa,
            "\\%)}}"
          ),
          ""
        )
    ) %>%
    select(Reg1, Nha, Gha, Vha, VcHa)

  # --- Total
  t_TOT <-
    gfForetDen_ %>%
    filter(Cycle == DernierCycle & NumForet == Choix) %>%
    arrange(-Vha) %>%
    mutate(
      Reg1 = "\\textbf{Total}",  # \\rowcolor{LightGray}

      Nha = round(Nha, 0),
      Gha = round(Gha, 1),
      Vha = round(Vha, 0),
      VcHa = round(VcHa, 0),

      Er_Nha = round(Er_Nha, 1),
      Er_Gha = round(Er_Gha, 1),
      Er_Vha = round(Er_Vha, 1),
      Er_VcHa = round(Er_VcHa, 1),

      Tot_Nha = sum(Nha, na.rm = T),
      Tot_Gha = sum(Gha, na.rm = T),
      Tot_Vha = sum(Vha, na.rm = T),
      Tot_VcHa = sum(VcHa, na.rm = T),

      Part_Nha = round(Nha / Tot_Nha * 100, 1),
      Part_Gha = round(Gha / Tot_Gha * 100, 1),
      Part_Vha = round(Vha / Tot_Vha * 100, 1),
      Part_VcHa = round(VcHa / Tot_VcHa * 100, 1),

      Nha =
        paste0(
          "\\textbf{\\footnotesize{", Nha,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Nha, "\\%)}}}"
        ),
      Gha =
        paste0(
          "\\textbf{\\footnotesize{", Gha,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}}"
        ),
      Vha =
        paste0(
          "\\textbf{\\footnotesize{", Vha,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Vha, "\\%)}}}"
        ),
      VcHa =
        paste0(
          "\\textbf{\\footnotesize{", VcHa,
          "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_VcHa, "\\%)}}}"
        )
    ) %>%
    select(Reg1, Nha, Gha, Vha, VcHa)

t_TOT[1, ] <- paste0("\\cellcolor{LightGray} ", t_TOT[1, ])

t <- rbind(t, t_TOT) %>%
  rename_(
    "\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges / ha)}}" = "Nha",
    "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2 / ha)}}" = "Gha",
    "\\textbf{V\\hspace{1.2cm}\\scriptsize{(m3 / ha)}}" = "Vha",
    "\\textbf{Vc\\hspace{1.2cm}\\scriptsize{(\\euro / ha)}}" = "VcHa"
  ) %>%
  mutate(
    Reg1 =
      factor(
        Reg1,
        levels = c("A", "B", "C", "D", "\\cellcolor{LightGray} \\textbf{Total}")
      )
  ) %>%
  arrange(Reg1) %>%
  rename_("\\textbf{Qualités}" = "Reg1")


t <-
  t %>%
  mutate(Vide = NA) %>% # création colonne vide pour agrandir hauteurs lignes
  rename_(" " = "Vide")

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)


# t1 <- subset(gfForetFpied_Essence,  Cycle == DernierCycle & NumForet == Choix,  select = c(Essence, Nha, Gha, Vha, VhaIFN, AcctG, AcctV))
# t2 <- subset(gfForetFpied_Essence,  Cycle == DernierCycle & NumForet == Choix,  select = c(Essence, VcHa, VpHa, Gain))

# Commande pour agrandir la ligne des moyennes
Command_Height = rep("[3ex]\n\\hline \n", dim(t)[1])
ListPos <- list()
for (i in 1:dim(t)[1]) {ListPos[length(ListPos) + 1] <- i}




# TabCompo <- merge(t1,  t2,  by = "Essence",  all = T)
# # names(TabCompo)[2:8] <- c("Nha", "Gha", "Vha", "VhaIFN", "VcHa", "VpHa", "Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa), ]
Digits = c(0, 0, 3, 3, 3, 4, 4, 3, 3, 4)
Digits = rep(0, dim(t)[2]+1)
Digits = c(0, 0, 0, 1, 0, 0, 0)
print(
  xtable(
    t,
    digits = Digits,
    align = c("M{0cm}|", "|M{1.2cm}|", rep("M{1.4cm}|", dim(t)[2] - 2), "N"),
    caption = "Résultats d'analyse dendrométrique et économique des tiges de franc-pied répartis par qualité (précomptables uniquement)",
    label = "TabQual_Disp"
  ),
  caption.placement = "bottom",
  hline.after = c(-1, 0),
  sanitize.text.function = function(x){return(x)},
  include.rownames = F,
  add.to.row = list(
    pos = ListPos,
    command = Command_Height),
  size="\\footnotesize"
)
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
}

# ---------- Phrase
t_Sentence <-
  gfForetDen_Reg2 %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  select(Cycle, Reg2, Gha) %>%
  group_by(Cycle) %>%
  mutate(Tot_Gha=sum(Gha)) %>%
  ungroup() %>%
  mutate(Part_Gha = round(Gha / Tot_Gha * 100, 0)) %>%
  filter(Reg2 == "A+B") %>%
  select(Part_Gha) %>%
  unlist()

@
\FloatBarrier
Le pourcentage d'individus de qualité A+B est de \textbf{\Sexpr{paste0(t_Sentence," \\%")}}.

<<TabQualDisp_Ancien, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, include=F, eval=F>>=
# a <- filter(gfForetFpied_Reg2, Cycle == DernierCycle & NumForet == Choix),
#             select=c(Foret,Reg2,Nha,Gha,Vha,AcctG,AcctV)) %>%
#   rename_("N"="Nha",
#          "G"="Gha",
#          "V"="Vha",
#          "Qualité"="Reg2")#,VhaIFN
# Digits = c(rep(0,4),rep(1,dim(a)[2]-3))
# # 1,0,0,2,2)
# a <- MultiRow(a,1)
# print(xtable(a,
#              digits=Digits,
#              caption = "Principales caractéristiques dendrométriques à l'échelle de la forêt par regroupement de qualité.\\\\\\footnotesize{N = densité de tiges (/ha)\\\\G = surface terrière (m\\up{2}/ha)\\\\V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
#              label = "TabQualDisp"),
#       caption.placement = "bottom",
#       include.rownames=F,
#       sanitize.text.function=function(x){return(x)},
#       size="\\footnotesize")




t <- filter(gfForetDen_Reg1,
                Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         AcctG=round(AcctG,1),
         AcctGper=round(AcctGper,1),
         AcctV=round(AcctV,1),
         AcctVper=round(AcctVper,1)) %>%
      melt(id=c("NumForet","Foret","Cycle","Reg1","NbrePlacettes")) %>%
      mutate(value=round(value,2)) %>%
      dcast(list(c("NumForet","Cycle","Foret","Reg1","NbrePlacettes"),"variable")) %>% #,"NbrePlacettes"
      mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,1),"-",round(Nha+Er_Nha*Nha/100,1),"]"),
             IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
             IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,1),"-",round(Vha+Er_Vha*Vha/100,1),"]"),
             IC_VhaIFN=paste0("[",round(VhaIFN-Er_VhaIFN*VhaIFN/100,1),"-",round(VhaIFN+Er_VhaIFN*VhaIFN/100,1),"]"),
             IC_AcctGper=paste0("[",round(AcctGper-Er_AcctGper*AcctGper/100,1),"-",round(AcctGper+Er_AcctGper*AcctGper/100,1),"]"),
             IC_AcctVper=paste0("[",round(AcctVper-Er_AcctVper*AcctVper/100,1),"-",round(AcctVper+Er_AcctVper*AcctVper/100,1),"]")) %>%
      melt(id=c("NumForet","Cycle","Foret","Reg1","NbrePlacettes")) %>%
      mutate(stat=variable,
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"_AcctGper",""),
             stat=str_replace(stat,"_AcctVper",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=str_replace(stat,"AcctGper","Moy"),
             stat=str_replace(stat,"AcctVper","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC"))) %>%
      filter(!is.na(stat)) %>%
      arrange(Cycle,variable,stat) %>%
      dcast(list(c("NumForet","Cycle","Foret","Reg1","NbrePlacettes","stat"),"variable")) %>%
      arrange(NumForet,Cycle,Reg1)#,"NbrePlacettes"
LQual <- length(na.omit(unique(t$Reg1)))
    t2 <- select_(t,"Cycle","Reg1","stat","Nha","Gha","Vha","AcctGper","AcctVper","NbrePlacettes") %>%
      mutate(stat=str_replace(stat,"Moy","Moyenne"), # Mise en forme du tableau
             stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
             stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
             stat=str_replace(stat,"IC","Intervalle de confiance"))
    t3 <- MultiRow(t2,c(1,2,dim(t2)[2])) %>%
      rename_("Qualité"="Reg1",
              "N"="Nha",
              "G"="Gha",
              "V"="Vha",
              # "Population"="Cat",
              "Nombre de placettes"="NbrePlacettes",
              " "="stat")
    ListPos <- list()
    for (i in 2:(dim(t3)[1]-1)) {
      ListPos[length(ListPos)+1] <- i
    }
        ListPos_Qual <- list()
    for (i in 2:(dim(t3)[1]-1)) {
      if (!is.na(t3[i,"Qualité"])) {
      ListPos_Qual[length(ListPos_Qual)+1] <- i-1
      }
    }

# IndQual <- data.frame(Critères=c("Qualité (m2/ha)",NA),Indicateurs=a$Reg1, Valeurs=a$Gha)
    print(xtable(t3,
                 caption = "Principales caractéristiques dendrométriques à l'échelle de la forêt par regroupement de qualité.\\\\\\scriptsize{N = densité de tiges (/ha)\\\\G = surface terrière (m\\up{2}/ha)\\\\V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
                 caption.placement = "top",
                 digits=c(rep(0,4),rep(1,dim(t3)[2]-6),2,1,1),
                 align=c("|M{0.5cm}|","M{0.7cm}|","M{1.5cm}|","M{1.8cm}|",rep("M{1.4cm}|",dim(t3)[2]-4),"M{1.5cm}"),
                 # ,"M{1.5cm}"),
                 label = "TabQualDisp"),
          include.rownames=FALSE,
          sanitize.text.function=function(x){return(x)},
          hline.after=c(-1,0,dim(t3)[1]),
          add.to.row=list(
            pos=c(ListPos,ListPos_Qual),
            command=c(rep("\\cline{3-8}",length(ListPos)),
                      rep("\\cline{2-8}",length(ListPos_Qual)))),
          size="\\footnotesize")
@

<<QualCatEss, echo=F, fig.pos='H', fig.height=4, fig.cap="Répartition de la surface terrière par qualité et par classe de diamètre (précomptables uniquement)", include = Eval_Qual, eval = Eval_Qual>>=
    tab <- filter(gfForetDen_ClasseReg1,
                  Cycle == DernierCycle & NumForet == Choix) %>%
      select(Classe,Reg1,Nha,Gha,Vha) %>%
      mutate(Reg1=factor(Reg1,levels=c("D","C","B","A"))) %>% #c("A","B","C","D")
      # Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")),
      rename_("N"="Nha",
              "G"="Gha",
              "V"="Vha",
              "Qualité"="Reg1")

    tab_lim <- group_by(tab,
                        Classe) %>%
      summarise(G=sum(G,na.rm=T),
                N=sum(N,na.rm=T)) %>%
      ungroup()


QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

X=max(tab$Classe)
Y=max(tab_lim$N)
label=paste0("N = ",round(sum(tab$N),0)," tiges/ha")

if (dim(temp)[1] > 0) {
    X <- max(temp$Classe,na.rm=T)
    Y <- max(temp$Nha_Max,na.rm=T)
  } else {
    X=80
    Y=20
  }

# by_VALUE <- ifelse(Y > 150,
#                    20,10)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p1 <- ggplot() +
  geom_bar(tab,
           mapping=aes(Classe, N, fill=Qualité),
           stat="identity", position="stack") +
  geom_label(data.frame(x=c(X*0.9),
                        y=c(Y*1.0),
                        label=label),
             mapping=aes(x,y,label=label),
             size=2,
             col="black",position="dodge",
             label.padding=unit(0.1, "lines"),alpha=1) +
  # scale_fill_grey(name="Qualité",start = 0.1, end = 0.9) +
  scale_fill_manual(name="Qualités de\nbille de pied",
                    values=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),10)) +
  scale_y_continuous(limits=c(0,
                              max(tab_lim$N)*1.1),
                     expand=c(0,0),
                     breaks=seq(0,max(tab_lim$N,na.rm=T)*1.3,by_VALUE)) + #ceiling(max(tab_lim$G)/5)
  labs(x="", fill="",y="N (tiges/ha)") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p2 <- ggplot(tab, aes(Classe, N, fill=Qualité)) +
  geom_bar(stat="identity", position="fill") +
  # scale_fill_grey(name="Qualité",start = 0.1, end = 0.9) +
  scale_fill_manual(name="Qualités de\nbille de pied",
                    values=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),10)) +
  scale_y_continuous(labels=percent) +
  labs(x="", fill="",y="Part de N (%)") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.position="bottom",
                   legend.direction="horizontal")



X=max(tab$Classe)
Y=max(tab_lim$G)
label=paste0("G = ",round(sum(tab$G),1)," m2/ha")

p3 <- ggplot() +
  geom_bar(tab,
           mapping=aes(Classe, G, fill=Qualité),
           stat="identity", position="stack") +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=label),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  # scale_fill_grey(name="Qualité",start = 0.1, end = 0.9) +
  scale_fill_manual(name="Qualités de\nbille de pied",
                    values=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),10)) +
  scale_y_continuous(limits=c(0,
                              max(tab_lim$G)*1.1),
                     expand=c(0,0),
                     breaks=seq(0,max(tab_lim$G,na.rm=T)*1.3,0.5)) + #ceiling(max(tab_lim$G)/5)
  labs(x="", fill="",y="G (m2/ha)") +
  MyTheme1 + theme(legend.title=element_text(size=9))

p4 <- ggplot(tab, aes(Classe, G, fill=Qualité)) +
  geom_bar(stat="identity", position="fill") +
  # scale_fill_grey(name="Qualité",start = 0.1, end = 0.9) +
  scale_fill_manual(name="Qualités de\nbille de pied",
                    values=QualPalette) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(0,max(tab$Classe,na.rm=T),10)) +
  scale_y_continuous(labels=percent) +
  labs(x="", fill="",y="Part de G (%)") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.position="bottom",
                   legend.direction="horizontal")

mylegend <- g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=2, heights=rep(1,2)),
             mylegend, nrow=2,heights=c(9, 1))

#
#
# t <- filter(gfForetFpied_CatReg1,
#                 Cycle == DernierCycle & NumForet == Choix) %>%
#       melt(id=c("NumForet","Foret","Cycle","Cat","Reg1","NbrePlacettes")) %>%
#       mutate(value=round(value,2)) %>%
#       dcast(list(c("NumForet","Cycle","Foret","Cat","Reg1","NbrePlacettes"),"variable")) %>% #,"NbrePlacettes"
#       mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,1),"-",round(Nha+Er_Nha*Nha/100,1),"]"),
#              IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
#              IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,1),"-",round(Vha+Er_Vha*Vha/100,1),"]"),
#              IC_VhaIFN=paste0("[",round(VhaIFN-Er_VhaIFN*VhaIFN/100,1),"-",round(VhaIFN+Er_VhaIFN*VhaIFN/100,1),"]"),
#              IC_AcctG=paste0("[",round(AcctG-Er_AcctG*AcctG/100,1),"-",round(AcctG+Er_AcctG*AcctG/100,1),"]"),
#              IC_AcctV=paste0("[",round(AcctV-Er_AcctV*AcctV/100,1),"-",round(AcctV+Er_AcctV*AcctV/100,1),"]")) %>%
#       melt(id=c("NumForet","Cycle","Foret","Cat","Reg1","NbrePlacettes")) %>%
#       mutate(stat=variable,
#              variable=str_replace(variable,"CV_",""),
#              variable=str_replace(variable,"Er_",""),
#              variable=str_replace(variable,"IC_",""),
#              stat=str_replace(stat,"_Nha",""),
#              stat=str_replace(stat,"_Gha",""),
#              stat=str_replace(stat,"_Vha",""),
#              stat=str_replace(stat,"_AcctG",""),
#              stat=str_replace(stat,"_AcctV",""),
#              stat=str_replace(stat,"Nha","Moy"),
#              stat=str_replace(stat,"Gha","Moy"),
#              stat=str_replace(stat,"Vha","Moy"),
#              stat=str_replace(stat,"AcctG","Moy"),
#              stat=str_replace(stat,"AcctV","Moy"),
#              stat=factor(stat,levels=c("Moy","CV","Er","IC"))) %>%
#       filter(!is.na(stat)) %>%
#       arrange(Cycle,variable,stat) %>%
#       dcast(list(c("NumForet","Cycle","Foret","Cat","Reg1","NbrePlacettes","stat"),"variable")) %>%
#       arrange(NumForet,Cycle,Cat,Reg1)#,"NbrePlacettes"
#     t2 <- select_(t,"Cycle","Cat","Reg1","stat","Nha","Gha","Vha","AcctG","AcctV","NbrePlacettes") %>%
#       mutate(stat=str_replace(stat,"Moy","Moyenne"), # Mise en forme du tableau
#              stat=str_replace(stat,"CV","Coefficient de variation"),
#              stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
#              stat=str_replace(stat,"IC","Intervalle de confiance"))
#     t3 <- MultiRow(t2,c(1,2,dim(t2)[2])) %>%
#       rename_("N"="Nha",
#               "G"="Gha",
#               "V"="Vha",
#               # "Population"="Cat",
#               # "Nombre de placettes"="NbrePlacettes",
#               " "="stat")
#     ListPos <- list()
#     for (i in 1:(dim(t3)[1]-1)) {
#       ListPos[i] <- i
#     }
# # IndQual <- data.frame(Critères=c("Qualité (m2/ha)",NA),Indicateurs=a$Reg2, Valeurs=a$Gha)
#     print(xtable(t3,
#                  caption = "Principales caractéristiques dendrométriques à l'échelle de la forêt par regroupement de qualité.\\\\\\footnotesize{N = densité de tiges (/ha)\\\\G = surface terrière (m\\up{2}/ha)\\\\V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
#                  caption.placement = "top",
#                  digits=c(rep(0,4),rep(1,dim(t3)[2]-6),2,1,1),
#                  align=c("|M{0.5cm}|","M{0.7cm}|","M{1.5cm}|","M{1.8cm}|",rep("M{1cm}|",dim(t3)[2]-4),"M{1cm}"),
#                  # ,"M{1.5cm}"),
#                  label = "TabMoyDisp"),
#           include.rownames=FALSE,
#           sanitize.text.function=function(x){return(x)},
#           hline.after=c(-1,0,dim(t3)[1]),
#           add.to.row=list(
#             pos=ListPos,
#             command=if (dim(t3)[1] > 4) {
#               c(rep(c(rep("\\cline{3-8}",3),"\\cmidrule[0.8pt]{2-8}"),length(unique(!is.na(t3$Reg2)))-1),
#                 rep("\\cline{3-8}",3))} else {
#                   rep("\\cline{3-8}",3)}))
@
\FloatBarrier

La figure \ref{fig:HistoQualCat} illustre les principales variables dendrométriques et économiques réparties par classes de diamètre et par qualités.%pour chaque catégorie de diamètre l'importance (absolue et relative) des qualités. On a décliné cet aperçu pour la densité de tiges, la surface terrière, ainsi que pour les valeurs de consommation et potentielle.

<<HistoQualCat, echo=F, fig.pos="H", size='footnotesize', include = Eval_Qual, eval = Eval_Qual, error=F, comment=F, warning=F, message=F, fig.height=ifelse(DernierCycle==1,6,10), fig.cap="Répartition de la qualité par catégories de diamètre", fig.pos="H">>=

# --- Préparation table nécessaire
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")


# ----- Préparation table histogrammes qualités
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

# ----- Repères pour figures
Niveaux_Reg1 <- c("A","B","C","D")
Niveaux_Reg2 <- Niveaux_Reg1[length(Niveaux_Reg1):1]


if (DernierCycle > 1) {
t_Histo_Base <- filter(gfForetDen_CatReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Cat,Reg1,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Cat,Reg1) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat),
         Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Cat,Reg1)

# <<\\Sexpr{paste0("TabMoyDisp_EssenceCat_",Essence3)},, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=

# t <- filter(t_Base,
#             Essence==Essence3) %>%
#   select(-one_of("Essence"))



# ----- Tables
# t_Histo <- filter(t_Histo_Base,
#                   Essence==Essence1)
t_Histo <- t_Histo_Base

tab_lim <- group_by(t_Histo,
                    Cat) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup()

X=length(unique(tab_lim$Cat))

Y=max(tab_lim$N,na.rm=T)

# if (dim(temp)[1] > 0) {
#     X <- max(temp$Classe,na.rm=T)
#     Y <- max(temp$Nha_Max,na.rm=T)
#   } else {
#     X=80
#     Y=20
#   }

# by_VALUE <- ifelse(Y > 150,
#                    20,10)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

# ----- Figures
pA <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=N, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$N,na.rm=T),
  #          label=paste("N =",
  #                      round(sum(t_Histo$N,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("N = ",
                       round(sum(t_Histo$N,na.rm=T),0),
                       " tiges/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0, # expand=c(0,0),
  #                             max(tab_lim$N) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$N) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$N)/6/0.5+0.5)*0.5)) +
scale_y_continuous(limits=c(0, # expand=c(0,0),
                            max(tab_lim$N)*1.1),
                     breaks=seq(0,max(tab_lim$N)*1.3,by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="N (tiges/ha)", x="Catégories de diamètre") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

pB <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=N, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de N (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

Y=max(tab_lim$G,na.rm=T)
by_VALUE <- ifelse(Y > 15,
                   2,1)

p1 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=G, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$G,na.rm=T),
  #          label=paste("G =",
  #                      round(sum(t_Histo$G,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("G = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " m2/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0, # expand=c(0,0),
  #                             max(tab_lim$G) +
  #                                 floor(max(tab_lim$G)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$G) +
  #                                 floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$G)/6/0.5+0.5)*0.5)) +
scale_y_continuous(limits=c(0, # expand=c(0,0),
                            max(tab_lim$G)*1.1),
                     breaks=seq(0,max(tab_lim$G)*1.3,by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="G (m2/ha)", x="Catégories de diamètre") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p2 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=G, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de G (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

Y=max(tab_lim$Vc,na.rm=T)
# by_VALUE <- ifelse(Y > 5000,
#                    500,100)
# ifelse(Y <= 1500,
#        100,)
# ifelse(Y <= 2250,
#        150)
# ifelse(Y <= 3000,
#        200)
# ifelse(Y <= 5250,
#        350,)
# ifelse()
# floor(Y/50+0.5)*50
# by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p3 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vc, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc =",
  #                      round(sum(t_Histo$Vc,na.rm=T),0),
  #                      " euros/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("Vc = ",
                       round(sum(t_Histo$Vc,na.rm=T),0),
                       " euros/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0,
  #                             max(tab_lim$Vc) +
  #                                 floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$Vc) +
  #                                 floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
 scale_y_continuous(limits=c(0,
                              max(tab_lim$Vc)*1.1),
                     breaks=seq(0,
                                max(tab_lim$Vc)*1.3,
                                by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="Vc (euros/ha)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p4 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vc, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc/ha =",
  #                      round(sum(t_Histo$Vc,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de Vc (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")


Y=max(tab_lim$Vp,na.rm=T)
# by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p5 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vp, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$Vp,na.rm=T),
  #          label=paste("Vp =",
  #                      round(sum(t_Histo$Vp,na.rm=T),0),
  #                      " euros/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("Vp = ",
                       round(sum(t_Histo$Vp,na.rm=T),0),
                       " euros/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0,
  #                             max(tab_lim$Vp) +
  #                                 floor(max(tab_lim$Vp)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$Vp) +
  #                                 floor(max(tab_lim$Vp)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$Vp)/6/0.5+0.5)*0.5)) +
  scale_y_continuous(limits=c(0,
                              max(tab_lim$Vp)*1.1),
                     breaks=seq(0,
                                max(tab_lim$Vp)*1.3,
                                by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="Vp (euros/ha)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p6 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vp, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc/ha =",
  #                      round(sum(t_Histo$Vc,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de Vp (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

mylegend <- g_legend(p1)

# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(arrangeGrob(pA + theme(legend.position="none"),
                         pB + theme(legend.position="none"),
                         p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         p5 + theme(legend.position="none"),
                         p6 + theme(legend.position="none"),
                         nrow=4, heights=rep(1,4)),
             mylegend,nrow=2,heights=c(12,1)) # c(8,1)
}



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 Cycle %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if (DernierCycle == 1) {
t_Histo_Base <- filter(gfForetDen_CatReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Cat,Reg1,
         Nha,Gha,Vha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  group_by(Cat,Reg1) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat),
         Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Cat,Reg1)

# <<\\Sexpr{paste0("TabMoyDisp_EssenceCat_",Essence3)},, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=

# t <- filter(t_Base,
#             Essence==Essence3) %>%
#   select(-one_of("Essence"))



# ----- Tables
# t_Histo <- filter(t_Histo_Base,
#                   Essence==Essence1)
t_Histo <- t_Histo_Base

tab_lim <- group_by(t_Histo,
                    Cat) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T)) %>%
  ungroup()

X=length(unique(tab_lim$Cat))

Y=max(tab_lim$N,na.rm=T)

# if (dim(temp)[1] > 0) {
#     X <- max(temp$Classe,na.rm=T)
#     Y <- max(temp$Nha_Max,na.rm=T)
#   } else {
#     X=80
#     Y=20
#   }

# by_VALUE <- ifelse(Y > 150,
#                    20,10)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

# ----- Figures
pA <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=N, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$N,na.rm=T),
  #          label=paste("N =",
  #                      round(sum(t_Histo$N,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("N = ",
                       round(sum(t_Histo$N,na.rm=T),0),
                       " tiges/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0, # expand=c(0,0),
  #                             max(tab_lim$N) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$N) +
  #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$N)/6/0.5+0.5)*0.5)) +
scale_y_continuous(limits=c(0, # expand=c(0,0),
                            max(tab_lim$N)*1.1),
                     breaks=seq(0,max(tab_lim$N)*1.3,by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="N (tiges/ha)", x="Catégories de diamètre") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

pB <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=N, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de N (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

Y=max(tab_lim$G,na.rm=T)
by_VALUE <- ifelse(Y > 15,
                   2,1)

p1 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=G, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$G,na.rm=T),
  #          label=paste("G =",
  #                      round(sum(t_Histo$G,na.rm=T),1),
  #                      " m2/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("G = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " m2/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0, # expand=c(0,0),
  #                             max(tab_lim$G) +
  #                                 floor(max(tab_lim$G)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$G) +
  #                                 floor(max(tab_lim$G)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$G)/6/0.5+0.5)*0.5)) +
scale_y_continuous(limits=c(0, # expand=c(0,0),
                            max(tab_lim$G)*1.1),
                     breaks=seq(0,max(tab_lim$G)*1.3,by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="G (m2/ha)", x="Catégories de diamètre") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p2 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=G, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$V,na.rm=T),
  #          label=paste("V/ha =",
  #                      round(sum(t_Histo$V,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$V) +
                     #              floor(max(tab_lim$V)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$V)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de G (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

Y=max(tab_lim$Vc,na.rm=T)
# by_VALUE <- ifelse(Y > 5000,
#                    500,100)
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p3 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vc, fill=Reg1),
           stat = "identity", position = "stack", width=0.5) +
  # annotate("text",
  #          x=0.4*length(unique(tab_lim$Cat)), #*max(tab_lim$Cat,na.rm=T)
  #          y=1.1*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc =",
  #                      round(sum(t_Histo$Vc,na.rm=T),0),
  #                      " euros/ha"),
  #          colour="black", size=2.5) +
  geom_label(data.frame(x=c(X*0.9),
                          y=c(Y*1.0),
                          label=paste0("Vc = ",
                       round(sum(t_Histo$Vc,na.rm=T),0),
                       " euros/ha")),
               mapping=aes(x,y,label=label),
               size=2,
               col="black",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=1) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  # scale_y_continuous(limits=c(0,
  #                             max(tab_lim$Vc) +
  #                                 floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
  #                    breaks=seq(0,
  #                               max(tab_lim$Vc) +
  #                                 floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
  #                               floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
 scale_y_continuous(limits=c(0,
                              max(tab_lim$Vc)*1.1),
                     breaks=seq(0,
                                max(tab_lim$Vc)*1.3,
                                by_VALUE)) +
  labs(fill = "Qualités de\nbille de pied", y="Vc (euros/ha)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

p4 <- ggplot() +
  geom_bar(t_Histo,
           mapping=aes(x=Cat, y=Vc, fill=Reg1),
           stat = "identity", position = "fill", width=0.5) +
  # annotate("text",
  #          x=0.8*max(tab_lim$Classe,na.rm=T),
  #          y=0.8*max(tab_lim$Vc,na.rm=T),
  #          label=paste("Vc/ha =",
  #                      round(sum(t_Histo$Vc,na.rm=T),1),
  #                      " m3/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=QualPalette) +
  # scale_fill_brewer(palette=QualPalette) +
  # scale_x_continuous(expand=c(0,0),
  #                    limits=c(0,max(t_Histo$Cat)+5),
  #                    breaks=seq(0,max(t_Histo$Cat),20)) +
  scale_y_continuous(expand=c(0,0),
                     labels=percent) +
                     # ,
                     # limits=c(0,
                     #          max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5),
                     # breaks=seq(0,
                     #            max(tab_lim$Vc) +
                     #              floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5,
                     #            floor(max(tab_lim$Vc)/6/0.5+0.5)*0.5)) +
  labs(fill = "Qualités de\nbille de pied", y="Part de Vc (%)", x="Catégories de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")



mylegend <- g_legend(p1)

# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(arrangeGrob(pA + theme(legend.position="none"),
                         pB + theme(legend.position="none"),
                         p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=3, heights=rep(1,3)),
             mylegend,nrow=2,heights=c(12,1)) # c(8,1)
}
@
\FloatBarrier

\subsection{Analyse par essences}

<<Comment_2.4.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.4.2")
cat(Comment$Texte)
@

La figure \ref{fig:CompoRadar_QualEssence1} illustre la répartition de la surface terrière des individus précomptables des différentes essences (regroupées) par qualités. Elle est complétée par le tableau \ref{TabMoyDisp_EssenceQual}. Les essences sont triées par ordre de surface terrière décroissante.

<<CompoRadar_QualEssence1, echo=F, warning=F, size='footnotesize', fig.height=3, fig.cap="Importance relative des qualités sur la surface terrière des individus précomptables des différentes essences", fig.pos="H", include = Eval_Qual, eval = Eval_Qual>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssRegReg1,
#             Cycle == DernierCycle & NumForet == Choix &
#               Gha > 0) %>%
#   arrange(-Gha) %>%
#   rename(Essence=EssReg)

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <- filter(gfForetDen_EssRegReg1,
             Cycle == DernierCycle & NumForet == Choix &
              Gha > 0) %>%
  rename(Essence=EssReg) %>%
  select(Essence,Reg1,
         Nha,Gha,Vha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  # group_by(Essence,Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg2),
         Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Essence,Reg1)

t_Radar.m <- select(t_Radar,
                    Essence,Reg1,G) %>%
  group_by(Essence) %>%
  mutate(Tot=sum(G,na.rm=T),
         Ratio=G/Tot,
         RatioCum=cumsum(G/Tot)) %>%
  ungroup() %>%
  filter(!is.na(Ratio)) %>%
  mutate(label=NA,
         label=paste0(round(Ratio,2)*100," %")) %>%
  # if(variable=="Vha") {paste0(Essence," : ",round(value,0)," m3/ha")}) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg1),
         Reg1=factor(Reg1,levels=c("D","C","B","A"))) %>%
  arrange(Essence,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Essence) %>%
  summarise(G=mean(G,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=Essence, y=G, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Essence,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2, alpha=1, colour="black") +
    geom_label(t_Radar.m,
                     mapping=aes(x=Essence,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Essence,
  #                                       y=0.5,
  #                                       label=Essence),
  #                    size=2, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  # coord_polar(theta = "y") +
  coord_flip() +
  scale_x_discrete("") +
  scale_y_continuous(expand=c(0,0),
                     breaks=seq(0,1,0.1),
                     name="Part relative des essences",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual(name="Qualités de\nbille de pied :", values=QualPalette) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
@

<<TabMoyDisp_QualEssence, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
# ----- Ordre essences :
# t_Niveaux <- filter(gfForetDen_Essence,
#                     Cycle == DernierCycle & NumForet == Choix) %>%
#   arrange(-Gha)
# %>%
#   left_join(Essence_PPTetras[,c("Essence","Essence")], by="Essence")

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]
Essence1 <- Niveaux_Essence2[1]





t_Base <-
  gfForetDen_EssenceReg1 %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  group_by(Essence) %>%
  mutate(
    Gha = round(Gha, 1),

    Er_Gha = round(Er_Gha, 1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 1)
  ) %>%
  ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-1), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)} ",
        ifelse(!is.na(Er_Gha), paste0("\\textcolor{Gray}{±", Er_Gha, "\\%}}"), "}")
      ),
    Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
    Essence = factor(Essence, levels = Niveaux_Essence2)
  ) %>%
  select(Essence, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence, Reg1)

  # rename_("Reg1égorie de bois"="Reg1",
         #  "N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         # "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
         # "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
         # "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
         # "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
         # "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
         # "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
         # "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain")

t1 <-
  t_Base %>%
  dcast(Reg1 ~ Essence, value.var = "Gha") %>%
  rename_("Qualité" = "Reg1")

# ----- Impression -----
Digits = rep(0, dim(t1)[2] + 1)

Title <- paste0("Répartition des surfaces terrières des essences par qualités")

print(
  xtable(
    t1,
    caption = Title,
    caption.placement = "top",
    digits = Digits,
    align = c("M{0cm}|", "M{1.2cm}", rep("|M{1.3cm}", dim(t1)[2] - 1)),
    label = "TabMoyDisp_QualEssence"
  ),
  hline.after = -1:dim(t1)[1],
  sanitize.text.function = function(x){return(x)},
  include.rownames = FALSE,
  size = "\\footnotesize"
)
@

<<TabMoyDisp_QualEssence_Brouillon, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")


# ----- Préparation table histogrammes qualités
# ----- Préparation tables figures
QualPalette <- c("gray10","gray40","gray70","gray90")
names(QualPalette) <- c("A","B","C","D")
QualPalette <- "Greens"
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")


t_Histo_Base <- filter(gfForetDen_EssenceClasseReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Essence,Reg1,Classe,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  group_by(Essence,Reg1,Classe) %>%
  summarise(N=sum(N,na.rm=T),
            G=sum(G,na.rm=T),
            V=sum(V,na.rm=T),
            Vc=sum(Vc,na.rm=T),
            Vp=sum(Vp,na.rm=T)) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_Essence2),
         Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Essence,Reg1)

# <<\\Sexpr{paste0("TabMoyDisp_EssenceCat_",Essence3)},, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F>>=

t <- filter(t_Base,
            Essence==Essence3) %>%
  select(-one_of("Essence"))

# ----- Impression -----
Digits=rep(0,dim(t)[2]+1)

Title <- paste0("Résultats d'analyse pour l'essence ",
                              Essence3,
                              " à l'échelle de la forêt et par catégories de diamètre.\\\\\\scriptsize{N = densité de tiges (tiges/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)\\\\Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}")

print(xtable(t,
             caption = Title,
             caption.placement = "top",
             digits=Digits,
             align=c("M{0cm}|","M{1.2cm}",rep("|M{1.4cm}",dim(t)[2]-1)),
             label = paste0("TabMoyDisp_EssenceCat_",Essence3)),
      hline.after=-1:dim(t)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")
@
\FloatBarrier

% La figure \ref{fig:CompoRadar_QualEssence2} et le tableau \ref{TabMoyDisp_EssenceQual} présentent une autre répartition de la surface terrière des individus précomptables en illustrant cette fois-ci l'importance de chaque essence dans les quatre qualités.

% \textcolor{red}{Arrangement fait ici : ait choisi de garder l'histogramme montrant la part de chaque qualité dans les différentes essences + le tableau montrant la part de chaque essence dans chaque qualité => 1 histogramme et 1 tableau supprimés}

<<CompoRadar_QualEssence2, echo=F, warning=F, size='footnotesize', fig.height=2.5, fig.cap="Importance relative des différentes essences sur les surfaces terrières des différentes qualités", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssenceReg1,
#             Cycle == DernierCycle & NumForet == Choix) %>%
#   arrange(-Gha) %>%
#   left_join(Essences[,c("Nom","Reg")], by=c("Essence"="Nom"))

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <- filter(gfForetDen_EssenceReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Reg1,Essence,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  # group_by(Essence,Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_Essence2),
         Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Reg1,Essence)

t_Radar.m <- select(t_Radar,
                    Reg1,Essence,G) %>%
  group_by(Reg1) %>%
  mutate(Tot=sum(G,na.rm=T),
         Ratio=G/Tot,
         RatioCum=cumsum(G/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=paste0(round(Ratio,3)*100," %")) %>%
         # if(variable=="Vha") {paste0(Essence," : ",round(value,0)," m3/ha")}) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_Essence1),
         Reg1=paste0("Qualité ",Reg1),
         Reg1=factor(Reg1,levels=c("Qualité D","Qualité C","Qualité B","Qualité A"))) %>%
  arrange(Reg1,Essence)

# ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Reg1) %>%
  summarise(G=mean(G,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=Reg1, y=G, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Reg1,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2, alpha=1, colour="black") +
    geom_label(t_Radar.m,
                     mapping=aes(x=Reg1,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),

                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_flip() +
  scale_x_discrete("") +
  scale_y_continuous(expand=c(0,0),
                     breaks=seq(0,1,0.1),
                     name="Part relative des essences",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m$Essence)) > 8,
                                         round(length(unique(t_Radar.m$Essence))/6,0),1),
                             byrow=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank())
    # panel.border=element_blank())
@

<<TabMoyDisp_EssenceQual, echo=F, results='asis', fig.pos="H", include = Eval_Qual, eval = Eval_Qual>>=


#### Nouvel essai ###
Version2 = T
if (Version2 == T) {
t_Base <-
  gfForetDen_EssRegReg1 %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  rename(Essence = EssReg) %>%
  group_by(Reg1) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  ungroup() %>%
  filter(Gha != 0) %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    # Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}"
      ),
    Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
    Essence = factor(Essence, levels = Niveaux_EssReg2)
  ) %>%
  select(Essence, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence, Reg1)

# --- Total
t_TOT1 <-
  gfForetDen_Reg1 %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  group_by(Reg1) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha = round(Er_Gha, 1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 1)
  ) %>%
  ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\textbf{\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}}"
      ),
    Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
    Essence="\\rowcolor{LightGray} \\textbf{Total par qualités}"
  ) %>%
  select(Essence, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence, Reg1)

# -- Total des essences (colonne total en bout de tableau)
t_TOT2 <-
  gfForetDen_EssReg %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  rename(Essence = EssReg) %>%
  # group_by(Essence) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  # ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\cellcolor{LightGray} \\textbf{\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{Brown}{(", Part_Gha, "\\%)}}}"
      ),
    Reg1="\\cellcolor{LightGray} \\textbf{Total par essences}"
  ) %>%
  select(Essence, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence, Reg1)

# -- Total des totaux
t_TOT3 <-
  gfForetDen_ %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\cellcolor{DimGray} \\textbf{\\textcolor{White}{\\footnotesize{", Gha,
        "} \\scriptsize{(", Part_Gha, "\\%)}}}"
      ),
    Essence="\\rowcolor{LightGray} \\textbf{Total par qualités}",
    Reg1="\\cellcolor{LightGray} \\textbf{Total par essences}"
  ) %>%
  select(Essence, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence, Reg1)

t_Base <- rbind(t_Base, t_TOT1, t_TOT2, t_TOT3)
# t_Base2 <- rbind(t_Base,t_TOT2)



t1 <-
  t_Base %>%
  dcast(Essence ~ Reg1, value.var = "Gha") %>%
  rename_("Essences"="Essence")
names(t1) <- paste0("\\textbf{", names(t1), "}")

# ----- Impression -----
Digits = rep(0, dim(t1)[2] + 1)

Title <- paste0("Répartition de la surface terrière des qualités par essence")

print(
  xtable(
    t1,
    caption = Title,
    caption.placement = "top",
    digits = Digits,
    align = c("M{0cm}|", "|M{2.4cm}|", rep("M{2cm}|", dim(t1)[2] - 1)),
    label = "TabMoyDisp_EssenceQual"
  ),
  hline.after = -1:dim(t1)[1],
  sanitize.text.function = function(x) {return(x)},
  include.rownames = FALSE,
  size = "\\footnotesize"
)

#### Version Actuelle ###
} else {
t_Base <- filter(gfForetDen_EssRegReg1,
             Cycle == DernierCycle &
               NumForet == Choix &
                      Gha > 0) %>%
  rename(Essence=EssReg) %>%
  group_by(Reg1) %>%
  mutate(Gha=ifelse(Gha < 1,
                    round(Gha,2),
                    round(Gha,0)),

         # Er_Gha=round(Er_Gha,1),

         Tot_Gha=sum(Gha,na.rm=T),

         Part_Gha=round(Gha/Tot_Gha*100,0)) %>%
  ungroup() %>%
  filter(Gha!=0) %>%
  mutate(Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
         Reg1=factor(Reg1,levels=c("A","B","C","D")),
         Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
  select(Essence,Reg1,Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence,Reg1)

  # rename_("Reg1égorie de bois"="Reg1",
         #  "N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         # "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
         # "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
         # "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
         # "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
         # "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
         # "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
         # "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain")

# --- Total
t_TOT1 <- filter(gfForetDen_Reg1,
             Cycle == DernierCycle &
               NumForet == Choix &
                      Gha > 0) %>%
  group_by(Reg1) %>%
  mutate(Gha=round(Gha,1),

         # Er_Gha=round(Er_Gha,1),

         Tot_Gha=sum(Gha,na.rm=T),

         Part_Gha=round(Gha/Tot_Gha*100,0)) %>%
  ungroup() %>%
  mutate(Gha=ifelse(Gha!=0,
                    paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    ""),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
         Reg1=factor(Reg1,levels=c("A","B","C","D")),
         Essence="\\rowcolor{LightGray} \\textbf{Total par qualités}") %>%
  select(Essence,Reg1,Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence,Reg1)

# -- Total des essences (colonne total en bout de tableau)
t_TOT2 <- filter(gfForetDen_EssReg,
             Cycle == DernierCycle &
               NumForet == Choix &
                      Gha > 0) %>%
  rename(Essence=EssReg) %>%
  # group_by(Essence) %>%
  mutate(Gha=round(Gha,1),

         # Er_Gha=round(Er_Gha,1),

         Tot_Gha=sum(Gha,na.rm=T),

         Part_Gha=round(Gha/Tot_Gha*100,0)) %>%
  # ungroup() %>%
  mutate(Gha=ifelse(Gha!=0,
                    paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{Brown}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    "\\cellcolor{LightGray}"),
         Reg1="\\cellcolor{LightGray} \\textbf{Total par essences}") %>%
  select(Essence,Reg1,Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence,Reg1)

# -- Total des totaux
t_TOT3 <- filter(gfForetDen_,
             Cycle == DernierCycle &
               NumForet == Choix &
                      Gha > 0) %>%
  mutate(Gha=round(Gha,1),

         # Er_Gha=round(Er_Gha,1),

         Tot_Gha=sum(Gha,na.rm=T),

         Part_Gha=round(Gha/Tot_Gha*100,0)) %>%
  mutate(Gha=ifelse(Gha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{(",
                    Part_Gha,
                    "\\%)}}}"),
                    "\\cellcolor{DimGray}"),
         Essence="\\rowcolor{LightGray} \\textbf{Total par qualités}",
         Reg1="\\cellcolor{LightGray} \\textbf{Total par essences}") %>%
  select(Essence,Reg1,Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Essence,Reg1)

t_Base <- rbind(t_Base,t_TOT1,t_TOT2,t_TOT3)
# t_Base2 <- rbind(t_Base,t_TOT2)



t1 <- dcast(t_Base,
            Essence ~ Reg1,
          value.var="Gha") %>%
  rename_("Essences"="Essence")
names(t1) <- paste0("\\textbf{",names(t1),"}")

# ----- Impression -----
Digits=rep(0,dim(t1)[2]+1)

Title <- paste0("Répartition de la surface terrière des qualités par essence")

print(xtable(t1,
             caption = Title,
             caption.placement = "top",
             digits=Digits,
             align=c("M{0cm}|","|M{2.4cm}|",rep("M{2cm}|",dim(t1)[2]-1)),
             label = "TabMoyDisp_EssenceQual"),
      hline.after=-1:dim(t1)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")
}
@
\FloatBarrier

\subsection{Analyse par structure}

<<Comment_2.4.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.4.3")
cat(Comment$Texte)
@

La figure \ref{fig:CompoRadar_QualStructure1} et le tableau \ref{TabMoyDisp_CatQual} illustrent la répartition de la surface terrière de précomptables par catégories de diamètre, en distinguant les différentes qualités.
% \textcolor{red}{Arrangement fait ici : ait choisi de garder l'histogramme montrant la part de chaque qualité dans les différentes Catégories de diamètre + le tableau montrant la part de chaque Catégorie de diamètre dans chaque qualité => 1 histogramme et 1 tableau supprimés}

<<CompoRadar_QualStructure1, echo=F, warning=F, size='footnotesize', fig.height=2.5, fig.cap="Importance relative sur la surface terrière des différentes qualités de bois", fig.pos="H", include = Eval_Qual, eval = Eval_Qual>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)

# t_Niveaux <- filter(gfForetDen_CatReg1,
#             Cycle == DernierCycle & NumForet == Choix) %>%
#   arrange(-Vha) %>%
#   left_join(EssReg_PPTetras[,c("Essence","EssReg")], by="Essence")
#
# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t_Niveaux$EssReg)
# Niveaux_EssReg2 <- Niveaux_EssReg1[length(Niveaux_EssReg1):1]

t_Radar <- filter(gfForetDen_CatReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Cat,Reg1,
         Nha,Gha,Vha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa) %>%
  # group_by(EssReg,Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB")),
         Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Cat,Reg1)

t_Radar.m <- select(t_Radar,
                    Cat,Reg1,G) %>%
  group_by(Cat) %>%
  mutate(Tot=sum(G,na.rm=T),
         Ratio=G/Tot,
         RatioCum=cumsum(G/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=paste0(round(Ratio,2)*100," %")) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("TGB", "GB", "BM", "PB","PER")),
         Reg1=factor(Reg1,levels=c("D","C","B","A"))) %>%
  arrange(Cat,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Cat) %>%
  summarise(G=mean(G,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=Cat, y=G, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cat,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2, alpha=1, colour="black") +
  geom_label(t_Radar.m,
                     mapping=aes(x=Cat,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_flip() +
  scale_x_discrete("") +
  scale_y_continuous(expand=c(0,0),
                     breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  # scale_fill_manual("Essences\nregroupées :", values=QualPalette) +
  # scale_fill_brewer("Qualités de\nbille de pied :", palette=QualPalette) +
    scale_fill_manual("Qualités de\nbille de pied :", values=QualPalette) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    # panel.grid.major = element_blank(),
    panel.border=element_blank(),
    plot.margin = unit(c(0.1,0.3,0.1,0.1), "cm"))
@

<<TabMoyDisp_QualCat, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
# ----- Ordre essences :
# t_Niveaux <- filter(gfForetDen_Essence,
#                     Cycle == DernierCycle & NumForet == Choix) %>%
#   arrange(-Gha)
# # %>%
# #   left_join(EssReg_PPTetras[,c("Essence","EssReg")], by="Essence")
#
# # ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]








t_Base <- filter(gfForetDen_CatReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  group_by(Cat) %>%
  # mutate(Gha=round(Gha,1),
  #
  #        Er_Gha=round(Er_Gha,1),
  #
  #        Tot_Gha=sum(Gha,na.rm=T),
  #
  #        Part_Gha=round(Gha/Tot_Gha*100,1)) %>%
  mutate(Tot_Gha=sum(Gha,na.rm=T),

         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha >= 1,
                    round(Part_Gha,digits=0),
                    Part_Gha)) %>%
  ungroup() %>%
  mutate(Part_Gha=ifelse(Part_Gha > 0 & Part_Gha < 1,
                    "$\\approx$0",
                    Part_Gha),

         Gha=ifelse(Gha > 0 & Gha >= 10^(-1),
                    round(Gha,digits=1),
                    Gha),
         Gha=ifelse(Gha > 0 & Gha < 10^(-1),
                    "$\\approx$0",
                    Gha),

         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)} ",
                    ifelse(!is.na(Er_Gha),
                           paste0("\\textcolor{Gray}{±",
                                  Er_Gha,
                                  "\\%}}"),
                           "}")),
         Reg1=factor(Reg1,levels=c("A","B","C","D")),
         Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB"))) %>%
  # c("TGB", "GB", "BM", "PB","PER")
  select(Cat,Reg1,Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg1)

  # rename_("Reg1égorie de bois"="Reg1",
         #  "N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         # "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha",
         # "V\\hspace{1.2cm}\\scriptsize{(m3/ha)}"="Vha",
         # "AcctG\\hspace{1.2cm}\\scriptsize{(m2/ha/an)}"="AcctG",
         # "AcctV\\hspace{1.2cm}\\scriptsize{(m3/ha/an)}"="AcctV",
         # "Vc\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VcHa",
         # "Vp\\hspace{1.2cm}\\scriptsize{(\\euro/ha)}"="VpHa",
         # "Gain\\hspace{1.2cm}\\scriptsize{(\\euro/ha/an)}"="Gain")

t1 <- dcast(t_Base,
            Reg1 ~ Cat,
          value.var="Gha") %>%
  rename_("Qualité"="Reg1")

# ----- Impression -----
Digits=rep(0,dim(t1)[2]+1)

Title <- paste0("Répartition des volumes de catégories de diamètre par qualités")

print(xtable(t1,
             caption = Title,
             caption.placement = "top",
             digits=Digits,
             align=c("M{0cm}|","M{1.2cm}",rep("|M{1.3cm}",dim(t1)[2]-1)),
             label = "TabMoyDisp_QualCat"),
      hline.after=-1:dim(t1)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")
@
\FloatBarrier

% La figure \ref{fig:CompoRadar_QualStructure2} présente une répartition du volume envisagée par qualité de billes de pied, selon les différentes catégories de diamètre. Elle est complétée par le tableau \ref{TabMoyDisp_CatQual}.

<<CompoRadar_QualStructure2, echo=F, warning=F, size='footnotesize', fig.height=2.5, fig.cap="Importance relative des catégories de diamètre sur les volumes des différentes qualités", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)

# t_Niveaux <- filter(gfForetFpied_CatReg1,
#             Cycle == DernierCycle & NumForet == Choix) %>%
#   arrange(-Vha) %>%
#   left_join(EssReg_PPTetras[,c("Essence","EssReg")], by="Essence")
#
# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t_Niveaux$EssReg)
# Niveaux_EssReg2 <- Niveaux_EssReg1[length(Niveaux_EssReg1):1]

t_Radar <- filter(gfForetDen_CatReg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Reg1,Cat,
         Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa) %>%
  # group_by(EssReg,Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB")),
         Reg1=factor(Reg1,levels=c("A","B","C","D"))) %>%
  arrange(Reg1,Cat)

t_Radar.m <- select(t_Radar,
                    Reg1,Cat,G) %>%
  group_by(Reg1) %>%
  mutate(Tot=sum(G,na.rm=T),
         Ratio=G/Tot,
         RatioCum=cumsum(G/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=paste0(round(Ratio,2)*100," %")) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=c("TGB", "GB", "BM", "PB","PER")),
         Reg1=paste0("Qualité ",Reg1),
         Reg1=factor(Reg1,levels=c("Qualité D","Qualité C","Qualité B","Qualité A"))) %>%
  arrange(Reg1,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Reg1) %>%
  summarise(G=mean(G,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=Reg1, y=G, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Reg1,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2, alpha=1, colour="black") +
  geom_label(t_Radar.m,
                     mapping=aes(x=Reg1,
                                 y=round(RatioCum-Ratio/2,3),

                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_flip() +
  scale_x_discrete("") +
  scale_y_continuous(expand=c(0,0),
                     breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m$Reg1)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    # panel.grid.major = element_blank(),
    panel.border=element_blank())
@

<<TabMoyDisp_CatQual, results='asis', fig.pos="H", include = Eval_Qual, eval = Eval_Qual>>=

#### Nouvel essai ###
Version2 = T
if (Version2 == T) {
t_Base <-
  gfForetDen_CatReg1 %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  group_by(Reg1) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  ungroup() %>%
  filter(Gha != 0) %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    # Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}"
      ),
    Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
    Cat =
      factor(
        Cat,
        levels = c(
          "PER",  "PB",  "BM",  "GB", "TGB",
          "\\rowcolor{LightGray} \\textbf{Total}"
        )
      )
  ) %>%
  select(Cat, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat, Reg1)

# --- Total
t_TOT1 <-
  gfForetDen_Reg1 %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  group_by(Reg1) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha = round(Er_Gha, 1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 1)
  ) %>%
  ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\textbf{\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}}"
      ),
    Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
    Cat="\\rowcolor{LightGray} \\textbf{Total par qualités}"
  ) %>%
  select(Cat, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat, Reg1)

# -- Total des Cats (colonne total en bout de tableau)
t_TOT2 <-
  gfForetDen_Cat %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  rename(Cat = Cat) %>%
  # group_by(Cat) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  # ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\cellcolor{LightGray} \\textbf{\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{Brown}{(", Part_Gha, "\\%)}}}"
      ),
    Reg1="\\cellcolor{LightGray} \\textbf{Total par catégories de bois}"
  ) %>%
  select(Cat, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat, Reg1)

# -- Total des totaux
t_TOT3 <-
  gfForetDen_ %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Gha > 0) %>%
  mutate(
    Gha = ifelse(Gha < 0.1, round(Gha, 2), round(Gha, 1)),

    # Er_Gha=round(Er_Gha,1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 0)
  ) %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\cellcolor{DimGray} \\textbf{\\textcolor{White}{\\footnotesize{", Gha,
        "} \\scriptsize{(", Part_Gha, "\\%)}}}"
      ),
    Cat="\\rowcolor{LightGray} \\textbf{Total par qualités}",
    Reg1="\\cellcolor{LightGray} \\textbf{Total par catégories de bois}"
  ) %>%
  select(Cat, Reg1, Gha) %>% #,VhaIFN # Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat, Reg1)

t_Base <- rbind(t_Base, t_TOT1, t_TOT2, t_TOT3)
# t_Base2 <- rbind(t_Base,t_TOT2)



t1 <-
  t_Base %>%
  dcast(Cat ~ Reg1, value.var = "Gha") %>%
  rename_("Cats"="Cat")
names(t1) <- paste0("\\textbf{", names(t1), "}")

# ----- Impression -----
Digits = rep(0, dim(t1)[2] + 1)

Title <- paste0("Répartition de la surface terrière des qualités par Cat")

print(
  xtable(
    t1,
    caption = Title,
    caption.placement = "top",
    digits = Digits,
    align = c("M{0cm}|", "|M{2.4cm}|", rep("M{2cm}|", dim(t1)[2] - 1)),
    label = "TabMoyDisp_CatQual"
  ),
  hline.after = -1:dim(t1)[1],
  sanitize.text.function = function(x) {return(x)},
  include.rownames = FALSE,
  size = "\\footnotesize"
)

#### Version Actuelle ###
} else {

t_Base <-
  gfForetDen_CatReg1 %>%
filter(Cycle == DernierCycle & NumForet == Choix) %>%
  group_by(Reg1) %>%
  mutate(
    Gha = ifelse(Gha < 1, round(Gha,2), round(Gha,0)),

    # Er_Gha = round(Er_Gha, 1),

    Tot_Gha = sum(Gha, na.rm = T),

    Part_Gha = round(Gha / Tot_Gha * 100, 1)
  ) %>%
  ungroup() %>%
  mutate(
    Part_Gha = ifelse(Part_Gha > 0 & Part_Gha < 1, "$\\approx$0", Part_Gha),

    Gha = ifelse(Gha > 0 & Gha >= 10^(-1), round(Gha, digits = 1), Gha),
    Gha = ifelse(Gha > 0 & Gha < 10^(-2), "$\\approx$0", Gha),

    Gha =
      paste0(
        "\\textbf{\\footnotesize{", Gha,
        "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_Gha, "\\%)}}}"
      ),
         Reg1 = factor(Reg1, levels = c("A", "B", "C", "D")),
         Cat  =  factor(Cat, levels = c("PER",  "PB",  "BM",  "GB", "TGB", "\\rowcolor{LightGray} \\textbf{Total}")
                    )) %>%
  # c("TGB",  "GB",  "BM",  "PB", "PER")
  select(Cat, Reg1, Gha)


# --- Totaux
# -- Total par Qualités
t_TOT1 <- filter(gfForetDen_Reg1,
             Cycle == DernierCycle & NumForet == Choix) %>%
  group_by(Reg1) %>%
  mutate(Cat = "\\rowcolor{LightGray} \\textbf{Total par qualités}",
         Gha = round(Gha, 1),

         # Er_Gha = round(Er_Gha, 1),

         Tot_Gha = sum(Gha, na.rm = T),

         Part_Gha = round(Gha / Tot_Gha * 100, 1)) %>%
  ungroup() %>%
  mutate(Gha = ifelse(Gha != 0,
                    paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    "")) %>%
  # c("TGB",  "GB",  "BM",  "PB", "PER")
  select(Cat, Reg1, Gha)

# -- Total par Catégories de diamètre
t_TOT2 <- filter(gfForetDen_Cat,
             Cycle == DernierCycle & NumForet == Choix) %>%
  # group_by(Cat) %>%
  mutate(Reg1 = "\\cellcolor{LightGray} \\textbf{Total par catégories}",
         Gha = round(Gha, 1),

         # Er_Gha = round(Er_Gha, 1),

         Tot_Gha = sum(Gha, na.rm = T),

         Part_Gha = round(Gha / Tot_Gha * 100, 1)) %>%
  # ungroup() %>%
  mutate(Gha = ifelse(Gha != 0,
                    paste0("\\cellcolor{LightGray}{\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{Brown}{(",
                    Part_Gha,
                    "\\%)}}}}"),
                    "\\cellcolor{LightGray}{}")) %>%
  # c("TGB",  "GB",  "BM",  "PB", "PER")
  select(Cat, Reg1, Gha)

# -- Total des totaux
t_TOT3 <- filter(gfForetDen_,
             Cycle == DernierCycle & NumForet == Choix) %>%
  # group_by(Cat) %>%
  mutate(Cat = "\\rowcolor{LightGray} \\textbf{Total par qualités}",
         Reg1 = "\\cellcolor{LightGray} \\textbf{Total par catégories}",
         Gha = round(Gha, 1),

         # Er_Gha = round(Er_Gha, 1),

         Tot_Gha = sum(Gha, na.rm = T),

         Part_Gha = round(Gha / Tot_Gha * 100, 1)) %>%
  # ungroup() %>%
  mutate(Gha = ifelse(Gha != 0,
                    paste0("\\cellcolor{DimGray}{\\textcolor{white}{\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{(",
                    Part_Gha,
                    "\\%)}}}}"),
                    "\\cellcolor{LightGray}{}")) %>%
  # c("TGB",  "GB",  "BM",  "PB", "PER")
  select(Cat, Reg1, Gha)

t_Base <- rbind(t_Base, t_TOT1, t_TOT2, t_TOT3) %>%
  arrange(Cat, Reg1)

  # rename_("Reg1égorie de bois" = "Reg1",
         #  "N\\hspace{1.2cm}\\scriptsize{(tiges / ha)}" = "Nha",
         # "G\\hspace{1.2cm}\\scriptsize{(m2 / ha)}" = "Gha",
         # "V\\hspace{1.2cm}\\scriptsize{(m3 / ha)}" = "Vha",
         # "AcctG\\hspace{1.2cm}\\scriptsize{(m2 / ha / an)}" = "AcctG",
         # "AcctV\\hspace{1.2cm}\\scriptsize{(m3 / ha / an)}" = "AcctV",
         # "Vc\\hspace{1.2cm}\\scriptsize{(\\euro / ha)}" = "VcHa",
         # "Vp\\hspace{1.2cm}\\scriptsize{(\\euro / ha)}" = "VpHa",
         # "Gain\\hspace{1.2cm}\\scriptsize{(\\euro / ha / an)}" = "Gain")

t1 <- dcast(t_Base,
            Cat ~ Reg1,
          value.var = "Gha") %>%
  rename_("Catégorie de bois" = "Cat")
names(t1) <- paste0("\\textbf{", names(t1), "}")

# ----- Impression -----
Digits = rep(0, dim(t1)[2]+1)

Title <- paste0("Répartition de la qualité par catégories de diamètre (selon la surface terrière)")

print(xtable(t1,
             caption  =  Title,
             caption.placement  =  "top",
             digits = Digits,
             align = c("M{0cm}|", "|M{2.4cm}|", rep("M{2cm}|", dim(t1)[2]-1)),
             label  =  "TabMoyDisp_CatQual"),
      hline.after = -1:dim(t1)[1],
      sanitize.text.function = function(x){return(x)},
      include.rownames = FALSE,
      size = "\\footnotesize")
}
@

<<RadarPer_Qual, fig.cap="Répartition de la densité de tiges de perches par qualités", echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, include=F, eval=F, fig.height=3>>=
t0_pie <- filter(gfForetPer_Reg1) %>%
  select(Reg1,Nha) %>%
  mutate(Reg1=ifelse(Reg1=="A",
                     "Avenir",Reg1),
         Reg1=ifelse(Reg1=="B",
                     "Récupérable",Reg1),
         Reg1=ifelse(Reg1=="C",
                     "Douteux",Reg1),
         Reg1=ifelse(Reg1=="D",
                     "Nul",Reg1),
         Reg1=factor(Reg1,levels=c("Nul","Douteux","Récupérable","Avenir"))) %>%
  arrange(desc(Reg1)) %>%
  # group_by(Essence) %>%
  mutate(Part_Nha=Nha/sum(Nha,na.rm=T),
         Gha=NULL) %>%
  # ungroup() %>%
  # melt(id=c("Reg1")) %>%
  # group_by(Essence) %>%
  mutate(Part_Cum=cumsum(Part_Nha)) %>%
  # ungroup() %>%
  arrange(desc(Reg1))

Min_percent <- 0.08

p0_pie <- ggplot() +
  geom_bar(t0_pie, mapping=aes(x="",Part_Nha,fill=Reg1),
           stat='identity',position='fill',
           width=1) +
  # scale_fill_manual(values=QualPalette) +
  scale_fill_brewer(palette=QualPalette) +
  labs(x="",y="Part de la surface terrière totale (%)") +
  # labs(x="",y="") +
  geom_label(t0_pie,
             mapping=aes(x="",
                         y=Part_Cum-Part_Nha/2,
                         label=ifelse(Part_Nha > Min_percent,
                                      paste0(round(Part_Nha*100,1)," %"),
                                      NA)),
             colour="black", size=2,stat="identity",
             label.padding=unit(0.15,"lines")) +
  scale_y_continuous(labels=percent,
                     expand=c(0,0)) +
  # facet_wrap(~Essence, dir = "v") +
  coord_polar(theta="y") +
  guides(fill=guide_legend(title="Qualité",
                           rever=T)) +
  MyTheme + theme(axis.text.y=element_blank(),
                  # strip.text=element_blank(),
                  panel.border=element_blank(),
                  # panel.background=element_rect("black"),
                  # panel.margin=unit(c(0.1,0.1,0.1,0.1), "cm"),
                  # plot.background=element_rect("black"),
                  plot.margin=unit(c(0,0,0,0), "cm"),
                  # panel.margin = unit(2, "lines"),
                  strip.text = element_text(size = 7),
                  strip.background = element_rect(fill="gray95"),
                  panel.grid=element_blank(),
                  axis.text.x=element_text(size=5),
                  axis.ticks.y=element_blank(),
                  legend.position="right")
p0_pie
@

% \section{Analyse par structure et par essences ?}

<<TabTypeEss, echo=F, results='asis',eval=F,include=F>>=
if (!"gfForetTypologieDendro_Cat" %in% ls()) { cat("Sans objet")} else {
a <- subset(gfForetTypologieDendro_Cat, Cycle == DernierCycle & NumForet == Choix, select=c(2,5:11))
a <- a[order(a$EssPrinc, -a$AcctVper),]
Digits = c(0,0,0,0,1,0,0,2,2)
print(xtable(a,
             digits=Digits,
             caption = "Principales caractéristiques dendrométriques par type de peuplement et essences principales",
             label = "TabTypeEss"),
      caption.placement = "top",
      size="\\footnotesize",
      include.rownames=F)
}
@
\FloatBarrier
}{}

\section{Analyse du renouvellement}
<<Comment_2.5, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5")
cat(Comment$Texte)
@

\subsection{Régénération}

\EditIf{\Sexpr{Eval_Rege}}{TRUE}{
<<Comment_2.5.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.1")
cat(Comment$Texte)
@

% \textcolor{red}{\LARGE Attention erreur sur les calculs de régénération (probablement comme pour GF. Repartir d'un exemple classeur excel.\\
% Réglé. Par contre, colonne Taillis changée en colonne Rejet. Harmoniser le classeur de traduction.}

\subsubsection{Stades de développement}

<<Comment_2.5.1.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.1.1")
cat(Comment$Texte)
@

Le tableau \ref{TabRege} présente les résultats d'inventaire sur la régénération naturelle.
% On rappelle que la régénération a été inventoriée en distinguant 4 stades de développement, pour lesquels les résultats sont précisés dans la figure \ref{fig:PlotRege}.

<<TabRege_Ancien, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=1.5, fig.width=4, fig.cap= "Régé",results='asis', eval=Eval_Rege, include=Eval_Rege>>=
# Rajout ligne des totaux (on peut anticiper car on sait qu'on aura toujours A,B,C et D)
  t0 <- filter(gfForetRege_,
            NumForet==Choix & Cycle==DernierCycle) %>%
  # mutate(Cat="Total") %>%
  # mutate(Er_Recouv=ifelse(is.na(Er_Recouv),
  #                         "",Er_Recouv),
  #        Er_Classe1Ha=ifelse(is.na(Er_Classe1Ha),
  #                         "",Er_Classe1Ha),
  #        Er_Classe2Ha=ifelse(is.na(Er_Classe2Ha),
  #                         "",Er_Classe2Ha),
  #        Er_Classe3Ha=ifelse(is.na(Er_Classe3Ha),
  #                         "",Er_Classe3Ha)) %>%
  select(NumForet,Recouv,Classe1Ha,Classe2Ha,Classe3Ha,
         Er_Recouv,Er_Classe1Ha,Er_Classe2Ha,Er_Classe3Ha)
 # %>%
 #  # Mise en forme pour tableau
 #  mutate(Gha=paste0("\\textbf{",round(Gha,1),"}"),
 #         Er_Gha=paste0("\\textbf{",round(Er_Gha,1),"\\%}"))

Expr_add <- paste0("\\hline\n\\rowcolor{LightGray} \\textbf{Total} & ",
                   "\\textbf{",round(t0$Recouv,1),
                   "} & ",
                   "\\textbf{",round(t0$Classe1Ha,0),
                   "} & ",
                   "\\textbf{",round(t0$Classe2Ha,0),
                   "} & ",
                   "\\textbf{",round(t0$Classe3Ha,0),
                   "}\\\\\n",

                   "\\hline\n\\rowcolor{LightGray} \\textbf{Erreur relative} & ",
                   "\\textbf{",
                   ifelse(is.na(t0$Er_Recouv),
                          "",paste0(round(t0$Er_Recouv,1),"\\%")),
                   "} & ",
                   "\\textbf{",
                   ifelse(is.na(t0$Er_Classe1Ha),
                          "",paste0(round(t0$Er_Classe1Ha,1),"\\%")),
                   "} & ",
                   "\\textbf{",
                   ifelse(is.na(t0$Er_Classe2Ha),
                          "",paste0(round(t0$Er_Classe2Ha,1),"\\%")),
                   "} & ",
                   "\\textbf{",
                   ifelse(is.na(t0$Er_Classe3Ha),
                          "",paste0(round(t0$Er_Classe3Ha,1),"\\%")),
                   "}\\\\\n")



t1 <- filter(gfForetRege_EssReg,
             NumForet==Choix & Cycle==DernierCycle) %>%
  rename(Essence=EssReg) %>%
  select(Essence,Recouv,Classe1Ha,Classe2Ha,Classe3Ha)
t1_plot <- t1
t1 <- rename_(t1,
              "Recouvrement (\\%)"="Recouv",
              "Classe 1 (nb/ha)"="Classe1Ha",
              "Classe 2 (nb/ha)"="Classe2Ha",
              "Classe 3 (nb/ha)"="Classe3Ha")

  # rename_("Myrtille\n\\% de recouvrement"="Recouv_Myrtille",
  #         "Myrtille\nclasse de hauteur"="Classe_Myrtille",
  #         "Herbacées\n\\% de recouvrement"="Recouv_Herbacees",
  #         "Semi-ligneux\n\\% de recouvrement"="Recouv_SemiLigneux",
  #         "Fougère aigle\n\\% de recouvrement"="Recouv_FougereAigle",
  #         "Semis\n\\% de recouvrement"="Recouv_Semis")

# print(xtable(t1,
#              caption = "\\footnotesize{Inventaire de la régénération \\scriptsize{\\\\Recouvrement = hauteur semis < 50 cm\\\\Classe 1 = hauteur semis < 1.50 m\\\\Classe 2 = hauteur semis > 1.50 m et diamètre < 2.5 cm\\\\Classe 3 = 2.5 cm < diamètre < 7.5 cm}}",
#              caption.placement = "top",
#              digits=c(0,0,1,rep(0,dim(t1)[2]-2)),
#              # align=c(rep("P{1.5cm}|",dim(t4)[2]),"P{1.5cm}"), #☺c("l|","l|","P{1cm}|","P{1.5cm}|","P{1.5cm}"),
#              align=c("|M{0.5cm}|","|M{2cm}|","M{1.8cm}|",rep("M{1.5cm}|",dim(t1)[2]-2)),
#              label = "TabRege"),
#       include.rownames=FALSE,
#       include.colnames=TRUE,
#       sanitize.text.function=function(x){return(x)},
#       hline.after=c(-1:dim(t1)[1]),
#       add.to.row=list(pos=list(dim(t1)[1]),
#                       command=Expr_add),
#       size="\\footnotesize")
# list(rep(dim(t1)[1],length(Expr_add)))

# "\\hline\n
# \\multirow{2}{*}{\\parbox{1.5cm}{\\centering N° de Placette}} & \\multicolumn{2}{c|}{Myrtille} & \\multirow{2}{*}{\\parbox{1.5cm}{\\centering Herbacées \\% de recouvrement}} & \\multirow{2}{*}{\\parbox{1.8cm}{\\centering Semi-ligneux \\% de recouvrement}} & \\multirow{2}{*}{\\parbox{1.8cm}{\\centering Fougère aigle \\% de recouvrement}} & \\multirow{2}{*}{\\parbox{1.5cm}{\\centering Semis \\% de recouvrement}}\\\\\n
# \\cline{2-3}\n & \\% de recouvrement & classe de hauteur &  &  &  & \\\\"),

@

<<TabRege, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=1.5, fig.width=4, fig.cap= "Régé",results='asis', eval=Eval_Rege, include=Eval_Rege>>=
# Rajout ligne des totaux (on peut anticiper car on sait qu'on aura toujours A,B,C et D)
t <- filter(gfForetRege_EssRegRejet,
            NumForet==Choix & Cycle==DernierCycle) %>%
  rename(Essence=EssReg) %>%
  # mutate(Cat="Total") %>%
  # mutate(Er_Classe1Ha=ifelse(is.na(Er_Classe1Ha),
  #                         "",round(Er_Classe1Ha,1)),
  #        Er_Classe2Ha=ifelse(is.na(Er_Classe2Ha),
  #                         "",round(Er_Classe2Ha,1)),
  #        Er_Classe3Ha=ifelse(is.na(Er_Classe3Ha),
  #                         "",round(Er_Classe3Ha,1))) %>%
  mutate(Classe1Ha=round(Classe1Ha,0),
         Classe2Ha=round(Classe2Ha,0),
         Classe3Ha=round(Classe3Ha,0),
         Total=round(Classe1Ha+Classe2Ha+Classe3Ha,0)) %>%
  arrange(Rejet,desc(Total)) %>%

  mutate(Classe1Ha=ifelse(Classe1Ha==0,NA,Classe1Ha),
         Classe2Ha=ifelse(Classe2Ha==0,NA,Classe2Ha),
         Classe3Ha=ifelse(Classe3Ha==0,NA,Classe3Ha),
         Total=ifelse(Total==0,"",Total),
         Total_Mark=Total,

         # Total=paste0("\\cellcolor{LightGray}{\\textbf{",round(Classe1Ha+Classe2Ha+Classe3Ha,0),"}}")) %>%
         Total=paste0("\\cellcolor{LightGray}{\\textbf{",Total,"}}")) %>%
  select(Essence,Classe1Ha,Classe2Ha,Classe3Ha,Total,Rejet,Total_Mark) %>%
  filter(!(is.na(Classe1Ha) & is.na(Classe2Ha) & is.na(Classe3Ha)))
# melt(id="Essence")

t_TOT1 <- filter(gfForetRege_Rejet,
                 NumForet==Choix & Cycle==DernierCycle) %>%
  select(Rejet,Classe1Ha,Classe2Ha,Classe3Ha,
         Er_Classe1Ha,Er_Classe2Ha,Er_Classe3Ha) %>%
  mutate(Essence="\\cellcolor{LightGray} \\textbf{Total}",
         Total=round(Classe1Ha+Classe2Ha+Classe3Ha,0),
         Total_Mark=Total,
         Total=paste0("\\cellcolor{DimGray}{\\textcolor{White}{\\textbf{",
                      ifelse(Total==0,"",Total),"}}}"),

         Classe1Ha=paste0("\\cellcolor{LightGray} \\textbf{",round(Classe1Ha,0),
                          ifelse(is.na(Er_Classe1Ha),
                                 "",
                                 paste0(" \\textcolor{CornflowerBlue}{(±",round(Er_Classe1Ha,1),"\\%)}")),
                          "}"),
         Classe2Ha=paste0("\\cellcolor{LightGray} \\textbf{",round(Classe2Ha,0),
                          ifelse(is.na(Er_Classe2Ha),
                                 "",
                                 paste0(" \\textcolor{CornflowerBlue}{(±",round(Er_Classe2Ha,1),"\\%)}")),
                          "}"),
         Classe3Ha=paste0("\\cellcolor{LightGray} \\textbf{",round(Classe3Ha,0),
                          ifelse(is.na(Er_Classe3Ha),
                                 "",
                                 paste0(" \\textcolor{CornflowerBlue}{(±",round(Er_Classe3Ha,1),"\\%)}")),
                          "}")) %>%
  select(Essence,Classe1Ha,Classe2Ha,Classe3Ha,Total,Rejet,Total_Mark) #%>%
  # melt(id="Essence")


t1 <- rbind(t,t_TOT1) %>%
  arrange(Rejet) %>% #,Total_Mark
  mutate(Total_Mark=NULL,
         Rejet=ifelse(Rejet==1,
                      "\\parbox{2cm}{\\centering semis non viable et/ou de rejet de souche}",
                      "\\parbox{2cm}{\\centering semis viable et de franc-pied}")) %>%
  MultiRow(6) %>%
  rename_("\\textbf{Essences}"="Essence",
          "\\textbf{Classe 1 (nb/ha)}"="Classe1Ha",
          "\\textbf{Classe 2 (nb/ha)}"="Classe2Ha",
          "\\textbf{Classe 3 (nb/ha)}"="Classe3Ha",
          "\\textbf{Total}"="Total",
          "\\textbf{Nature}"="Rejet")

# Table <- t1
#     pos <- which(duplicated(Table$Rejet))
#     if (length(pos) > 0) {
#       Table[,i] <- factor(Table[,i])
#       Table2 <- mutate(Table,
#                        # Rejet=factor(Rejet),
#                       Mark=as.numeric(Table[,i])) %>%
#         # Table$Mark <- Table[,i]
#         # Table <- group_by(Table,Mark) %>%
#           group_by(Mark) %>%
#         mutate(Count=length(Mark)) %>%
#         ungroup() %>%
#         data.frame()
#       Table[,i] <- as.character(Table[,i])
#       Table[pos,i] <- NA
#
#       # Repere des lignes à mettre en multirow
#       pos2 <- which(Table$Count > 1 & !is.na(Table[,i]))
#       # pos3 <- which(!is.na(Table[,i]))
#       Table[pos2,i] <- paste0("\\multirow{",Table$Count[pos2],"}{*}{",Table[pos2,i],"}")
#       Table$Count <- NULL
#       Table$Mark <- NULL
#     }
#   }

# t1 <- MultiRow(t1,match("Rejet",names(t1)))



# --- Position des lignes du tableau
pos1 <- which(!is.na(t1[,6]))
pos2 <- 1:dim(t1)[1]
if (length(pos1) > 1) {
pos1 <- pos1[2]-1
pos2 <- c(pos2[!pos2 %in% pos1],pos1)
pos_add <- list()
for (i in 1:length(pos2)) {
  pos_add[length(pos_add)+1] <- list(pos2[i])
}
Expr_add <- c(rep("\\cline{1-5}",length(pos2)-1),
              "\\cmidrule[0.8pt]{1-6}")
} else {
  pos1 <- NA
pos_add <- list()
for (i in 1:length(pos2)) {
  pos_add[length(pos_add)+1] <- list(pos2[i])
}
  Expr_add <- rep("\\cline{1-5}",length(pos2))
}

print(xtable(t1,
             caption = "Inventaire de la régénération \\scriptsize{\\\\Classe 1 = hauteur semis < 1.50 m\\\\Classe 2 = hauteur semis > 1.50 m et diamètre < 2.5 cm\\\\Classe 3 = 2.5 cm < diamètre < 7.5 cm}",
             caption.placement = "top",
             # digits=c(0,0,1,rep(0,dim(t1)[2]-2)),
             digits=rep(0,dim(t1)[2]+1),
             # align=c(rep("P{1.5cm}|",dim(t4)[2]),"P{1.5cm}"), #☺c("l|","l|","P{1cm}|","P{1.5cm}|","P{1.5cm}"),
             align=c("|M{0.5cm}|","|M{2cm}|","M{2cm}|",rep("M{2cm}|",dim(t1)[2]-3),"M{2cm}|"),
             label = "TabRege"),
      include.rownames=FALSE,
      include.colnames=TRUE,
      sanitize.text.function=function(x){return(x)},
      # hline.after=c(-1:dim(t1)[1]),
      add.to.row=list(pos=pos_add,
                      command=Expr_add),
      size="\\footnotesize")


# ----- Nombre de palcettes régénérées :
# load("Tables/gfDonneesBrutes.RData")
# setwd(repGF)
# load("Tables/gfDonneesBrutes.Rdata")
df <- filter(Reges,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,NumPlac,SsPlac,Essence,Class1,Class2,Class3) %>%
  melt(id=c("NumForet","NumPlac","SsPlac","Essence")) %>%
  group_by(NumForet,NumPlac,SsPlac) %>%
  summarise(value=sum(value),
            Check=ifelse(value >= 5,1,0)) %>%
  ungroup()

Taux=round(sum(df$Check)/length(df$Check)*100,1)
# load(paste0(repSav,"/Tables/gfTablesBrutes.RData"))
@

% La part de sous-placettes régénérées\footnote{Une sous-placette est considérée comme régénérée si elle présente au moins 5 brins de classe 1, 2 ou 3 toutes classes confondues} est de \Sexpr{Taux}\%. \textcolor{red}{A revoir - cf 2.5.1.2}\\

<<PlotRege, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.width="\\textwidth", fig.height=3, fig.cap= "Régénération par stades",results='asis',eval=F,include=F>>=


# ----- table plot régénération
# t1_plot <- apply(as.matrix(t1),2,colSums)
t1_plot1 <- t1_plot
ListEssence <- unique(t1_plot$Essence)
t1_plot1[dim(t1_plot)[1]+1,] <- c("Total",colSums(t1_plot[,2:5]))
t1_plot1 <- melt(t1_plot1,
                 id=c("Essence")) %>%
  mutate(value=as.numeric(value),
         Essence=factor(Essence,levels=c("Total",ListEssence))) %>%
  arrange(Essence)


# ----- plot
df_plot1 <- filter(t1_plot1,
                   variable=="Recouv")
df_plotClasses <- filter(t1_plot1,
                   variable!="Recouv")
df_plot2 <- filter(t1_plot1,
                   variable=="Classe1Ha")
df_plot3 <- filter(t1_plot1,
                   variable=="Classe2Ha")
df_plot4 <- filter(t1_plot1,
                   variable=="Classe3Ha")
Max_x <- ifelse(max(df_plotClasses$value) > 0,
                round(max(df_plotClasses$value)+1,0),
                0)
Breaks_x <- seq(0,Max_x,
                ifelse(Max_x>500,
                       floor(round(Max_x/5,0)/100+0.5)*100,
                       round(Max_x/10,0)))

p1 <- ggplot() +
  geom_bar(df_plot1,
           mapping=aes(Essence,value),
           position="identity",stat="identity") +
  labs(x="",y="(% de recouvrement)",title="Recouvrement") +
  scale_y_continuous(limits=c(0,
                              ifelse(max(df_plot1$value) > 0,
                                       round(max(df_plot1$value)+1,0),
                                       0)),
                     breaks=seq(0,
                                ifelse(max(df_plot1$value) > 0,
                                       round(max(df_plot1$value)+1,0),
                                       0),
                                round(max(df_plot1$value)+1,0)/5)) +
  # scale_x_discrete(breaks=df_plot1$Essence) +
  coord_flip() + MyTheme1 +
  theme(axis.title.x=element_text(hjust=1),
        axis.title.y=element_text(vjust=1.1,angle=0,size=8))

p2 <- ggplot() +
  geom_bar(df_plot2,
           mapping=aes(Essence,value),
           position="identity",stat="identity") +
  labs(x="",y="Densité à l'hectare",title="Classe 1") +
  scale_y_continuous(limits=c(0,Max_x),
                     breaks=Breaks_x) +
  coord_flip() + MyTheme1 +
  theme(axis.title.x=element_text(hjust=1))

p3 <- ggplot() +
  geom_bar(df_plot3,
           mapping=aes(Essence,value),
           position="identity",stat="identity") +
  labs(x="",y="Densité à l'hectare",title="Classe 2") +
  scale_y_continuous(limits=c(0,Max_x),
                     breaks=Breaks_x) +
  coord_flip() + MyTheme1 +
  theme(axis.title.x=element_text(hjust=1))

p4 <- ggplot() +
  geom_bar(df_plot4,
           mapping=aes(Essence,value),
           position="identity",stat="identity") +
  labs(x="",y="Densité à l'hectare",title="Classe 3") +
  scale_y_continuous(limits=c(0,Max_x),
                     breaks=Breaks_x) +
  coord_flip() + MyTheme1 +
  theme(axis.title.x=element_text(hjust=1))

# grid.arrange(p1,p2,p3,p4,
#              ncol=1,heights=rep(1,4))
# p1
# p2
# p3
# p4

grid.arrange(p1,p3,p2,p4,
             ncol=2,widths=rep(1,2))
@
\FloatBarrier

<<Rege_Classe, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.width="\\textwidth", fig.height=3, fig.cap= "Régénération par stades",results='asis',eval=F,include=F>>=

df <- filter(gfForetRege_Essence,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(Essence,Classe1Ha,Classe2Ha,Classe3Ha) %>%
  # filter(Essence %in% Essences_Seuil) %>%
  melt(id="Essence")

ggplot() +
  geom_bar(df,
           mapping=aes(variable,value,fill=Essence),
           stat="identity",position="dodge") +
  scale_fill_manual(values=Palette_Essence) +
  scale_x_discrete(expand=c(0,0.3))
# ----- table plot régénération
@
\FloatBarrier

<<EssReg_Rege, echo=F, comment=NA, warning=FALSE, eval=T, include=T>>=
Essences_Rege <-
  gfForetDen_EssReg %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  mutate(EssReg = ifelse(str_detect(EssReg, "Chêne"), "Chêne", EssReg)) %>%
  group_by(NumForet, Cycle, EssReg) %>%
  mutate(Gha = sum(Gha, na.rm = T)) %>%
  ungroup() %>%
  arrange(-Gha) %>%
  mutate(Count=1:length(Gha)) %>%
  filter(Count <= 4) %>%
  select(EssReg) %>%
  distinct() %>%
  unlist() %>%
  unname()

if (length(Essences_Rege) == 0) {
  Essences_Rege <- Essence_Princ
}

# -- Ordre des essences
order_DF <-
  gfForetDen_EssReg %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  mutate(EssReg = ifelse(str_detect(EssReg, "Chêne"), "Chêne", EssReg)) %>%
  group_by(NumForet, Cycle, EssReg) %>%
  mutate(Gha = sum(Gha, na.rm = T)) %>%
  ungroup() %>%
  arrange(desc(Gha))
Essence_ORDER <- unique(order_DF$EssReg)
Palette_Essence_Rege <- Palette_Essence
Palette_Essence_Rege <-
  Palette_Essence_Rege[c(
    match(Essence_ORDER, names(Palette_Essence_Rege)),
    which(!is.element(names(Palette_Essence_Rege),Essence_ORDER))
    )]

Palette_Essence_BM <- Palette_Essence_Rege

@
% \textcolor{red}{Graphes suivants : 2 essais de représentation de l'état des différents stades de développement (soit germination/taillis distincts, soit germination seule (taillis éliminé))}
% \textcolor{red}{Dans figure ci-dessous, on ne considère que les essences objectifs (EssRegeneration). Mais cela génère : Tremble écarté... ?}\\

La figure \ref{fig:Rege_Classe2} présente le nombre de semis des \Sexpr{length(Essences_Rege)} essences principales.%pour lesquelles la régénération revêt un intérêt particulier.


<<Rege_Classe2, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.width="\\textwidth", fig.height=3, fig.cap= "Nombre de semis par classes",results='asis', eval=Eval_Rege, include=Eval_Rege>>=
# Essences_Rege_ALIBI <- data.frame(Essence=rep(Essences_Rege,3),
#                                   variable=c(rep("Classe1",length(Essences_Rege)),
#                                              rep("Classe2",length(Essences_Rege)),
#                                              rep("Classe3",length(Essences_Rege))),
#                                   stringsAsFactors=F)

df <-
  gfForetRege_EssRegRejet %>%
  filter(
    NumForet == Choix & Cycle == DernierCycle & Rejet == 0 &
      is.element(EssReg, Essences_Rege)
  )
# print("\\\\")
# print(df)
# print("\\\\")
df <- df %>% select(EssReg, Classe1Ha, Classe2Ha, Classe3Ha)

# print("\\\\")
# print(df)
# print("\\\\")
df <-
  df %>%
  rename_(
    "Classe1" = "Classe1Ha", "Classe2" = "Classe2Ha",
    "Classe3" = "Classe3Ha", "Essence" = "EssReg"
  )

# print("\\\\")
# print(df)
# print("\\\\")
  # filter(Essence %in% Essences_Seuil) %>%
df <- df %>% melt(id = "Essence")

# print("\\\\")
# print(df)
# print("\\\\")
df <- df %>% mutate(variable = as.character(variable))

# print("\\\\")
# print(df)
# print("\\\\")
# print(str(df))
# print("\\\\")
# print(Essences_Rege_ALIBI)
# print("\\\\")
# print(str(Essences_Rege_ALIBI))
# print("\\\\")
# df <- right_join(df,
#                 Essences_Rege_ALIBI,
#                 by=c("Essence"="Essence",
#                      "variable"="variable"))

# print("\\\\")
# print(df)
# print("\\\\")
df <- df %>% mutate(value = ifelse(is.na(value), 0, value))

Y=max(df$value)
# Y=ifelse(Y==0,
#          10,Y)
# value_by <- ifelse(Y>=1000,
#                    100,floor(Y/100+0.5)*10)
# value_by <- ifelse(Y>=100,
#                    floor(Y/100+0.5)*10,
#                    ifelse(Y>=15,floor(Y/10+0.5),1))
# Y=max(df$value)
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# Y=ifelse(Y==0,
#          10,Y)

# Y=max(df$Total)
Y = ifelse(Y == 0, 10, Y)
# Y = 450 # fixé pour Analyse Versoix (donne max à 500)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 100 + 0.5) * 100
# }
if (Y < 650) by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 50 + 0.5) * 50
if (Y < 325) by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 25 + 0.5) * 25
if (Y < 130) by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 10 + 0.5) * 10
if (Y < 65) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 5 + 0.5) * 5
  by_VALUE <- ifelse(by_VALUE == 0, 5, by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 3 + 0.5) * 3
  by_VALUE <- ifelse(by_VALUE == 0, 3, by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 2 + 0.5) * 2
  by_VALUE <- ifelse(by_VALUE == 0, 2, by_VALUE)
}
if (Y <= 13) by_VALUE <- 1

# print(Palette_Essence_Rege)
# print("\\\\")
# print(df)
# print("\\\\")
# print(Essences_Rege)
# print(df$Essence)
# print("\\\\")
# print(Essences_Rege_ALIBI$Essence)
# print("\\\\")
# print(str(Essences_Rege_ALIBI))
# print("\\\\")
# print(str(df))
# print("\\\\")
# print(names(df))
# print("\\\\")
# print(unique(gfForetRege_EssRegRejet$EssReg))

ggplot() +
  geom_bar(df,
           mapping=aes(variable,value,fill=Essence),
           stat="identity",position="dodge",width=0.5,colour="gray50") +
  scale_fill_manual(values=Palette_Essence_Rege) +
  scale_x_discrete(expand=c(0.1,0.1)) +
  scale_y_continuous(limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  labs(x="Classes de régénération",y="Nombre de semis à l'hectare") +
  theme_bw() + MyTheme
# ----- table plot régénération
@
\FloatBarrier

% \textcolor{red}{Autre solution ci-dessous}
<<Rege_Classe2_AutreSolution, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.width="\\textwidth", fig.height=3, fig.cap= "Régénération par stades",results='asis',eval=F,include=F>>=

df <- filter(gfForetRege_EssRegRejet,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(EssReg,Classe1Ha,Classe2Ha,Classe3Ha,Rejet) %>%
  mutate(Rejet=ifelse(Rejet==0,
                      "Semis issu de germination",
                      "Semis issu de rejet de souche")) %>%
  rename_("Classe 1"="Classe1Ha",
          "Classe 2"="Classe2Ha",
          "Classe 3"="Classe3Ha",
          "Essence"="EssReg") %>%
  # filter(Essence %in% Essences_Seuil) %>%
  melt(id=c("Essence","Rejet"))

ggplot() +
  geom_bar(df,
           mapping=aes(variable,value,fill=Essence),
           stat="identity",position="dodge",width=0.6,colour="gray50") +
  facet_wrap(~ Rejet,
             nrow=2,
             scales="free_y") +
  scale_fill_manual(values=Palette_Essence_Rege) +
  scale_x_discrete(expand=c(0.1,0.1)) +
  # scale_y_continuous(limits=c(0,max(df$value)*1.1),
  #                    breaks=seq(0,max(df$value)*1.3,
  #                               1000)) +
  labs(x="Classes de régénération",y="Nombre de semis à l'hectare") +
  theme_bw() + MyTheme + theme(strip.text = element_text(size = 7),
                               strip.background = element_rect(fill="gray95"))
@
\FloatBarrier


\subsubsection{Surface régénérée}

<<Comment_2.5.1.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.1.2")
cat(Comment$Texte)
@

Le tableau \ref{TabRege_Valide} présente la surface considérée comme régénérée (fonction du nombre de sous-placettes à n $\geqslant$ 5 semis).\\
%le taux de réussite (fixé de manière empirique) par essence des sous-placettes de régénération.\\
% \textcolor{red}{Garder que les essences objectifs ?}
<<TabRege_Valide, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.width="\\textwidth", fig.height=3, fig.cap= "Part des sous placettes régénérées",results='asis', eval=Eval_Rege, include=Eval_Rege>>=

# -- Nombre de sous-placettes
NbreSsPlac_PROTOCOLE <-
  with(Echantillonnages, NbSousPlac[NumForet & Cycle == DernierCycle])
NbreSsPlac <- NbreSsPlac_PROTOCOLE * NbrePlac

df1 <-
  Reges %>%
  filter(
    NumForet == Choix & Cycle == DernierCycle & Rejet == 0 & !is.na(EssReg)
  ) %>% #!is.element(Rejet,c("X","x"))
  mutate(Essence = EssReg, Surf = Class1 + Class2 + Class3) %>%
  group_by(NumForet, NumPlac, SsPlac, Essence, Rejet) %>%
  summarise(Surf = sum(Surf), Surf = ifelse(Surf >= 5, 1, 0)) %>%
  group_by(Essence, Rejet) %>%
  summarise(Valide = sum(Surf) / NbreSsPlac) %>%
  ungroup() %>%
  mutate(Essence = factor(Essence, levels = names(Palette_Essence_Rege))) %>%
  arrange(Essence)

df2 <-
  Reges %>%
  filter(
    NumForet == Choix & Cycle == DernierCycle & Rejet == 0 & !is.na(EssReg)
  ) %>% #!is.element(Rejet,c("X","x"))
  # mutate(Essence="\\cellcolor{LightGray} \\textbf{Total}",
  mutate(
    Essence = "\\rowcolor{LightGray} \\textbf{Total}",
    Surf = Class1 + Class2 + Class3
  ) %>%
  group_by(NumForet, NumPlac, SsPlac, Essence, Rejet) %>%
  summarise(Surf = sum(Surf), Surf = ifelse(Surf >= 5, 1, 0)) %>%
  group_by(Essence, Rejet) %>%
  summarise(Valide = sum(Surf) / NbreSsPlac) %>%
  ungroup()

  df <-
    df1 %>%
    rbind(df2) %>%
    data.frame() %>%  # Important que la table soit un data.frame pour faire marcher MultiRow correctement (en utilisant str(), vérifier qu'on n'a pas "Classes ‘tbl_df’, ‘tbl’ and 'data.frame'")
    arrange(Rejet, Valide) %>%
    mutate(
      Valide = paste0(round(Valide * 100, ifelse(Valide < 0.01, 1, 0)), " \\%"),
      Valide =
        ifelse(
          Essence == "\\rowcolor{LightGray} \\textbf{Total}",
          paste0("\\textbf{",Valide,"}"),
          Valide
        )
    ) %>%
    select(Essence, Valide) %>% #,Rejet
  # mutate(Rejet=ifelse(Rejet=="X",
  #                     "\\parbox{2cm}{\\centering rejet de souche}",
  #                     "\\parbox{2cm}{\\centering germination}")) %>%
  # MultiRow(3) %>%
  rename_("\\textbf{Essences}" = "Essence", "\\textbf{Surface}" = "Valide")
  # rename_("Semis issu de"="Rejet")


# --- Position des lignes du tableau
# pos1 <- which(!is.na(df[,3]))
# pos1 <- pos1[2]-1
# pos2 <- 1:dim(df)[1]
# pos2 <- c(pos2[!pos2 %in% pos1],pos1)
# pos_add <- list()
# for (i in 1:length(pos2)) {
#   pos_add[length(pos_add)+1] <- list(pos2[i])
# }
# Expr_add <- c(rep("\\cline{1-2}",dim(df)[1]-1),
#               "\\cmidrule[0.8pt]{1-3}")

  print(
    xtable(
      df,
      caption = "Surface considérée comme régénérée",
      caption.placement = "top",
      # digits=c(0,0,1,rep(0,dim(df)[2]-2)),
      digits = rep(0, dim(df)[2] + 1),
      # align=c(rep("P{1.5cm}|",dim(t4)[2]),"P{1.5cm}"), #☺c("l|","l|","P{1cm}|","P{1.5cm}|","P{1.5cm}"),
      align = c("|M{0.5cm}|", "|M{2cm}|", rep("M{5cm}|", dim(df)[2] - 1)),
      label = "TabRege_Valide"
    ),
    include.rownames = FALSE,
    include.colnames = TRUE,
    sanitize.text.function = function(x) {return(x)},
    # hline.after=c(-1:dim(df)[1]),
    # add.to.row=list(pos=pos_add,
    #                 command=Expr_add),
    size="\\footnotesize"
  )

@
\FloatBarrier

\EditIf{\Sexpr{DernierCycle > 1}}{TRUE}{

\subsubsection{Evolution du renouvellement}

<<Comment_2.5.1.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.1.3")
cat(Comment$Texte)
@

% La figure \ref{fig:Evol_Rege} fait le bilan de l'état des différentes classes de régénération au cours du temps, par rapport à des valeurs seuils (3700 t/ha pour la classe 1, 1500 pour la classe 2, 250 pour la classe 3 et 50 pour les perches). On y a positionné, pour chaque classe, des points représentant la part du seuil atteinte à chaque inventaire.\\
% On précise que pour des questions de représentation graphique, la position des points ne dépassera pas le seuil de 100\%. Cependant, on précisera les valeurs des points dépassant les seuils.
<<Evol_Rege, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=4, fig.cap= "Régé",results='asis',eval=F,include=F,message=F,warning=F>>=
Classe1_Seuil <- 3700
Classe2_Seuil <- 1500
Classe3_Seuil <- 250
Perches_Seuil <- 50

t <-   left_join(gfForetRege_,gfForetPer_) %>%
  select(NumForet,Cycle,Classe1Ha,Classe2Ha,Classe3Ha,Nha) %>%
  filter(NumForet==Choix) %>%
  rename(Perches=Nha) %>%
  mutate(Classe1_Taux=Classe1Ha/Classe1_Seuil*100,
         Classe2_Taux=Classe2Ha/Classe2_Seuil*100,
         Classe3_Taux=Classe3Ha/Classe3_Seuil*100,
         Perches_Taux=Perches/Perches_Seuil*100)

# cat("\\textcolor{red}{\\LARGE Attention erreur sur les calculs de régénération (probablement comme pour GF. Repartir d'un exemple classeur excel}")
t <-   left_join(gfForetRege_,gfForetPer_) %>%
  select(NumForet,Cycle,Classe1Ha,Classe2Ha,Classe3Ha,Nha) %>%
  filter(NumForet==Choix) %>%
  rename(Perches=Nha) %>%
  mutate(Classe1_Taux=sample(130, 5, replace = TRUE), #Recouv=sample(130, 5, replace = TRUE)/100,
         Classe2_Taux=sample(130, 5, replace = TRUE),
         Classe3_Taux=sample(130, 5, replace = TRUE),
         Perches_Taux=sample(130, 5, replace = TRUE))

t1 <- select(t,
             NumForet,Cycle,Classe1_Taux,Classe2_Taux,Classe3_Taux,Perches_Taux) %>%
  melt(id=c("NumForet","Cycle"))
Xmin <- min(t1$value)



t1 <- select(t,
         NumForet,Cycle,Classe1_Taux,Classe2_Taux,Classe3_Taux,Perches_Taux) %>%
  melt(id=c("NumForet","Cycle")) %>%
  mutate(variable=as.character(variable),
         variable2=as.character(variable),
         # variable2=ifelse(variable=="Recouv","Recouv",variable),
         variable2=ifelse(variable=="Classe1_Taux","Classe1",variable2),
         variable2=ifelse(variable=="Classe2_Taux","Classe2",variable2),
         variable2=ifelse(variable=="Classe3_Taux","Classe3",variable2),
         variable2=ifelse(variable=="Perches_Taux","Perches",variable2),
         variable=NULL) %>%
  rename(Seuil=value,
         variable=variable2)
t2 <- mutate(t,
               # Recouv_Pos=ifelse(Recouv > 1,1,Recouv),
               Classe1_Pos=ifelse(Classe1_Taux > 100,100,Classe1_Taux),
               Classe2_Pos=ifelse(Classe2_Taux > 100,100,Classe2_Taux),
               Classe3_Pos=ifelse(Classe3_Taux > 100,100,Classe3_Taux),
               Perches_Pos=ifelse(Perches_Taux > 100,100,Perches_Taux)) %>%
  select(NumForet,Cycle,Classe1_Pos,Classe2_Pos,Classe3_Pos,Perches_Pos) %>% # ,Recouv_Pos
  melt(id=c("NumForet","Cycle")) %>%
  mutate(variable=as.character(variable),
         variable2=as.character(variable),
         # variable2=ifelse(variable=="Recouv_Pos","Recouv",variable),
         variable2=ifelse(variable=="Classe1_Pos","Classe1",variable2),
         variable2=ifelse(variable=="Classe2_Pos","Classe2",variable2),
         variable2=ifelse(variable=="Classe3_Pos","Classe3",variable2),
         variable2=ifelse(variable=="Perches_Pos","Perches",variable2),
         variable=NULL) %>%
  rename(Position=value,
         variable=variable2)

t3 <- full_join(t1,t2)


ggplot() +
  geom_point(t3,
           mapping=aes(x=variable,y=Position,colour=Position)) +
  geom_hline(yintercept=100,
             linetype=2,
             alpha=0.5) +
  coord_flip() +
  # scale_y_continuous(labels=percent) +
  scale_y_continuous(breaks=seq(0,100,10)) +
  # scale_colour_brewer()
  scale_colour_gradient2(name="% du seuil de\ndensité atteint :",
                      low="firebrick4",
                      mid="goldenrod",
                      high="palegreen3",
                      midpoint=50) +
  geom_label_repel(t3,
                   mapping=aes(x=variable,
                               y=Position,
                               label=ifelse(Seuil >= 100,
                                            paste0("Cycle ",Cycle," :\n",Seuil," %"),
                                            Cycle)),
                               # label=paste0("Cycle ",Cycle," :\n",Seuil*100," %")),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  MyTheme1 +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_blank())



@
\FloatBarrier
% \textcolor{red}{Attention : en attendant la correction du traitement de la régé (voir plus haut), on a tiré des densités au hasard}

La figure \ref{fig:Evol_Rege_Bis} retrace l'évolution au cours du temps des différentes classes de régénération naturelle, toutes essences confondues.

<<Evol_Rege_Bis, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3, fig.cap= "Evolution des différentes classes de régénération (toutes essences confondues)",results='asis', eval=Eval_Evol && Eval_Rege, include=Eval_Evol && Eval_Rege,message=F,warning=F>>=

df <-
  gfForetRege_Rejet %>%
  filter(NumForet == Choix & Rejet == 0) %>% #!is.element(Rejet, c("X", "x"))
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  select(NumForet, Annee, Classe1Ha, Classe2Ha, Classe3Ha) %>%
  rename_("Classe 1" = "Classe1Ha",
          "Classe 2" = "Classe2Ha",
          "Classe 3" = "Classe3Ha") %>%
  melt(id=c("NumForet", "Annee"))

Y = max(df$value)
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
Y = ifelse(Y == 0, 10, Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 100 + 0.5) * 100
# }
if (Y < 650) { by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 50 + 0.5) * 50 }
if (Y < 325) { by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 25 + 0.5) * 25 }
if (Y < 130) { by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 10 + 0.5) * 10 }
if (Y < 65) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 5 + 0.5) * 5
  by_VALUE <- ifelse(by_VALUE == 0, 5, by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 3 + 0.5) * 3
  by_VALUE <- ifelse(by_VALUE == 0, 3, by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y / 8 + Y / 15) / 2) / 2 + 0.5) * 2
  by_VALUE <- ifelse(by_VALUE == 0, 2, by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

ggplot() +
  geom_line(
    df,
    mapping = aes(factor(Annee), value, colour = variable, group = variable)
  ) +
  scale_y_continuous(
    name="Nombre de semis à l'hectare",
    limits = c(0, Y * 1.1),
    breaks = seq(0, Y * 1.3, by_VALUE),
    expand = c(0, 0)) +
  scale_colour_manual(
    name = "Classes de\nrégénération",
    values = c("darkgreen", "forestgreen", "chartreuse3")
  ) +
  labs(x = "Années d'inventaire") +
  theme_bw() + MyTheme +
  theme(
    legend.direction = "horizontal",
    legend.position = "bottom"
  )
@


% \textcolor{red}{Ici, on ne prend à chaque cycle que les 4 premières essences. Il faut améliorer cette règle (par exemple quid si une essence est sélectionnée aux 1er et 3ème cycle et pas au 2ème ?)}
Le tableau \ref{Tab_EvolRege_Essence} et la figure \ref{fig:Courbe_EvolRege_Essence} présentent l'évolution du nombre de semis des \Sexpr{length(Essences_Rege)} essences principales. %\textcolor{red}{souci : les essences principales ne sont pas toutes représentées en régé + présence de l'essence Chêne -> pas dans les regroupements - à voir avec Julien}.

<<Tab_EvolRege_Essence, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3,results='asis', eval=Eval_Evol && Eval_Rege, include=Eval_Evol && Eval_Rege,message=F,warning=F>>=

df1 <-
  gfForetRege_EssRegRejet %>%
  filter(NumForet == Choix & Rejet == 0) %>% # !is.element(Rejet,c("X","x"))
  rename(Essence = EssReg) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  mutate(Total = round(Classe1Ha + Classe2Ha + Classe3Ha, 0)) %>%
  select(Annee, Essence, Total) %>%
  arrange(Annee, -Total) %>%
  group_by(Annee) %>%
  mutate(Count = 1:length(Annee)) %>%
  ungroup() %>%
  # filter(Count <= 4) %>%
  filter(is.element(Essence, Essences_Rege)) %>%
  select(-one_of("Count")) %>%
  dcast(Essence ~ Annee, value.var = "Total")

  # dcast(Essence ~ Cycle, value.var="Total")
  # rename_("Classe 1"="Classe1Ha",
  #         "Classe 2"="Classe2Ha",
  #         "Classe 3"="Classe3Ha") %>%
  # melt(id=c("Cycle"))

df2 <-
  gfForetRege_Rejet %>%
  filter(NumForet == Choix & Rejet == 0) %>% # !is.element(Rejet,c("X","x"))
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  mutate(
    Total = paste0("\\textbf{", round(Classe1Ha + Classe2Ha + Classe3Ha), "}"),
    Essence = "\\rowcolor{LightGray} \\textbf{Total}"
  ) %>%
  select(Annee,Essence,Total) %>%
  dcast(Essence ~ Annee, value.var = "Total")

# df <- full_join(df1,df2) %>%
#   rename_("\\textbf{Cycle}"="Cycle", #\\rowcolor{SteelBlue}
#           "\\textbf{Total}"="Total")
df <- df1 %>% rbind(df2) %>% rename(Essences = Essence)
names(df) <- paste0("\\textbf{", names(df),"}")

# names(df)[2:(dim(df)[2]-1)] <- paste0("\\rotatebox{90}{~\\parbox{1.5cm}{\\centering\\textbf{Nombre de semis de ",
#                                       names(df)[2:(dim(df)[2]-1)],
#                                       "}}}")


# %%%%%%%%%% Impression tableau
print(
  xtable(
    df,
    # digits=rep(0,dim(t1)[2]+1),
    digits = c(0, 0, rep(1, dim(df)[2] - 1)),
    align = c("M{0cm}", "|M{1.3cm}|", rep("M{1cm}|", dim(df)[2] - 2), "M{1cm}|"),
    caption = "Evolution du nombre de semis par essence",
    label = "Tab_EvolRege_Essence"
  ),
  caption.placement = "bottom",
  hline.after = -1:dim(df)[1],
  sanitize.text.function = function(x){return(x)},
  include.rownames = F,
  size = "\\footnotesize"
)
@

<<Courbe_EvolRege_Essence, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3, fig.cap= "Evolution de la régénération par essences (essences principales)",results='asis', eval=Eval_Evol && Eval_Rege, include=Eval_Evol && Eval_Rege,message=F,warning=F>>=

# Essences_Rege <- filter(EssRegeneration,
#                         NumForet==Choix) %>%
#   select(Essence) %>%
#   unlist() %>%
#   unname()

Essences_Rege_ALIBI <- expand.grid(NumForet=Choix,
                                   Essence=rep(Essences_Rege,3),
                                   Cycle=c(1:DernierCycle),
                                   stringsAsFactors=F) %>%
  data.frame()

df <- filter(gfForetRege_EssenceRejet,
         NumForet==Choix & Rejet==0) %>% # !is.element(Rejet,c("X","x"))

  full_join(Essences_Rege_ALIBI) %>%

  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Total=Classe1Ha+Classe2Ha+Classe3Ha) %>%
  select(Annee,Essence,Total) %>%
  arrange(Annee,-Total) %>%
  # group_by(Annee) %>%
  # mutate(Count=1:length(Annee)) %>%
  # ungroup() %>%
  # filter(Count <= 4)
  filter(is.element(Essence,Essences_Rege)) %>%
  mutate(Total=ifelse(is.na(Total),
                            0,Total))
  # rename_("Classe 1"="Classe1Ha",
  #         "Classe 2"="Classe2Ha",
  #         "Classe 3"="Classe3Ha") %>%
  # melt(id=c("Annee"))

Y=max(df$Total)
# Y=ifelse(Y==0,
#          10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
# if (Y < 500) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
# }
# if (Y < 250) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
# }
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

ggplot() +
  geom_line(df,
            mapping=aes(factor(Annee),Total,colour=Essence,group=Essence)) +
  scale_y_continuous(name="Nombre de semis à l'hectare",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,
                                by_VALUE),
                     expand=c(0,0)) +
  scale_colour_manual(name="Essences",
                       values=Palette_Essence_Rege) +
  labs(x="Années d'inventaire") +
  theme_bw() + MyTheme +
  theme(legend.direction="horizontal",
        legend.position="bottom")
@

% \textcolor{red}{Attention ici que semis viables}
% \textcolor{red}{Garder que les essences objectifs ? - oui}
% \paragraph{Abroutissement}
%
% L'histogramme de la figure \ref{fig:TabAbroutissement} représente le taux d'abroutissement des semis de hauteur inférieure à 1,50 m. Ne sont représentées ici que les 2 classes de semis susceptibles d'être abrouties par le gibier du fait de leur faible hauteur.

<<TabAbroutissement_Ancien, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=1.5, fig.width=4, fig.cap= "Abroutissement",results='asis',eval=F,include=F>>=
# cat("\\subsubsection{Abroutissement}\n
# L'histogramme de la figure \\ref{fig:TabRege} représente le taux d'abroutissement des semis de hauteur inférieure à 1,50 m. Ne sont représentées ici que les 2 classes de semis susceptibles d'être abrouties par le gibier du fait de leur faible hauteur.")
# if (dim(Rege_Sel)[1] > 0) {
# setwd(repGF)
# load("Tables/gfDonneesBrutes.Rdata")
t1 <-
  Reges %>%
  filter(NumForet == Choix & Cycle == DernierCycle & Rejet == 0) %>%
  select(Recouv, Abroutis, Essence, Class1)

if (dim(t1)[1] > 0) {
  cat("\\subsubsection{Abroutissement}
L'histogramme de la figure \\ref{fig:TabAbroutissement} représente le taux d'abroutissement des semis de classe 1 (hauteur comprise entre 0,5 m et à 1,50 m) pour les essences à régénérer.\\\\Cette classe est la seule à être représentée car susceptible d'être abroutie par le gibier du fait de sa faible hauteur.\\\\")

  # if (Eval_Comment==T) {
  #   Comment <- filter(Comments, Section=="2.5.1.4")
  #   cat(Comment$Texte)
  # }


  posf <- which(t1$Abroutis=="f" | t1$Abroutis==0 | is.na(t1$Abroutis))
  # post <- which(t1$Abroutis=="t")
  post <- c(1:dim(t1)[1])[-posf]
  t1$Abroutis[posf] <- "non"
  t1$Abroutis[post] <- "oui"
  t1$Abroutis[-c(post,posf)] <- "non" # Par défaut les vides ou les erreurs sont notées "non"
  # t1 <- summaryBy(Recouv + Class1 ~ Abroutis, data=t1, FUN=sum, keep.names=T)
  t1 <- mutate(t1,
               Recouv=as.numeric(Recouv),
               Class1=as.numeric(Class1)) %>%
    group_by(Abroutis) %>%
    dplyr::summarise(Recouv=sum(Recouv),
                     Class1=sum(Class1)) %>%
    ungroup()
t1$Abroutis <- factor(t1$Abroutis, levels=c("oui","non"))
if (length(unique(t1$Abroutis))==1) {
  t1[2,] <- c(levels(t1$Abroutis)[!levels(t1$Abroutis) %in% factor(t1$Abroutis)],0,0)
  t1$Recouv <- as.numeric(as.character(t1$Recouv))
  t1$Class1 <- as.numeric(as.character(t1$Class1))
  }
t1 <- t1[order(t1$Abroutis),]
if (sum(t1$Recouv)!=0) {
  t1$Recouv <- t1$Recouv/sum(t1$Recouv)
}
if (sum(t1$Class1)!=0) {
  t1$Class1 <- t1$Class1/sum(t1$Class1)
}
t1.m <- melt(t1, id="Abroutis")
t1.m <- t1.m[t1.m$Abroutis=="oui",]
# ggplot(t1.m, aes(x=variable, y=value, fill=factor(Abroutis))) + geom_bar(stat = "identity", position='fill',colour="black") +
if (dim(t1.m)[1] > 0) {
ggplot(t1.m, aes(x=variable, y=value)) +
  geom_bar(stat = "identity", position='stack',colour="black",width=0.5) +
  # scale_fill_manual(values=c("black","white")) +
  ggplot2::geom_text(aes(label=paste0(round(value*100,1)," %")), vjust=-1, size=2.5) +
  geom_vline(xintercept=1.5,linetype=2) +
  scale_y_continuous(labels=percent, limits=c(0,1)) +
  scale_x_discrete(expand=c(0,1),label=c("Recouvrement","Classe 1 \n(50 cm < H < 1.50 m)")) +
  guides(fill=guide_legend(title="Abroutissement")) +
  labs(x="", y="") +
  MyTheme
}
}
load(paste0(repSav,"/Tables/gfTablesBrutes.RData"))
@
\FloatBarrier
}{}
<<TabAbroutissement, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=2, fig.cap= "Importance de l'abroutissement",results='asis', eval=F, include=F>>=
# Mis hors service pour l'instant

# cat("\\subsubsection{Abroutissement}\n
# L'histogramme de la figure \\ref{fig:TabRege} représente le taux d'abroutissement des semis de hauteur inférieure à 1,50 m. Ne sont représentées ici que les 2 classes de semis susceptibles d'être abrouties par le gibier du fait de leur faible hauteur.")
# if (dim(Rege_Sel)[1] > 0) {
# setwd(repGF)
# load("Tables/gfDonneesBrutes.Rdata")

# Essences_Rege <- filter(EssRegeneration,
#                         NumForet==Choix) %>%
#   select(Essence) %>%
#   unlist() %>%
#   unname()


Essences_Rege_ALIBI <- data.frame(Essence=rep(Essences_Rege,1),
                                  Abroutis=rep(1,length(Essences_Rege)),
                                  stringsAsFactors=F)


t1 <- subset(Reges, NumForet==Choix &
               Cycle==DernierCycle &
               Rejet==0,
             select=c("Abroutis","Essence","Class1")) %>%
  full_join(Essences_Rege_ALIBI) %>%
  mutate(Class1=ifelse(is.na(Class1),0,Class1))

if (dim(t1)[1] > 0) {
  cat("\\subsubsection{Abroutissement}
L'histogramme de la figure \\ref{fig:TabAbroutissement} représente le taux d'abroutissement des semis de classe 1 (hauteur comprise entre 0,5 m et à 1,50 m) pour les",length(Essences_Rege),"principales essences.\\\\Cette classe est la seule à être représentée car la plus sensible à l'abroutissement.\\\\")

  # if (Eval_Comment==T) {
  #   Comment <- filter(Comments, Section=="2.5.1.4")
  #   cat(Comment$Texte)
  # }


  posf <- which(t1$Abroutis=="f" | t1$Abroutis==0 | is.na(t1$Abroutis))
  # post <- which(t1$Abroutis=="t")
  post <- c(1:dim(t1)[1])[-posf]
  t1$Abroutis[posf] <- "non"
  t1$Abroutis[post] <- "oui"
  t1$Abroutis[-c(post,posf)] <- "non" # Par défaut les vides ou les erreurs sont notées "non"
  # t1 <- summaryBy(Recouv + Class1 ~ Abroutis, data=t1, FUN=sum, keep.names=T)
  t1 <- mutate(t1,
               # Recouv=as.numeric(Recouv),
               Class1=as.numeric(Class1)) %>%
    group_by(Essence,Abroutis) %>%
    dplyr::summarise(Class1=sum(Class1)) %>% #Recouv=sum(Recouv),
    ungroup()
t1$Abroutis <- factor(t1$Abroutis, levels=c("oui","non"))


if (length(unique(t1$Abroutis))==1) {
  t1[2,] <- c(levels(t1$Abroutis)[!levels(t1$Abroutis) %in% factor(t1$Abroutis)],0,0)
  # t1$Recouv <- as.numeric(as.character(t1$Recouv))
  t1$Class1 <- as.numeric(as.character(t1$Class1))
  }
t1 <- t1[order(t1$Abroutis),]
# if (sum(t1$Recouv)!=0) {
#   t1$Recouv <- t1$Recouv/sum(t1$Recouv)
# }
if (sum(t1$Class1)!=0) {
  t1$Class1 <- t1$Class1/sum(t1$Class1)
}
t1.m <- filter(t1,
               is.element(Essence,Essences_Rege)) %>%
                 melt(id=c("Essence","Abroutis"))
t1.m <- t1.m[t1.m$Abroutis=="oui",]
# ggplot(t1.m, aes(x=variable, y=value, fill=factor(Abroutis))) + geom_bar(stat = "identity", position='fill',colour="black") +


if (dim(t1.m)[1] > 0) {
  Y=max(t1.m$value,na.rm=T)
  Y=ifelse(Y < 1,
           1,Y)

ggplot() +
  geom_bar(t1.m,
           mapping=aes(x=variable,y=value,fill=Essence),
           stat="identity",position='dodge',colour="black",width=0.5) +
  # scale_fill_manual(values=c("black","white")) +
  ggplot2::geom_text(t1.m,
                     mapping=aes(x=variable,y=value,group=Essence,
                                 label=paste0(round(value*100,0)," %")),
                     vjust=-1, size=2.5,
                     position=position_dodge(width=0.5)) +
  geom_vline(xintercept=1.5,linetype=2) +
  scale_y_continuous(labels=percent,
                     limits=c(0,1*Y)) +
  scale_x_discrete(expand=c(0,1),
                   label=c("Classe 1 \n(50 cm < H < 1.50 m)")) +
    scale_fill_manual(values=Palette_Essence_Rege) +
  guides(fill=guide_legend(title="Abroutissement",ncol=2)) +
  labs(x="", y="") +
  MyTheme
}
}
# load(paste0(repSav,"/Tables/gfTablesBrutes.RData"))
@
\FloatBarrier
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% \subsection{Petits bois}

<<PetitBois, echo=F, fig.pos='H', fig.height=3, fig.cap= "Analyse des petits bois par essence et qualité", warning=F, include=F, eval=F>>=
# ArbresEnTour <- Arbres
tab <- subset(ArbresEnTour, Cycle==DernierCycle & Cat=="PB")
# tab <- merge(tab,EssReg[,2:3], by="Essence", all.x=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux_EssReg1)
tab <- tab[order(tab$EssReg),]
tab$Qual <- factor(tab$Qual, levels=c("A","A-","B+","B","B-","C+","C","C-","D"))
tab <- tab[order(tab$Qual),]
t1 <- summaryBy(Gha ~ EssReg + Qual, data=tab, FUN= sum, na.rm=T, keep.names=T)
t1$Gha <- t1$Gha/NbrePlac
names(t1)[3] <- "Gha"
ggplot(t1, aes(x=Qual, y=Gha, fill=EssReg)) +
  geom_bar(stat = "identity", position='stack') +
  scale_fill_manual(values=ColPalette_EssReg) +
  labs(x="Qualité", fill="", y="G (m2/ha)") +
  MyTheme1
@
}{
Aucun élément de régénération inventorié
}

\subsection{Sous-étage : perches et taillis}
% \textcolor{ForestGreen}{Pour la suite, ne faudrait-il pas regrouper les figures sur 1 page max (comme sur l'ancien modèle) pour éviter impression de vide/creux (sans texte)}
<<Comment_2.5.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.2")
cat(Comment$Texte)
@

\subsubsection{Perches}

<<Comment_2.5.2.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.2.1")
cat(Comment$Texte)
@
% \textcolor{red}{Garder que les essences objectifs ?}

% Dans le tableau \ref{Tab_Dual_Per} figurent les densités de tiges et les surfaces terrières moyennes des perches. On a distingué les différentes essences avant de s'intéresser à la moyenne de l'ensemble du dispositif.
Le tableau \ref{Tab_Dual_Per} présente le nombre de tiges et la surface terrière des perches par essence.
 % \textcolor{red}{(essences présentes à plus de 1\% de la densité totale -rappel AFI ?)}

<<Tab_Dual_Per, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=T, include=T>>=
t_Niveaux <- filter(gfForetPer_EssReg,
             Cycle == DernierCycle &
               NumForet == Choix &
               Nha > 0) %>%
  rename(Essence=EssReg) %>%
  arrange(-Nha)
# Niveaux_EssReg <- unique(gfForetPer_EssRegClasse$EssReg)
Niveaux_EssReg <- unique(t_Niveaux$Essence)


# %%%%%%%%%% Tableau 1
t <- filter(gfForetPer_,
            Cycle == DernierCycle & NumForet==Choix) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),

         CV_Nha=round(CV_Nha,0),
         CV_Gha=round(CV_Gha,0),
         CV_Vha=round(CV_Vha,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1)) %>%
  select(-one_of(c("NbrePlacettes","PoidsPlacettes"))) %>%
  melt(id=c("NumForet","Foret","Cycle")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,0),"-",round(Nha+Er_Nha*Nha/100,0),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,0),"-",round(Vha+Er_Vha*Vha/100,0),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
             stat=variable,
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat) & stat!="Moy") %>%
  arrange(variable,stat) %>%
  dcast(NumForet + Foret + stat ~ variable)
t2 <- select(t1,stat,Nha,Gha) %>% #,NbrePlacettes
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))

t3 <- rename_(t2,
          "N"="Nha",
          "G"="Gha",
          " "="stat")

t_SAV1 <- t3
Digits_SAV1 <- rep(0,4)





# %%%%%%%%%% Tableau 2
t <- filter(gfForetPer_EssReg,
            Cycle == DernierCycle & NumForet == Choix &
              Nha > sum(Nha,na.rm=T)*0.00) %>% #Seuil initialement à 0.01 mis à 0 (=enlevé)
  rename(Essence=EssReg) %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg)) %>%
  # arrange(-Nha) %>%
  arrange(Essence) %>%

  mutate(Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha >= 1,
                    round(Part_Nha,digits=0),
                    Part_Nha),
         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha < 1,
                    "$\\approx$0",
                    Part_Nha),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha >= 1,
                    round(Part_Gha,digits=0),
                    Part_Gha),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha < 1,
                    "$\\approx$0",
                    Part_Gha),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha >= 1,
                    round(Part_Vha,digits=0),
                    Part_Vha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha < 1,
                    "$\\approx$0",
                    Part_Vha),

         Nha=ifelse(Nha > 0 & Nha >= 1,
                    round(Nha,digits=0),
                    Nha),
         Nha=ifelse(Nha > 0 & Nha < 1,
                    "$\\approx$0",
                    Nha),
         Gha=ifelse(Gha > 0 & Gha >= 10^(-1),
                    round(Gha,digits=1),
                    Gha),
         Gha=ifelse(Gha > 0 & Gha < 10^(-1),
                    "$\\approx$0",
                    Gha),
         Vha=ifelse(Vha > 0 & Vha >= 1,
                    round(Vha,digits=0),
                    Vha),
         Vha=ifelse(Vha > 0 & Vha < 1,
                    "$\\approx$0",
                    Vha),

         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
         Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}")) %>%
  select(Essence,Nha,Gha)

# --- Total
t_TOT <- filter(gfForetPer_,
             Cycle == DernierCycle & NumForet == Choix &
              Nha > sum(Nha,na.rm=T)*0.00) %>% #Seuil initialement à 0.01 mis à 0 (=enlevé)
  arrange(-Nha) %>%
  mutate(Essence="\\cellcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),

         Nha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}}"),
                  Gha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                  Vha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}}")) %>%
  select(Essence,Nha,Gha)



t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{Essences}"="Essence",
          "\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
          "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha")

Digits=rep(0,dim(t)[2]+1)


t_SAV2 <- t
Digits_SAV2 <- Digits





# %%%%%%%%%% Impression des tableaux
cat("\\begin{table}[H]
    \\centering")
print(xtable(t_SAV2,
             digits=Digits_SAV2,
             align=c("M{0cm}|","|M{4cm}|",rep("M{2cm}|",dim(t_SAV2)[2]-1)),
             caption = NULL,
             label   = "Tab_Dual"),
      caption.placement = "bottom",
      hline.after=-1:dim(t_SAV2)[1],
      floating=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
# cat("
# \\vspace{0.25cm}
#     ")
cat("
\\vspace{0.1cm}
    ")
print(xtable(t_SAV1,
             caption = NULL,
             digits=Digits_SAV1,
             align=c("M{0cm}|","|M{4cm}|",rep("M{2cm}|",dim(t_SAV2)[2]-1)),
             label = NULL),
      include.rownames=FALSE,
      include.colnames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=-1:dim(t3)[1],
      floating=F,
      size="\\footnotesize")
cat("\\caption{Nombre de tiges et surface terrière des perches, déclinées par essences}
\\label{Tab_Dual_Per}
    \\end{table}")
@
\FloatBarrier

<<TabPerches_Ancien, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, include=F, eval=F>>=
t1 <- filter(gfPlaPer_EssenceClasseReg1,
             NumForet==Choix & Cycle==DernierCycle) %>%
  mutate(Essence=factor(Essence),
         Reg1=ifelse(Reg1!="D","ABC","D")) %>%
  arrange(Essence) %>%
  group_by(Essence,Reg1) %>%
  summarise(N=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  dcast(Essence ~ Reg1, value.var="N", var.names=c("ABC","D")) %>%
  arrange(-ABC)

if (dim(t1)[2] > 3) {
  Msg <- tk_messageBox(type="ok",
                       message=paste0("Attention il y a des notations de qualités vides pour les perches de ce dispositif"))
}

# tab$Essence <- factor(tab$Essence, levels=Niveaux)
# tab <- tab[order(tab$Essence),]
# t1 <- subset(tab, Reg1!="D")
# t1 <- summaryBy(Nha ~ Essence, data=t1, FUN= sum, na.rm=T, keep.names=T)
# t2 <- subset(tab, Reg1=="D")
# t2 <- summaryBy(Nha ~ Essence, data=t2, FUN= sum, na.rm=T, keep.names=T)
# t1 <- merge(t1, t2, by="Essence", all=T)
# names(t1)[2:3] <- c("ABC", "D")
# t1 <- t1[order(-t1$ABC),]
nbligne <- dim(t1)[1]
a <- data.frame(Essence="Total", ABC=sum(t1$ABC, na.rm=T),D=sum(t1$D, na.rm=T))
t1<- rbind(t1,a) %>%
  mutate(ABC=ABC/NbrePlac,
         D=D/NbrePlac) %>%
  rename_("Essences"="Essence")
# t1[,2:3] <- t1[,2:3]/NbrePlac
Digits = rep(0,dim(t1)[2]+1)
print(xtable(t1,
             digits=Digits,
             caption = "Nombres de perches par essence et par qualités",
             label = "TabPerches"),
      caption.placement = "top",
      include.rownames=F,
      size="\\footnotesize",
      hline.after=c(-1,0,nbligne,nbligne)) #,nbligne+1
IndPerches <- data.frame(Critères=c("Perches (N/ha)",NA),Indicateurs=c("ABC", "D"), Valeurs=t(a[1,2:3]/NbrePlac))
names(IndPerches)[3] <- "Valeurs"
@

<<TabPerches, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
t <- filter(gfForetPer_,
            Cycle == DernierCycle & NumForet==Choix) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0)) %>%
  select(-one_of(c("NbrePlacettes","PoidsPlacettes"))) %>%
  melt(id=c("NumForet","Foret","Cycle")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,0),"-",round(Nha+Er_Nha*Nha/100,0),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,0),"-",round(Vha+Er_Vha*Vha/100,0),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
             stat=variable,
             # gsub(" ", "", Nom1, fixed = T)
             # variable=gsub("CV_","",variable,fixed=T),
             # variable=gsub("Er_","",variable,fixed=T),
             # variable=gsub("IC_","",variable,fixed=T))
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat)) %>%
  arrange(Cycle,variable,stat) %>%
  dcast(NumForet + Cycle + Foret + stat ~ variable)
t2 <- select(t1,Cycle,stat,Nha,Gha) %>% #,NbrePlacettes
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))

t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
  # mutate(stat=str_replace(stat,"textbf{Moyenne}","\\textbf{Moyenne2}"), # Mise en forme du tableau
  #        stat=str_replace(stat,"IC","\\emph{Intervalle de confiance}")) %>%
  rename_("N"="Nha",
          "G"="Gha",
          # "V"="Vha",
          # "Population"="Cat",
          # "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[length(ListPos)+1] <- i
}

t_SAV1 <- t3
ListPos_SAV1 <- ListPos
Digits_SAV1 <- c(rep(0,4),1)
Command_SAV1 <- rep("\\cline{2-4}",length(ListPos))

print(xtable(t3,
             caption = "Principales caractéristiques dendrométriques des perches avec leur précision.\\\\\\scriptsize{N = densité de tiges (tiges/ha), G = surface terrière (m\\up{2}/ha)}",
             caption.placement = "top",
             digits=c(rep(0,4),1), #rep(1,dim(t3)[2]-6),2,1,0),
             align=c("|M{0.5cm}|","M{1cm}|","M{1.8cm}|",rep("M{1.8cm}|",dim(t3)[2]-3),"M{1.5cm}"),
             label = "TabMoyPer"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,0,dim(t3)[1]),
      floating=T,
      add.to.row=list(
        pos=ListPos,
        command=rep("\\cline{2-4}",length(ListPos))), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")


@

\EditIf{\Sexpr{Eval_Qual}}{TRUE}{
La figure \ref{fig:FigPerches} apporte des précisions sur la composition en essences des perches et sur la répartition de la qualité.

<<FigPerches, echo=F, fig.pos='H', fig.height=3, fig.cap="Analyse des perches par essence, qualité et classe de diamètre", warning=F, include = Eval_Qual, eval = Eval_Qual>>=
t1 <-
  gfForetPer_EssRegClasse %>%
  filter(Cycle == DernierCycle & NumForet == Choix & Nha > 0) %>%
  rename(Essence = EssReg) %>%
  select(Essence, Classe, Nha) %>%
  mutate(
    Essence = factor(Essence, levels = Niveaux_EssReg[length(Niveaux_EssReg):1])
  ) %>%
  # arrange(-Nha) %>%
  arrange(Essence)

t1_lim <- group_by(t1,
                   Classe) %>%
  summarise(Nha=sum(Nha,na.rm=T))

Y=max(t1_lim$Nha)
# Y=ifelse(Y==0,
#          10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y < 250) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
# }
# if (Y < 100) {
# by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*100
# }
# if (Y < 50) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
# }
# if (Y < 10) {
#   by_VALUE <- 1
# }
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

# t1 <- summaryBy(Nha ~ EssReg + Classe, data=tab, FUN= sum, na.rm=T, keep.names=T)
# t1$Nha <- t1$Nha/NbrePlac
p1 <- ggplot(t1, aes(x=factor(Classe), y=Nha, fill=Essence)) +
  geom_bar(stat = "identity", position='stack',width=0.5) +
  scale_fill_manual(name="Essences",values=Palette_Essence) +
  scale_y_continuous(name="Nombre de semis à l'hectare",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,
                                by_VALUE),
                     expand=c(0,0)) +
  labs(x="Classe de diamètre", y="N (tiges/ha)") +
  MyTheme1 + theme(legend.title=element_text(size=9))

# t2 <- summaryBy(Nha ~ Reg1 + Classe, data=tab, FUN= sum, na.rm=T, keep.names=T)
# t2$Nha <- t2$Nha/NbrePlac
t2 <- filter(gfForetPer_ClasseReg1, Cycle==DernierCycle) %>%
  select(Classe,Reg1,Nha) %>%
  rename(Reg1=Reg1)

t2_lim <- group_by(t2,
                   Classe) %>%
  summarise(Nha=sum(Nha,na.rm=T))

Y=max(t2_lim$Nha)
# Y=ifelse(Y==0,
#          10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y < 250) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
# }
# if (Y >= 100) {
# by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*100
# }
# if (Y < 50) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
# }

# if (Y < 250) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
# }
# if (Y < 100) {
# by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*100
# }
# if (Y < 50) {
#   by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
# }
# if (Y < 10) {
#   by_VALUE <- 1
# }
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p2 <- ggplot(t2, aes(x=factor(Classe), y=Nha, fill=Reg1)) +
  geom_bar(stat = "identity", position='stack',width=0.5) +
  # scale_fill_grey() +
  scale_fill_manual(values=QualPalette) +
  scale_y_continuous(name="Nombre de semis à l'hectare",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,
                                by_VALUE),
                     expand=c(0,0)) +
  labs(x="Classe de diamètre", y="N (tiges/ha)", fill="Qualité") +
  MyTheme1 + theme(legend.title=element_text(size=9))
grid.arrange(p1, p2, widths=c(0.56, 0.44), ncol=2)
@


% \subsection{Perches et Taillis}\label{sec:PerchesTaillis_Global}
%
% \subsubsection{Variables dendrométriques}
%
% \paragraph{Perches}

<<TabMoyDispPer, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=

t <- filter(gfForetPer_,
            Cycle == DernierCycle & NumForet == Choix) %>%
  melt(id=c("NumForet","Foret","Cycle","NbrePlacettes")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret + NbrePlacettes ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,1),"-",round(Nha+Er_Nha*Nha/100,1),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,1),"-",round(Vha+Er_Vha*Vha/100,1),"]")) %>%
         # IC_VhaIFN=paste0("[",round(VhaIFN-Er_VhaIFN*VhaIFN/100,1),"-",round(VhaIFN+Er_VhaIFN*VhaIFN/100,1),"]"),
         # IC_AcctG=paste0("[",round(AcctG-Er_AcctG*AcctG/100,2),"-",round(AcctG+Er_AcctG*AcctG/100,1),"]"),
         # IC_AcctV=paste0("[",round(AcctV-Er_AcctV*AcctV/100,1),"-",round(AcctV+Er_AcctV*AcctV/100,1),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret","NbrePlacettes")) %>%
  mutate(stat=variable,
         variable=str_replace(variable,"CV_",""),
         variable=str_replace(variable,"Er_",""),
         variable=str_replace(variable,"IC_",""),
         stat=str_replace(stat,"_Nha",""),
         stat=str_replace(stat,"_Gha",""),
         stat=str_replace(stat,"_Vha",""),
         stat=str_replace(stat,"_AcctGper",""),
         stat=str_replace(stat,"_AcctVper",""),
         stat=str_replace(stat,"Nha","Moy"),
         stat=str_replace(stat,"Gha","Moy"),
         stat=str_replace(stat,"Vha","Moy"),
         stat=str_replace(stat,"AcctGper","Moy"),
         stat=str_replace(stat,"AcctVper","Moy"),
         stat=factor(stat,levels=c("Moy","CV","Er","IC"))) %>%
  filter(!is.na(stat)) %>%
  arrange(Cycle,variable,stat) %>%
  dcast(NumForet + Cycle + Foret + NbrePlacettes + stat ~ variable)
t2 <- select(t,Cycle,stat,Nha,Gha,Vha,NbrePlacettes) %>%
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))
t3 <- MultiRow(t2,c(1,6)) %>%
  rename_("N"="Nha",
          "G"="Gha",
          "V"="Vha",
          # "Population"="Cat",
          "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[i] <- i
}

print(xtable(t3,
             caption = "Principales caractéristiques dendrométriques des perches à l'échelle de la forêt avec leur précision.\\\\\\scriptsize{N = densité de tiges (/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)}",
             caption.placement = "top",
             digits=c(rep(0,4),rep(1,dim(t3)[2]-4),0),
             align=c("|M{0.5cm}|","M{1cm}|","M{1.8cm}|",rep("M{1.8cm}|",dim(t3)[2]-3),"M{1.5cm}"),
             label = "TabMoyDispPer"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,0,dim(t3)[1]),
      add.to.row=list(
        pos=ListPos,
        command=rep(paste0("\\cline{2-",dim(t3)[2],"}"),length(ListPos))), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")
@
}{}

La figure \ref{fig:VarDendroPer} illustre la variabilité, entre les placettes, du nombre de tiges et de la surface terrière des perches.

<<VarDendroPer, echo=F, fig.pos='H', size='footnotesize', include=TRUE, fig.height=2, fig.width=4.5, fig.cap="Variabilité des principales caractéristiques dendrométriques pour les perches", error=F, comment=F, warning=F, message=F>>=

t <- filter(gfPlaPer_,Cycle==DernierCycle) %>%
  select(-NumPlac) %>%
  melt(id=c("NumForet","Cycle"))
  # mutate(log=log(value))
tN <-filter(t, variable=="Nha") %>%
  mutate(variable="N")
tG <-filter(t, variable=="Gha") %>%
  mutate(variable="G")
tV <-filter(t, variable=="Vha") %>%
  mutate(variable="V")
tAcctG <-filter(t, variable=="AcctGper") %>%
  mutate(variable="AcctGper")
tAcctV <-filter(t, variable=="AcctVper") %>%
  mutate(variable="AcctVper")

p1 <- ggplot() +
  geom_boxplot(tN,mapping=aes(variable,value)) +
  scale_y_continuous(limits=c(0,max(tN$value,na.rm=T)*1.1),
                     # breaks=floor(seq(0,max(tN$value,na.rm=T)*1.1,max(tN$value,na.rm=T)*1.1/4)/125+0.5)*125,
                     expand=c(0,0),
                     name="(tiges/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"), #element_text(hjust=1,angle=0)
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #blue

p2 <- ggplot() +
  geom_boxplot(tG,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tG$value,na.rm=T)+max(tG$value,na.rm=T)*0.1),
                       name="(m2/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #royalblue4
# p3 <- ggplot() +
#   geom_boxplot(tV,mapping=aes(variable,value)) +
#     scale_y_continuous(expand=c(0,0),
#                        limits=c(0,max(tV$value,na.rm=T)+max(tV$value,na.rm=T)*0.1),
#                        name="(m3/ha)") +
#   theme_bw() +
#   theme(axis.title.x=element_blank(),
#         axis.title.y=element_text(size=9,colour="navy"),
#         axis.ticks.x=element_blank(),
#         axis.line.x=element_blank(),
#         axis.text.x=element_text(size=9,colour="springgreen4"),
#         axis.text.y=element_text(size=7,colour="navy")) #navy
# p4 <- ggplot() +
#   geom_boxplot(tAcctG,mapping=aes(variable,value)) +
#     scale_y_continuous(expand=c(0,0),
#                        limits=c(0,max(tAcctG$value,na.rm=T)+max(tAcctG$value,na.rm=T)*0.1),
#                        name="(m2/ha/an)") +
#   theme_bw() +
#   theme(axis.title.x=element_blank(),
#         axis.title.y=element_text(size=9,colour="navy"),
#         axis.ticks.x=element_blank(),
#         axis.line.x=element_blank(),
#         axis.text.x=element_text(size=9,colour="springgreen4"),
#         axis.text.y=element_text(size=7,colour="navy")) #navy
# p5 <- ggplot() +
#   geom_boxplot(tAcctV,mapping=aes(variable,value)) +
#     scale_y_continuous(expand=c(0,0),
#                        limits=c(0,max(tAcctV$value,na.rm=T)+max(tAcctV$value,na.rm=T)*0.1),
#                        name="(m3/ha/an)") +
#   theme_bw() +
#   theme(axis.title.x=element_blank(),
#         axis.title.y=element_text(size=9,colour="navy"),
#         axis.ticks.x=element_blank(),
#         axis.line.x=element_blank(),
#         axis.text.x=element_text(size=9,colour="springgreen4"),
#         axis.text.y=element_text(size=7,colour="navy")) #navy
grid.arrange(p1,p2,widths=c(1,1)) # ,p4,p5
@
% {\Huge Rajouter figure !!}
\FloatBarrier

% \textcolor{red}{Attention ici aussi, seuil de densité à 1\%}
<<TabCompoPerches, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
t <- filter(gfForetPer_EssReg,
             Cycle == DernierCycle & NumForet == Choix &
              Nha > sum(Nha,na.rm=T)*0.00) %>% #Seuil initialement à 0.01 mis à 0 (=enlevé)
  rename(Essence=EssReg) %>%
  arrange(-Nha) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),
         # AcctG=round(AcctG,2),
         # AcctV=round(AcctV,2),
         # VcHa=round(VcHa,1),
         # VpHa=round(VpHa,1),
         # Gain=round(Gain,2),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),
         # Er_AcctG=round(Er_AcctG,1),
         # Er_AcctV=round(Er_AcctV,1),
         # Er_VcHa=round(Er_VcHa,1),
         # Er_VpHa=round(Er_VpHa,1),
         # Er_Gain=round(Er_Gain,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),
         # Tot_AcctG=sum(AcctG,na.rm=T),
         # Tot_AcctV=sum(AcctV,na.rm=T),
         # Tot_VcHa=sum(VcHa,na.rm=T),
         # Tot_VpHa=sum(VpHa,na.rm=T),
         # Tot_Gain=sum(Gain,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         # Part_AcctG=round(AcctG/Tot_AcctG*100,1),
         # Part_AcctV=round(AcctV/Tot_AcctV*100,1),
         # Part_VcHa=round(VcHa/Tot_VcHa*100,1),
         # Part_VpHa=round(VpHa/Tot_VpHa*100,1),
         # Part_Gain=round(Gain/Tot_Gain*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
                  Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
                  Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}")) %>%
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                    #        "}"))) %>%
                  # AcctG=paste0("\\footnotesize{",
                  #   AcctG,
                  #   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                  #   Part_AcctG,
                  #   "\\%)} ",
                  #   ifelse(!is.na(Er_AcctG),
                  #          paste0("\\textcolor{Gray}{±",
                  #                 Er_AcctG,
                  #                 "\\%}}"),
                  #          "}")),
                  # AcctV=paste0("\\footnotesize{",
                  #   AcctV,
                  #   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                  #   Part_AcctV,
                  #   "\\%)} ",
                  #   ifelse(!is.na(Er_AcctV),
                  #          paste0("\\textcolor{Gray}{±",
                  #                 Er_AcctV,
                  #                 "\\%}}"),
                  #          "}")),
                  # VcHa=paste0("\\footnotesize{",
                  #   VcHa,
                  #   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                  #   Part_VcHa,
                  #   "\\%)} ",
                  #   ifelse(!is.na(Er_VcHa),
                  #          paste0("\\textcolor{Gray}{±",
                  #                 Er_VcHa,
                  #                 "\\%}}"),
                  #          "}")),
                  # VpHa=paste0("\\footnotesize{",
                  #   VpHa,
                  #   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                  #   Part_VpHa,
                  #   "\\%)} ",
                  #   ifelse(!is.na(Er_VpHa),
                  #          paste0("\\textcolor{Gray}{±",
                  #                 Er_VpHa,
                  #                 "\\%}}"),
                  #          "}")),
                  # Gain=paste0("\\footnotesize{",
                  #   Gain,
                  #   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                  #   Part_Gain,
                  #   "\\%)} ",
                  #   ifelse(!is.na(Er_Gain),
                  #          paste0("\\textcolor{Gray}{±",
                  #                 Er_Gain,
                  #                 "\\%}}"),
                  #          "}"))) %>%
  select(Cycle,Essence,Nha,Gha)

# --- Total
t_TOT <- filter(gfForetPer_,
             Cycle == DernierCycle & NumForet == Choix &
              Nha > sum(Nha,na.rm=T)*0.01) %>%
  arrange(-Nha) %>%
  mutate(Essence="\\cellcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),

         Nha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
                  Gha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
                  Vha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}}")) %>%
                    # ifelse(!is.na(Er_Vha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Vha,
                    #               "\\%}}"),
                    #        "}"))) %>%
  select(Cycle,Essence,Nha,Gha)



t <- rbind(t,t_TOT) %>%
  MultiRow(1) %>%
    rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha")

ListPos <- list()
for (i in 1:(dim(t)[1]-1)) {
  ListPos[length(ListPos)+1] <- i
}

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)

# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]
Digits=c(0,0,3,3,3,4,4,3,3,4)
Digits=rep(0,dim(t)[2]+1)


t_SAV2 <- t
ListPos_SAV2 <- ListPos
Digits_SAV2 <- Digits
Command_SAV2 <- rep("\\cline{2-4}",length(ListPos))


print(xtable(t,
             digits=Digits,
             align=c("M{0cm}|","|M{1.4cm}|",rep("M{1.4cm}|",dim(t)[2]-1)),
             caption = "Répartition de la densité de perches par essences",
             label   = "TabCompoPerches"),
      caption.placement = "bottom",
      hline.after=c(-1,0,dim(t)[1]),
      floating=T,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      add.to.row=list(
        pos=ListPos,
        command=rep("\\cline{2-4}",length(ListPos))),
      size="\\footnotesize")



# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
@
\FloatBarrier

La figure \ref{fig:CompoRadarPerches} présente la part de chaque essence en nombre de tiges et surface terrière.

<<CompoRadarPerches, echo=F, warning=F, size='footnotesize', fig.height=3, fig.cap="Importance relative des différentes essences pour les perches", fig.pos="H">>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetPer_EssReg,
#              Cycle == DernierCycle &
#                NumForet == Choix &
#                Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   arrange(-Gha)
#
# # ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

# ----- Tables figures
t_Radar <- filter(gfForetPer_EssReg,
             Cycle == DernierCycle & NumForet == Choix &
               Nha > 0) %>%
  rename(Essence=EssReg) %>%
  select(Essence,
         Nha,Gha) %>% #,VhaIFN # ,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  mutate(Essence=factor(Essence,
                        levels=Niveaux_EssReg[length(Niveaux_EssReg):1])) %>%
  # arrange(-Nha) %>%
  arrange(Essence) %>%
  rename(N=Nha,
         G=Gha) # Vc=VcHa,Vp=VpHa
  # group_by(EssReg) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  # mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
  # arrange(Essence)

t_Radar.m <- melt(t_Radar, id="Essence") %>%
  group_by(variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="N",
                      paste0(round(Ratio,3)*100," %"),
                      label),
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="V",
                      paste0(round(value,1)," m3/ha"),
                      label),
         label=ifelse(variable=="AcctGper",
                      paste0(round(value,2)," m2/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="AcctVper",
                      paste0(round(value,2)," m3/ha/an"), #\U020AC
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), # &#8364
                      label),
         label=ifelse(variable=="Gainper",
                      paste0(round(value,0)," euros/ha/an"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,
                        levels=Niveaux_EssReg[length(Niveaux_EssReg):1])) %>%
  arrange(variable,Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()

ggplot() +
  geom_bar(t_Radar.m, mapping=aes(x=variable, y=value, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
  #                                       y=0.5,
  #                                       label=variable),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
    geom_label(t_Radar_Text, mapping=aes(x=variable,
                                        y=0.5,
                                        label=variable),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=variable,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") +
  # geom_label_repel(t_Radar.m,
  #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     name="Part relative des essences",
                     labels = percent) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m$Essence)) > 3,
                                         round(length(unique(t_Radar.m$Essence))/4,0),
                                         1),
                             bycol=TRUE,
                             reverse=T)) +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())


@
\FloatBarrier

% \noindent\textbf{Dégâts de faune}\\
%\textcolor{red}{Positionner plutôt avant évolution du sous-étage - confirmer avec JT}
% L'histogramme de la figure \ref{fig:Hist_DegatsFaune} représente la part de la densité des perches de l'inventaire endommagées par la faune (frottis).\\
<<Hist_DegatsFaune, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=2, fig.cap= "Importance des dégâts de faune",results='asis',eval=F,include=F>>=
# df_ALIBI <- filter(gfForetDen_EssReg,
#                    NumForet==Choix & Cycle > 1) %>%
#   rename(Essence=EssReg)
#
# Essences_ALIBI <- expand.grid(NumForet=Choix,
#                               Cycle=2:DernierCycle,
#                             Essence=unique(df_ALIBI$Essence),
#                             stringsAsFactors=F) %>%
#   data.frame()
##### A trier (prendre Essence ou EssReg)
# order_DF <- filter(gfForetDen_Essence,
#                    NumForet==Choix & Cycle==DernierCycle) %>%
#   arrange(desc(Gha))
# Essence_ORDER <- order_DF$Essence
Essences_ALIBI <- data.frame(Essence=rep(Essences_Seuil,1),
                                  Caract2=rep("X",length(Essences_Seuil)),
                                  stringsAsFactors=F)
####

t1 <- filter(Arbres, NumForet==Choix &
               Cycle==DernierCycle &
               !is.na(Caract2)) %>%
  select(Caract2,Essence,Nha) %>%
  full_join(Essences_ALIBI) %>%
  mutate(Nha=ifelse(is.na(Nha),0,Nha),
         Caract2=ifelse(is.na(Caract2),"non",Caract2))



  df <- mutate(t1,
               Caract2=ifelse(Caract2=="X","oui",Caract2),
               Caract2=factor(Caract2,levels=c("oui","non"))) %>%
    group_by(Essence,Caract2) %>%
    summarise(Nha=sum(Nha)) %>%
    ungroup() %>%
    mutate(Nha_Tot=sum(Nha),
           Nha_Part=Nha/Nha_Tot,
           Nha_Tot=NULL,
           Nha=NULL) %>%
    # filter(Nha_Part > 0) %>%
    melt(id=c("Essence","Caract2"))


  Y=max(df$value,na.rm=T)

ggplot() +
  geom_bar(df,
           mapping=aes(x=variable,y=value,fill=Essence),
           stat="identity",position='dodge',colour="black",width=0.5) +
  # scale_fill_manual(values=c("black","white")) +
  ggplot2::geom_text(df,
                     mapping=aes(x=variable,y=value,group=Essence,
                                 label=paste0(round(value*100,0)," %")),
                     vjust=-1, size=2.5,
                     position=position_dodge(width=0.5)) +
  geom_vline(xintercept=1.5,linetype=2) +
  scale_y_continuous(labels=percent, limits=c(0,1.1*Y)) +
  scale_x_discrete(expand=c(0,1),
                   label=c("Classe 1 \n(50 cm < H < 1.50 m)")) +
    scale_fill_manual(values=Palette_Essence) +
  guides(fill=guide_legend(title="Dégâts de faune",ncol=2)) +
  labs(x="", y="") +
  MyTheme

@
\FloatBarrier

\subsubsection{Taillis}
\EditIf{\Sexpr{Eval_Taillis}}{TRUE}{

<<Comment_2.5.2.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.5.2.2")
cat(Comment$Texte)
@

Le tableau \ref{Tab_Dual_Taillis} présente le nombre de tiges et la surface terrière du taillis par essence.
% \textcolor{red}{N.B : seuil de 1\% supprimé dans le tableau (sinon seulement 3 groupes d'essences sortaient - Charme, Autres feuillus, Autres ligneux)}
<<Tab_Dual_Taillis, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=Eval_Taillis, include=Eval_Taillis>>=
t_Niveaux <- filter(gfForetTaillis_EssReg,
             Cycle == DernierCycle &
               NumForet == Choix &
               Nha > 0) %>%
  rename(Essence=EssReg) %>%
  arrange(-Nha)
# Niveaux_EssReg <- unique(gfForetPer_EssRegClasse$EssReg)
Niveaux_EssReg <- unique(t_Niveaux$Essence)

# %%%%%%%%%% Tableau 1
t <- filter(gfForetTaillis_,
            Cycle == DernierCycle & NumForet==Choix) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,ifelse(Gha < 0.1,2,1)),
         Vha=round(Vha,ifelse(Vha < 0.1,2,1)),

         CV_Nha=round(CV_Nha,0),
         CV_Gha=round(CV_Gha,0),
         CV_Vha=round(CV_Vha,0),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1)) %>%
  select(-one_of(c("NbrePlacettes","PoidsPlacettes"))) %>%
  melt(id=c("NumForet","Foret","Cycle")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,0),"-",round(Nha+Er_Nha*Nha/100,0),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,0),"-",round(Vha+Er_Vha*Vha/100,0),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret")) %>%
  mutate(variable=as.character(variable))
t1 <- mutate(t,
             stat=variable,
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat) & stat!="Moy") %>%
  arrange(variable,stat) %>%
  dcast(NumForet + Foret + stat ~ variable)
t2 <- select(t1,stat,Nha,Gha) %>% #,NbrePlacettes
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))

t3 <- rename_(t2,
          "N"="Nha",
          "G"="Gha",
          " "="stat")

t_SAV1 <- t3
Digits_SAV1 <- rep(0,4)





# %%%%%%%%%% Tableau 2
t <- filter(gfForetTaillis_EssReg,
            Cycle == DernierCycle & NumForet == Choix) %>% # &
              # Nha > sum(Nha,na.rm=T)*0.01) %>% # Seuil
  rename(Essence=EssReg) %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg)) %>%
  # arrange(-Nha) %>%
  arrange(Essence) %>%
  # mutate(Nha=round(Nha,0),
  #        Gha=round(Gha,ifelse(Gha < 0.1,2,1)),
  #        Vha=round(Vha,ifelse(Vha < 0.1,2,1)),
  #
  #        Er_Nha=round(Er_Nha,1),
  #        Er_Gha=round(Er_Gha,1),
  #        Er_Vha=round(Er_Vha,1),
  #
  #        Tot_Nha=sum(Nha,na.rm=T),
  #        Tot_Gha=sum(Gha,na.rm=T),
  #        Tot_Vha=sum(Vha,na.rm=T),
  #
  #        Part_Nha=round(Nha/Tot_Nha*100,1),
  #        Part_Gha=round(Gha/Tot_Gha*100,1),
  #        Part_Vha=round(Vha/Tot_Vha*100,1),
  #        Nha=paste0("\\footnotesize{",
  #                   Nha,
  #                   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
  #                   Part_Nha,
  #                   "\\%)}}"),
  #        Gha=paste0("\\footnotesize{",
  #                   Gha,
  #                   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
  #                   Part_Gha,
  #                   "\\%)}}"),
  #        Vha=paste0("\\footnotesize{",
  #                   Vha,
  #                   "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
  #                   Part_Vha,
  #                   "\\%)}}")) %>%
mutate(Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha >= 1,
                    round(Part_Nha,digits=0),
                    Part_Nha),
         Part_Nha=ifelse(Part_Nha > 0 & Part_Nha < 1,
                    "$\\approx$0",
                    Part_Nha),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha >= 1,
                    round(Part_Gha,digits=0),
                    Part_Gha),
         Part_Gha=ifelse(Part_Gha > 0 & Part_Gha < 1,
                    "$\\approx$0",
                    Part_Gha),
         Part_Vha=round(Vha/Tot_Vha*100,1),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha >= 1,
                    round(Part_Vha,digits=0),
                    Part_Vha),
         Part_Vha=ifelse(Part_Vha > 0 & Part_Vha < 1,
                    "$\\approx$0",
                    Part_Vha),

         Nha=ifelse(Nha > 0 & Nha >= 1,
                    round(Nha,digits=0),
                    Nha),
         Nha=ifelse(Nha > 0 & Nha < 1,
                    "$\\approx$0",
                    Nha),
         Gha=ifelse(Gha > 0 & Gha >= 10^(-1),
                    round(Gha,digits=1),
                    Gha),
         Gha=ifelse(Gha > 0 & Gha < 10^(-1),
                    "$\\approx$0",
                    Gha),
         Vha=ifelse(Vha > 0 & Vha >= 1,
                    round(Vha,digits=0),
                    Vha),
         Vha=ifelse(Vha > 0 & Vha < 1,
                    "$\\approx$0",
                    Vha),

         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}"),
         Vha=paste0("\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}")) %>%
  select(Essence,Nha,Gha)

# --- Total
t_TOT <- filter(gfForetTaillis_,
             Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-Nha) %>%
  mutate(Essence="\\cellcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,ifelse(Gha < 0.1,2,1)),
         Vha=round(Vha,ifelse(Vha < 0.1,2,1)),

         Er_Nha=round(Er_Nha,1),
         Er_Gha=round(Er_Gha,1),
         Er_Vha=round(Er_Vha,1),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),

         Nha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}}"),
                  Gha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}"),
                  Vha=paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Vha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Vha,
                    "\\%)}}}")) %>%
  select(Essence,Nha,Gha)



t <- rbind(t,t_TOT) %>%
  rename_("\\textbf{Essences}"="Essence",
          "\\textbf{N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}}"="Nha",
          "\\textbf{G\\hspace{1.2cm}\\scriptsize{(m2/ha)}}"="Gha")

Digits=rep(0,dim(t)[2]+1)


t_SAV2 <- t
Digits_SAV2 <- Digits





# %%%%%%%%%% Impression des tableaux
cat("\\begin{table}[h]
    \\centering")
print(xtable(t_SAV2,
             digits=Digits_SAV2,
             align=c("M{0cm}|","|M{4cm}|",rep("M{2cm}|",dim(t_SAV2)[2]-1)),
             caption = NULL,
             label   = "Tab_Dual"),
      caption.placement = "bottom",
      hline.after=-1:dim(t_SAV2)[1],
      floating=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
# cat("
# \\vspace{0.25cm}
#     ")
cat("
\\vspace{0.1cm}
    ")
print(xtable(t_SAV1,
             caption = NULL,
             digits=Digits_SAV1,
             align=c("M{0cm}|","|M{4cm}|",rep("M{2cm}|",dim(t_SAV2)[2]-1)),
             label = NULL),
      include.rownames=FALSE,
      include.colnames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=-1:dim(t3)[1],
      floating=F,
      size="\\footnotesize")
cat("\\caption{Nombre de tiges et surface terrière du taillis, déclinées par essences}
\\label{Tab_Dual_Taillis}
    \\end{table}")
@
\FloatBarrier

<<TabMoyDispTaillis, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=

t <- filter(gfForetTaillis_,
            Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0)) %>%
  melt(id=c("NumForet","Foret","Cycle")) %>%
  mutate(value=round(value,2)) %>%
  dcast(NumForet + Cycle + Foret ~ variable) %>%
  mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,1),"-",round(Nha+Er_Nha*Nha/100,1),"]"),
         IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
         IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,1),"-",round(Vha+Er_Vha*Vha/100,1),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret")) %>%
  mutate(stat=variable,
         variable=str_replace(variable,"CV_",""),
         variable=str_replace(variable,"Er_",""),
         variable=str_replace(variable,"IC_",""),
         stat=str_replace(stat,"_Nha",""),
         stat=str_replace(stat,"_Gha",""),
         stat=str_replace(stat,"_Vha",""),
         stat=str_replace(stat,"_AcctGper",""),
         stat=str_replace(stat,"_AcctVper",""),
         stat=str_replace(stat,"Nha","Moy"),
         stat=str_replace(stat,"Gha","Moy"),
         stat=str_replace(stat,"Vha","Moy"),
         stat=str_replace(stat,"AcctGper","Moy"),
         stat=str_replace(stat,"AcctVper","Moy"),
         stat=factor(stat,levels=c("Moy","CV","Er","IC")),

             value=ifelse(stat=="IC",
                          paste0("\\emph{",value,"}"),
                          value),
             value=ifelse(stat=="Moy",
                          paste0("\\textbf{",value,"}"),
                          value)) %>%
  filter(!is.na(stat)) %>%
  arrange(Cycle,variable,stat) %>%
  dcast(NumForet + Cycle + Foret + stat ~ variable)
t2 <- select(t,Cycle,stat,Nha,Gha) %>%
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","\\\\emph{Intervalle de confiance}"))
t3 <- MultiRow(t2,c(1)) %>%
  rename_("N"="Nha",
          "G"="Gha",
          # "V"="Vha",
          # "Population"="Cat",
          # "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[i] <- i
}

print(xtable(t3,
             caption = "Principales caractéristiques dendrométriques du taillis avec leur précision.\\\\\\scriptsize{N = densité de tiges (/ha), G = surface terrière (m\\up{2}/ha)}",
             caption.placement = "top",
             digits=c(rep(0,4),rep(1,dim(t3)[2]-4),0),
             align=c("|M{0.5cm}|","M{1cm}|","M{2.5cm}|",rep("M{1.8cm}|",dim(t3)[2]-3),"M{1.5cm}"),
             label = "TabMoyDispTaillis"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,0,dim(t3)[1]),
      add.to.row=list(
        pos=ListPos,
        command=rep("\\cline{2-4}",length(ListPos))), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")
@
\FloatBarrier

La figure \ref{fig:VarDendroTaillis} illustre la variabilité, entre les placettes, du nombre de tiges et de la surface terrière du taillis.

<<VarDendroTaillis, echo=F, fig.pos='H', size='footnotesize', fig.height=2, fig.width=3, fig.cap="Variabilité des principales caractéristiques dendrométriques pour le taillis", error=F, comment=F, warning=F, message=F, eval=Eval_Taillis, include=Eval_Taillis>>=

t <- filter(gfPlaTaillis_,Cycle==DernierCycle) %>%
  select(-NumPlac) %>%
  melt(id=c("NumForet","Cycle"))
  # mutate(log=log(value))
tN <-filter(t, variable=="Nha") %>%
  mutate(variable="N")
tG <-filter(t, variable=="Gha") %>%
  mutate(variable="G")
# tV <-filter(t, variable=="Vha") %>%
#   mutate(variable="V")

p1 <- ggplot() +
  geom_boxplot(tN,mapping=aes(variable,value)) +
  scale_y_continuous(limits=c(0,max(tN$value,na.rm=T)*1.1),
                     # breaks=floor(seq(0,max(tN$value,na.rm=T)*1.1,max(tN$value,na.rm=T)*1.1/4)/125+0.5)*125,
                     expand=c(0,0),
                     name="(tiges/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"), #element_text(hjust=1,angle=0)
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #blue

p2 <- ggplot() +
  geom_boxplot(tG,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tG$value,na.rm=T)+max(tG$value,na.rm=T)*0.1),
                       name="(m2/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #royalblue4
# p3 <- ggplot() +
#   geom_boxplot(tV,mapping=aes(variable,value)) +
#     scale_y_continuous(expand=c(0,0),
#                        limits=c(0,max(tV$value,na.rm=T)+max(tV$value,na.rm=T)*0.1),
#                        name="(m3/ha)") +
#   theme_bw() +
#   theme(axis.title.x=element_blank(),
#         axis.title.y=element_text(size=9,colour="navy"),
#         axis.ticks.x=element_blank(),
#         axis.line.x=element_blank(),
#         axis.text.x=element_text(size=9,colour="springgreen4"),
#         axis.text.y=element_text(size=7,colour="navy")) #navy

grid.arrange(p1,p2,widths=c(1,1)) #,p3
@


% \subsubsection{Variables économiques}

<<TabCapitalPer, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
t <- filter(gfForetPer_,
            Cycle == DernierCycle & NumForet == Choix) %>%
  melt(id=c("NumForet","Foret","Cycle","NbrePlacettes")) %>%
  mutate(value=round(value,1)) %>%
  dcast(NumForet + Cycle + Foret + NbrePlacettes ~ variable) %>%
  mutate(IC_VcHa=paste0("[",round(VcHa-Er_VcHa*VcHa/100,1),"-",round(VcHa+Er_VcHa*VcHa/100,1),"]"),
         IC_VpHa=paste0("[",round(VpHa-Er_VpHa*VpHa/100,1),"-",round(VpHa+Er_VpHa*VpHa/100,1),"]"),
         IC_Gainper=paste0("[",round(Gainper-Er_Gainper*Gainper/100,1),"-",round(Gainper+Er_Gainper*Gainper/100,1),"]")) %>%
  melt(id=c("NumForet","Cycle","Foret","NbrePlacettes")) %>%
  mutate(stat=variable,
         variable=str_replace(variable,"CV_",""),
         variable=str_replace(variable,"Er_",""),
         variable=str_replace(variable,"IC_",""),
         stat=str_replace(stat,"_VcHa",""),
         stat=str_replace(stat,"_VpHa",""),
         stat=str_replace(stat,"_Gainper",""),
         stat=str_replace(stat,"VcHa","Moy"),
         stat=str_replace(stat,"VpHa","Moy"),
         stat=str_replace(stat,"Gainper","Moy"),
         stat=factor(stat,levels=c("Moy","CV","Er","IC"))) %>%
  filter(!is.na(stat)) %>%
  arrange(Cycle,variable,stat) %>%
  dcast(NumForet + Cycle + Foret + NbrePlacettes + stat ~ variable)
t2 <- select(t,Cycle,stat,VcHa,VpHa,Gainper,NbrePlacettes) %>%
  mutate(stat=str_replace(stat,"Moy","\\\\textbf{Moyenne}"), # Mise en forme du tableau
         stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
         stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
         stat=str_replace(stat,"IC","Intervalle de confiance"))
t3 <- MultiRow(t2,c(1,dim(t2)[2])) %>%
  rename_("Vc"="VcHa",
          "Vp"="VpHa",
          # "Population"="Cat",
          "Nombre de placettes"="NbrePlacettes",
          " "="stat")
ListPos <- list()
for (i in 1:(dim(t3)[1]-1)) {
  ListPos[i] <- i
}

print(xtable(t3,
             caption = "Principales caractéristiques économiques des perches à l'échelle de la forêt avec leur précision.\\\\\\scriptsize{Vc = valeur de consommation (\\euro{}/ha), Vp = valeur potentielle (\\euro{}/ha), Gain = accroisement en valeur (\\euro{}/ha/an)}",
             caption.placement = "top",
             digits=c(rep(0,4),rep(1,dim(t3)[2]-4),0),
             align=c("|M{0.5cm}|","M{1cm}|","M{2.5cm}|",rep("M{1.8cm}|",dim(t3)[2]-3),"M{1.5cm}"),
             label = "TabCapitalPer"),
      include.rownames=FALSE,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,0,dim(t3)[1]),
      add.to.row=list(
        pos=ListPos,
        command=rep("\\cline{2-5}",length(ListPos))), #9,"\\cmidrule[0.8pt]{2-7}"
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  #                    rep("\\cline{3-6}",3),"\\cmidrule[0.8pt]{2-6}",
                  # rep("\\cline{3-6}",3))
      # ),
      size="\\footnotesize")

@

<<VarEcoPer, echo=F, fig.pos='H', size='footnotesize', include=TRUE, fig.height=2, fig.width=4.5, fig.cap="Variabilité des principales caractéristiques économiques : perches", error=F, comment=F, warning=F, message=F, include=F, eval=F>>=

t <- filter(gfPlaPer_,Cycle==DernierCycle) %>%
  select(-NumPlac) %>%
  melt(id=c("NumForet","Cycle"))
  # mutate(log=log(value))
tVc <-filter(t, variable=="VcHa") %>%
  mutate(variable="Vc")
tVp <-filter(t, variable=="VpHa") %>%
  mutate(variable="Vp")
tGain <-filter(t, variable=="Gainper") %>%
  mutate(variable="Gainper")
# Vmax <- max(tVc$value,tVp$value)
VcMax <- max(tVc$value)
VpMax <- max(tVp$value)

p1 <- ggplot() +
  geom_boxplot(tVc,mapping=aes(variable,value)) +
  scale_y_continuous(limits=c(0,VcMax*1.1),
                     # breaks=floor(seq(0,max(tVc$value,na.rm=T)*1.1,max(tVc$value,na.rm=T)*1.1/4)/125+0.5)*125,
                     expand=c(0,0),
                     name="(euros/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"), #element_text(hjust=1,angle=0)
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #blue

p2 <- ggplot() +
  geom_boxplot(tVp,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,VpMax*1.1),
                       name="(euros/ha)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #royalblue4
p3 <- ggplot() +
  geom_boxplot(tGain,mapping=aes(variable,value)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,max(tGain$value,na.rm=T)+max(tGain$value,na.rm=T)*0.1),
                       name="(euros/ha/an)") +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=9,colour="navy"),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=9,colour="springgreen4"),
        axis.text.y=element_text(size=7,colour="navy")) #navy
grid.arrange(p1,p2,p3,widths=c(1,1,1))
@
% \clearpage
\FloatBarrier

% \subsection{Composition - Perches et taillis}

<<TabCompoTaillis, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
t <- filter(gfForetTaillis_Essence,
            Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-Gha) %>%
  mutate(Nha=round(Nha,0),
         Gha=round(Gha,1),
         Vha=round(Vha,0),

         # Er_Nha=round(Er_Nha,3),
         # Er_Gha=round(Er_Gha,3),
         # Er_Vha=round(Er_Vha,3),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         Part_Vha=round(Vha/Tot_Vha*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Gha=paste0("\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}")) %>%
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
         # Vha=paste0("\\footnotesize{",
         #            Vha,
         #            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Vha,
         #            "\\%)} ",
         #            ifelse(!is.na(Er_Vha),
         #                   paste0("\\textcolor{Gray}{±",
         #                          Er_Vha,
         #                          "\\%}}"),
         #                   "}"))) %>%
  select(Essence,Nha,Gha)

# --- Total
t_TOT <- filter(gfForetTaillis_,
            Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-Gha) %>%
  mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",

         Nha=round(Nha,0),
         Gha=round(Gha,1),
         # Vha=round(Vha,3),

         # Er_Nha=round(Er_Nha,3),
         # Er_Gha=round(Er_Gha,3),
         # Er_Vha=round(Er_Vha,3),

         Tot_Nha=sum(Nha,na.rm=T),
         Tot_Gha=sum(Gha,na.rm=T),
         # Tot_Vha=sum(Vha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,1),
         Part_Gha=round(Gha/Tot_Gha*100,1),
         # Part_Vha=round(Vha/Tot_Vha*100,1),

         # Nha=paste0("\\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Nha,
         #            "\\%)}} \\footnotesize{",
         #            Nha,
         #            "}\\hspace{1.4cm}",
         #            ifelse(!is.na(Er_Nha),
         #                   paste0("\\scriptsize{\\textcolor{Gray}{±",
         #                          Er_Nha,
         #                          "\\%}}"),
         #                   "")),
         Nha=paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}}"),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Gha=paste0("\\textbf{\\footnotesize{",
                    Gha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Gha,
                    "\\%)}}}")) %>%
                    # ifelse(!is.na(Er_Gha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Gha,
                    #               "\\%}}"),
                    #        "}")),
         # Vha=paste0("\\footnotesize{",
         #            Vha,
         #            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
         #            Part_Vha,
         #            "\\%)} ",
         #            ifelse(!is.na(Er_Vha),
         #                   paste0("\\textcolor{Gray}{±",
         #                          Er_Vha,
         #                          "\\%}}"),
         #                   "}"))) %>%
  select(Essence,Nha,Gha)

t <- rbind(t,t_TOT) %>% #,VhaIFN
 rename_("N\\hspace{1.2cm}\\scriptsize{(tiges/ha)}"="Nha",
         "G\\hspace{1.2cm}\\scriptsize{(m2/ha)}"="Gha")
  # rename_("N"="Nha",
  #        "G"="Gha",
  #        "V"="Vha",
  #        "Acct G"="AcctG",
  #        "Acct V"="AcctV",
  #        "Vc"="VcHa",
  #        "Vp"="VpHa")

# # ----- Repères pour figures
# Niveaux_EssReg1 <- unique(t$EssReg)


# t1 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctG,AcctV))
# t2 <- subset(gfForetFpied_Essence, Cycle == DernierCycle & NumForet == Choix, select=c(Essence,VcHa,VpHa,Gain))
# TabCompo <- merge(t1, t2, by="Essence", all=T)
# # names(TabCompo)[2:8] <- c("Nha","Gha","Vha","VhaIFN","VcHa","VpHa","Gain")
# TabCompo <- TabCompo[order(-TabCompo$VcHa),]
Digits=c(0,0,3,3,3,4,4,3,3,4)
Digits=rep(0,dim(t)[2]+1)
print(xtable(t,
             digits=Digits,
             align=c("M{0cm}|","M{1.2cm}",rep("|M{1.4cm}",dim(t)[2]-1)),
             caption = "Répartition de la densité de taillis par essences",
             label   = "TabCompoTaillis"),
      caption.placement = "bottom",
      hline.after=-1:dim(t)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
# IndCompo <- data.frame(Critères=c("Composition (m2/ha)",NA,NA),
#                        Indicateurs=TabCompo$Essence[1:3],
#                        # Valeurs=TabCompo$Gha[1:3])
#                                               Valeurs=TabCompo$G[1:3])
@

<<HistoGhaEssRegPerches, echo=F, size='footnotesize', eval=F, include=F, error=F, comment=F, warning=F, message=F, fig.height=3, fig.cap="Répartition de la surface terrière des perches et du taillis, par classe de diamètre et par regroupements d'essences", fig.pos="H">>=
# ----- Préparation tables figures
t_Niveaux <- filter(gfForetPer_EssReg,
             Cycle == DernierCycle &
               NumForet == Choix &
               Gha > 0) %>%
  rename(Essence=EssReg) %>%
  arrange(-Gha)
# Niveaux_EssReg <- unique(gfForetPer_EssRegClasse$EssReg)
Niveaux_EssReg <- unique(t_Niveaux$Essence)

# t_Histo <- filter(gfForetPer_EssRegClasse,
#              Cycle == DernierCycle & NumForet == Choix) %>%
#   select(EssReg,Classe,
#          Nha,Gha,Vha,AcctG,AcctV,VcHa,VpHa,Gain) %>% #,VhaIFN
#   # full_join(t) %>%
#   arrange(-Vha) %>%
#   rename(N=Nha,
#          G=Gha,
#          V=Vha,
#          Vc=VcHa,
#          Vp=VpHa) %>%
#   group_by(EssReg,Classe) %>%
#   summarise(N=sum(N,na.rm=T),
#             G=sum(G,na.rm=T),
#             V=sum(V,na.rm=T),
#             Vc=sum(Vc,na.rm=T),
#             Vp=sum(Vp,na.rm=T)) %>%
#   ungroup() %>%
#   mutate(EssReg=factor(EssReg,levels=Niveaux_EssReg)) %>%
#   arrange(EssReg)
t_Histo_Taillis <- filter(gfForetTaillis_EssRegClasse,
                          Cycle==DernierCycle) %>%
  select(EssReg,Classe,Gha) %>%
  rename(Taillis=Gha)

t_Histo <- filter(gfForetPer_EssRegClasse,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(EssReg,Classe,
         Gha) %>% #,VhaIFN
  rename(Perches=Gha) %>%
  full_join(t_Histo_Taillis) %>%
  # full_join(t) %>%
  arrange(-Perches) %>%
  melt(id=c("Classe","EssReg"),
       variable.name="Population",
       value.name="G") %>%
  group_by(EssReg,Classe,Population) %>%
  summarise(G=sum(G,na.rm=T)) %>%
  ungroup() %>%
  mutate(EssReg=factor(EssReg,levels=Niveaux_EssReg)) %>%
  filter(!is.na(Classe)) %>%
  arrange(EssReg)

tab_lim <- group_by(t_Histo,
                    Classe,Population) %>%
  summarise(G=sum(G,na.rm=T)) %>%
  ungroup()

t_Histo1 <- filter(t_Histo,
                   Population=="Perches") %>%
  mutate(Classe=Classe-1)
t_Histo2 <- filter(t_Histo,
                   Population=="Taillis") %>%
  mutate(Classe=Classe+1)
# ----- Figures
p1 <-  ggplot() +
  geom_bar(t_Histo1,
           mapping=aes(x=Classe,
                       y=G,
                       fill=EssReg),
           stat = "identity", position = "stack",
           width=1.9) +
    geom_bar(t_Histo2,
           mapping=aes(x=Classe,
                       y=G,
                       fill=EssReg),
           stat = "identity", position = "stack",
           width=1.9) +
  annotate("text",
           # x=0.9*max(tab_lim$Classe,na.rm=T),
           x=12.5,
           y=1.5*max(tab_lim$G,na.rm=T),
           label=paste0("G/ha total = ",
                       round(sum(t_Histo$G,na.rm=T),1),
                       " tiges/ha"),
           colour="firebrick", size=2.5) +
      # annotate("text",
      #      x=c(sort(unique(t_Histo1$Classe,na.rm=T)),
      #      y=1.07*tab_lim$N[tab_lim$Population=="Perches"],
      #      label=paste("Perches\nN/ha =",
      #                  round(tab_lim$N[tab_lim$Population=="Perches"],1),
    #                  " tiges/ha"),
    #      colour="black", size=2.5) +
    geom_label(data.frame(x=c(sort(unique(t_Histo1$Classe,na.rm=T)),
                              sort(unique(t_Histo2$Classe,na.rm=T))),
                          y=c(0.15+tab_lim$G[tab_lim$Population=="Perches"],
                              0.15+tab_lim$G[tab_lim$Population=="Taillis"]),
                          label=c(paste0("Perches\nG/ha = ",
                                        round(tab_lim$G[tab_lim$Population=="Perches"],1),
                                        " tiges/ha"),
                                  paste0("Taillis\nG/ha = ",
                                        round(tab_lim$G[tab_lim$Population=="Taillis"],1),
                                        " tiges/ha"))),
               mapping=aes(x=x,
                           y=y,
                         label=label),
           colour="black", size=2,
           label.padding=unit(0.15,"lines")) +

  # annotate("text",
  #          x=sort(unique(t_Histo2$Classe,na.rm=T)),
  #          y=5+tab_lim$N[tab_lim$Population=="Taillis"],
  #          label=paste("Taillis\nN/ha =",
  #                      round(tab_lim$N[tab_lim$Population=="Taillis"],1),
  #                      " tiges/ha"),
  #          colour="black", size=2.5) +
  scale_fill_manual(values=Palette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(5,max(t_Histo$Classe)+5),
                     breaks=seq(10,max(t_Histo$Classe),5)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              ifelse(floor(max(tab_lim$G)/6/1+0.5)*1 > 0, # remplacer 1 par 10
                                     max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/1+0.5)*1,
                                  max(tab_lim$G) + 1)),
                     breaks=seq(0,
                                ifelse(floor(max(tab_lim$G)/6/1+0.5)*1 > 0,
                                       max(tab_lim$G) +
                                  floor(max(tab_lim$G)/6/1+0.5)*1,
                                max(tab_lim$G) + 1),
                                ifelse(floor(max(tab_lim$G)/6/1+0.5)*1 > 0,
                                       floor(max(tab_lim$G)/6/1+0.5)*1,
                                              0.5))) +
  labs(fill = "Essences\nregroupées", y="G (tiges/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9),
                   legend.position="bottom",
                   legend.direction="horizontal")

# t_Histo.m <- group_by(t_Histo,
#                       EssReg) %>%
#   summarise(N=sum(N,na.rm=T)) %>%
#   ungroup() %>%
#   mutate(EssReg=factor(EssReg,levels=Niveaux_EssReg)) %>%
#   arrange(EssReg) %>%
#   melt(id=c("EssReg"))

# p2 <- ggplot(t_Histo.m,
#              aes(x=variable, y=value, fill=EssReg)) +
#   geom_bar(stat = "identity", position = "fill",
#            width=1) +
#   # annotate("text",
#   #          x=0.8*max(tab_lim$Classe,na.rm=T),
#   #          y=0.8*max(tab_lim$N,na.rm=T),
#   #          label=paste("N/ha =",
#   #                      round(sum(t_Histo$N,na.rm=T),1),
#   #                      " tiges/ha"),
#   #          colour="black", size=2.5) +
#   scale_fill_manual(values=ColPalette) +
#   # scale_x_continuous(expand=c(0,0),
#   #                    limits=c(0,max(t_Histo$Classe)+5),
#   #                    breaks=seq(0,max(t_Histo$Classe),20)) +
#   scale_y_continuous(expand=c(0,0),
#                      labels=percent) +
#   coord_polar(theta="y") +
# # ,
# #                      limits=c(0,
# #                               max(tab_lim$N) +
# #                                   floor(max(tab_lim$N)/6/0.5+0.5)*0.5),
# #                      breaks=seq(0,
# #                                 max(tab_lim$N) +
# #                                   floor(max(tab_lim$N)/6/0.5+0.5)*0.5,
# #                                 floor(max(tab_lim$N)/6/0.5+0.5)*0.5)) +
#   labs(fill="Essences\nregroupées",
#        x="Part relative de la densité") +
#   theme_bw() + MyTheme1 +
#   theme(title=element_text(face='plain'),
#     axis.text.y  = element_blank(),
#     axis.text.x = element_text(size = 7),
#     axis.ticks = element_blank(),
#     axis.title.x=element_text(face='plain',size=9),
#     legend.text = element_text(size = 7),
#     # legend.title = element_text(size=9,face='plain'),
#     legend.position="right",
#     # legend.title=element_text(size = 7),
#     plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
#     panel.grid.major = element_blank(),
#     panel.border=element_blank())

t_Histo_p2 <- select(t_Histo,
                  EssReg,Classe,Population,G) %>%
  group_by(Classe,Population) %>%
  mutate(Gtot=sum(G,na.rm=T),
         Ratio=G/Gtot,
         RatioCum=cumsum(Ratio)) %>%
  ungroup()


t_Histo1_p2 <- filter(t_Histo_p2,
                   Population=="Perches") %>%
  mutate(Classe=Classe-1)
t_Histo2_p2 <- filter(t_Histo_p2,
                   Population=="Taillis") %>%
  mutate(Classe=Classe+1)
# Levels <- unique(t_Histo2$EssReg)

p2 <- ggplot() +
  geom_bar(t_Histo1_p2,
           mapping=aes(x=Classe, y=G,
                 fill=factor(EssReg,
                             levels=Niveaux_EssReg[length(Niveaux_EssReg):1])),
           stat = "identity", position = "fill",
           width=1.9) +
    geom_bar(t_Histo2_p2,
           mapping=aes(x=Classe, y=G,
                 fill=factor(EssReg,
                             levels=Niveaux_EssReg[length(Niveaux_EssReg):1])),
           stat = "identity", position = "fill",
           width=1.9) +
  annotate("text",
           x=c(9,11,14,16),
           y=rep(0.5,4),
           label=rep(c("Perches","Taillis"),2),
           angle=c(90,90,90,90),
           colour="black", size=2.5,
           fontface="bold") +
  geom_label(t_Histo1_p2,
             mapping=aes(x=Classe,
                         y=RatioCum-Ratio/2,
                         label=ifelse(Ratio > 0.02,
                                      paste0(round(Ratio,3)*100," %"),
                                      NA)),
             colour="black", size=1.5, nudge_x=-0.5,
             label.padding=unit(0.15,"lines")) +
  geom_label(t_Histo2_p2,
             mapping=aes(x=Classe,
                         y=RatioCum-Ratio/2,
                         label=ifelse(Ratio > 0.02,
                                      paste0(round(Ratio,3)*100," %"),
                                      NA)),
             colour="black", size=1.5, nudge_x=0.5,
             label.padding=unit(0.15,"lines")) +
  scale_fill_manual(values=Palette) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(5,max(t_Histo$Classe)+5),
                     breaks=seq(10,max(t_Histo$Classe),5)) +
  scale_y_continuous(expand=c(0,0),
                     # limits=c(0,1),
                     labels=percent) +
  labs(fill = "Essences\nregroupées", y="G (tiges/ha)", x="Classe de diamètre") +
  MyTheme1 + theme(legend.position="bottom",
                   legend.direction="horizontal")



mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(8,2))
@
\FloatBarrier

La figure \ref{fig:CompoRadarTaillis} présente la part de chaque essence en nombre de tiges et surface terrière.

<<CompoRadarTaillis, echo=F, warning=F, size='footnotesize', fig.height=3, fig.cap="Importance relative des différentes essences pour le taillis", fig.pos="H", eval=Eval_Taillis, include=Eval_Taillis>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetTaillis_EssReg,
#              Cycle == DernierCycle &
#                NumForet == Choix &
#                Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   arrange(-Gha)

# ----- Repères pour figures
# Niveaux_EssReg <- unique(t_Niveaux$Essence)
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

# ----- Tables figures
t_Radar <-
  gfForetTaillis_EssReg %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  rename(Essence = EssReg) %>%
  select(Essence, Nha, Gha) %>% #,VhaIFN # ,AcctG,AcctV,VcHa,VpHa,Gain
  filter(!(Gha == 0 & Nha == 0)) %>%
  # full_join(t) %>%
  mutate(Essence = factor(Essence, levels = Niveaux_EssReg)) %>%
  # arrange(-Nha) %>%
  arrange(Essence) %>%
  rename(N = Nha, G = Gha) # Vc=VcHa,Vp=VpHa
  # group_by(EssReg) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  # mutate(Essence=factor(Essence,levels=Niveaux_EssReg)) %>%
  # arrange(Essence)

t_Radar.m <-
  t_Radar %>%
  melt(id="Essence") %>%
  group_by(variable) %>%
  mutate(
    Tot = sum(value, na.rm = T),
    Ratio = value / Tot,
    RatioCum = cumsum(value / Tot)
  ) %>%
  ungroup() %>%
  mutate(
    label=NA,
    label=ifelse(variable=="N",
                 paste0(round(Ratio,3)*100," %"),
                 label),
    label=ifelse(variable=="G",
                 paste0(round(value,1)," m2/ha"),
                 label),
    label=ifelse(variable=="V",
                 paste0(round(value,1)," m3/ha"),
                 label),
    label=ifelse(variable=="AcctGper",
                 paste0(round(value,2)," m2/ha/an"), #\U020AC
                 label),
    label=ifelse(variable=="AcctVper",
                 paste0(round(value,2)," m3/ha/an"), #\U020AC
                 label),
    label=ifelse(variable=="Vc",
                 paste0(round(value,0)," euros/ha"), #\U020AC
                 label),
    label=ifelse(variable=="Vp",
                 paste0(round(value,0)," euros/ha"), # &#8364
                 label),
    label=ifelse(variable=="Gainper",
                 paste0(round(value,0)," euros/ha/an"), #\U020AC
                 label)
  ) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(
    Essence = factor(Essence, levels = Niveaux_EssReg[length(Niveaux_EssReg):1])
    ) %>%
  arrange(variable, Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <-
  t_Radar.m %>%
  group_by(variable) %>%
  summarise(value = mean(value, na.rm = T)) %>%
  ungroup()

ggplot() +
  geom_bar(
    t_Radar.m,
    mapping = aes(x = variable, y = value, fill = Essence),
    stat = 'identity', position = 'fill'
  ) +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=variable,
  #                                       y=0.5,
  #                                       label=variable),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(
    t_Radar_Text,
    mapping = aes(x = variable, y = 0.5, label = variable),
    label.padding = unit(0.15, "lines"), label.r = unit(0, "lines"),
    size = 2.5, fill = "gray70", alpha = 0.5, fontface = "bold"
  ) +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=variable,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") +
  # geom_label_repel(t_Radar.m,
  #                    mapping=aes(x=variable,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  scale_y_continuous(
    breaks=seq(0, 1, 0.1),
                     name = "Part relative des essences",
                     labels = percent
    ) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values = Palette_Essence) +
  guides(
    fill =
      guide_legend(
        ncol =
          ifelse(
            length( unique(t_Radar.m$Essence) ) > 3,
            round( length(unique(t_Radar.m$Essence)) / 4, 0 ), 1),
        bycol = TRUE,
        reverse = TRUE
      )
  ) +
  theme_bw() + MyTheme1 +
  theme(
    title = element_text(face = 'plain'),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x = element_text(face = 'plain', size = 9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position = "right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border = element_blank()
  )
@
\FloatBarrier


<<TabCompo3ess, echo=F, results='asis', fig.pos="H", comment=F, error=F, warning=F, message=F, eval=F, include=F>>=
Table2 <- function(table,var) {
    t <- filter(table,
                Cycle == DernierCycle & NumForet == Choix) %>%
      melt(id=c("NumForet","Foret","Cycle",var)) %>% #,"NbrePlacettes"
      mutate(value=round(value,1)) %>%
      dcast(list(c("NumForet","Cycle","Foret",var),"variable")) %>% #,"NbrePlacettes"
      mutate(IC_Nha=paste0("[",round(Nha-Er_Nha*Nha/100,1),"-",round(Nha+Er_Nha*Nha/100,1),"]"),
             IC_Gha=paste0("[",round(Gha-Er_Gha*Gha/100,1),"-",round(Gha+Er_Gha*Gha/100,1),"]"),
             IC_Vha=paste0("[",round(Vha-Er_Vha*Vha/100,1),"-",round(Vha+Er_Vha*Vha/100,1),"]"),
             # IC_VhaIFN=paste0("[",round(VhaIFN-Er_VhaIFN*VhaIFN/100,1),"-",round(VhaIFN+Er_VhaIFN*VhaIFN/100,1),"]"),
             IC_AcctGper=paste0("[",round(AcctGper-Er_AcctGper*AcctGper/100,1),"-",round(AcctGper+Er_AcctGper*AcctGper/100,1),"]"),
             IC_AcctVper=paste0("[",round(AcctVper-Er_AcctVper*AcctVper/100,1),"-",round(AcctVper+Er_AcctVper*AcctVper/100,1),"]"),
             IC_VcHa=paste0("[",round(VcHa-Er_VcHa*VcHa/100,1),"-",round(VcHa+Er_VcHa*VcHa/100,1),"]"),
             IC_VpHa=paste0("[",round(VpHa-Er_VpHa*VpHa/100,1),"-",round(VpHa+Er_VpHa*VpHa/100,1),"]"),
             IC_Gainper=paste0("[",round(Gainper-Er_Gainper*Gainper/100,1),"-",round(Gainper+Er_Gainper*Gainper/100,1),"]")) %>%
      melt(id=c("NumForet","Cycle","Foret",var)) %>% #,"NbrePlacettes"
      mutate(stat=variable,
             variable=str_replace(variable,"CV_",""),
             variable=str_replace(variable,"Er_",""),
             variable=str_replace(variable,"IC_",""),
             stat=str_replace(stat,"_Nha",""),
             stat=str_replace(stat,"_Gha",""),
             stat=str_replace(stat,"_Vha",""),
             stat=str_replace(stat,"_AcctGper",""),
             stat=str_replace(stat,"_AcctVper",""),
             stat=str_replace(stat,"_VcHa",""),
             stat=str_replace(stat,"_VpHa",""),
             stat=str_replace(stat,"_Gainper",""),
             stat=str_replace(stat,"Nha","Moy"),
             stat=str_replace(stat,"Gha","Moy"),
             stat=str_replace(stat,"Vha","Moy"),
             stat=str_replace(stat,"AcctGper","Moy"),
             stat=str_replace(stat,"AcctVper","Moy"),
             stat=str_replace(stat,"VcHa","Moy"),
             stat=str_replace(stat,"VpHa","Moy"),
             stat=str_replace(stat,"Gainper","Moy"),
             stat=factor(stat,levels=c("Moy","CV","Er","IC"))) %>%
      filter(!is.na(stat)) %>%
      arrange(Cycle,variable,stat) %>%
      dcast(list(c("NumForet","Cycle","Foret",var,"stat"),"variable")) %>%
      arrange(NumForet,Cycle,Essence)#,"NbrePlacettes"
    t2 <- select_(t,"Cycle",var,"stat","Nha","Gha","Vha","AcctGper","AcctVper",
                  "VcHa","VpHa","Gainper") %>% #,"NbrePlacettes"
      mutate(stat=str_replace(stat,"Moy","Moyenne"), # Mise en forme du tableau
             stat=str_replace(stat,"CV","Coefficient de variation (\\\\%)"),
             stat=str_replace(stat,"Er","Erreur relative (\\\\%)"),
             stat=str_replace(stat,"IC","Intervalle de confiance"))
    t3 <- MultiRow(t2,c(1,2,dim(t2)[2])) %>%
      rename_("N"="Nha",
              "G"="Gha",
              "V"="Vha",
              "Vc"="VcHa",
              "Vp"="VpHa",
              # "Population"="Cat",
              # "Nombre de placettes"="NbrePlacettes",
              " "="stat")
    ListPos <- list()
    for (i in 1:(dim(t3)[1]-1)) {
      ListPos[i] <- i
    }

    print(xtable(t3,
                 caption = paste0("Principales caractéristiques à l'échelle de la forêt et par ",tolower(var)," avec leur précision - perches inclues.\\\\\\scriptsize{N = densité de tiges (/ha), G = surface terrière (m\\up{2}/ha), V = volume (m\\up{3}/ha)\\\\AcctG = Accroissement en surface terrière (m\\up{2}/ha/an)\\\\AcctV = Accroissement en volume (m\\up{3}/ha/an)\\\\Vc = valeur de consommation (\\euro/ha), Vp = valeur potentielle (\\euro/ha)\\\\Gain = Accroissement en valeur (\\euro/ha/an)}"),
                 caption.placement = "top",
                 digits=c(rep(0,4),rep(1,dim(t3)[2]-3)),
                 align=c("|M{0.5cm}|","M{0.7cm}|","M{1.5cm}|","M{1.8cm}|",rep("M{1cm}|",dim(t3)[2]-4),"M{1cm}"),
                 # ,"M{1.5cm}"),
                 label = "TabCompo3ess"),
          include.rownames=FALSE,
          sanitize.text.function=function(x){return(x)},
          hline.after=c(-1,0,dim(t3)[1]),
          add.to.row=list(
            pos=ListPos,
            command=if (dim(t3)[1] > 4) {
              c(rep(c(rep("\\cline{3-11}",3),"\\cmidrule[0.8pt]{2-11}"),dim(t3)[1]/4-1),
                rep("\\cline{3-11}",3))} else {
                  rep("\\cline{3-11}",ListPos)
                }
          ),
          size="\\footnotesize")
}

t1 <- filter(gfForetFpied_Essence,
             Cycle == DernierCycle & NumForet == Choix) %>%
#   select=c(Essence,Nha,Gha,Vha,VhaIFN,AcctV,AcctG,
#                       CV_Nha,CV_Gha,CV_Vha,CV_VhaIFN,CV_AcctV,CV_AcctG,
#                       Er_Nha,Er_Gha,Er_Vha,Er_VhaIFN,Er_AcctV,Er_AcctG)) %>%
  arrange(-Vha) # Choix en fonction du volume. Faut-il choisir en fonction de la valeur de consommation ?
t1 <- t1[1:3,]
EssPrincipales <- t1$Essence
t2 <- filter(gfForetFpied_Essence,
             Cycle==DernierCycle &
               # NumForet==Choix &
               Essence %in% EssPrincipales) %>%
#              select=c(Essence,VcHa,VpHa,Gain,
#                       CV_VcHa,CV_VpHa,CV_Gain,
#                       Er_VcHa,Er_VpHa,Er_Gain)) %>%
  # full_join(t1) %>%
  arrange(-Vha) %>%
  mutate(Essence=factor(Essence,levels=Essence))
# t2 <- t2[1:3,]
# a <- merge(t1, t2, by="Essence", all=T)
  Table2(t2,"Essence")

@

<<HistEssReg, echo=F, size='footnotesize', fig.pos='H', fig.height=2.5, fig.cap="\\footnotesize{Histogramme du nombre de tiges avec distinction de l'essence représentant la plus forte valeur de consommation.}", error=F, comment=F, warning=F, message=F, eval=F, include=F>>=
  TabCompo <- filter(gfForetDen_Essence,
             Cycle == DernierCycle & NumForet == Choix) %>%
  select(Essence,Nha,Gha,Vha,AcctGper,AcctVper,VcHa,VpHa,Gainper) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Vha) %>%
  rename(N=Nha,
         G=Gha,
         V=Vha,
         Vc=VcHa,
         Vp=VpHa)

EssPrinc <- TabCompo$Essence[1]
EssPrinc <- Essences$EssReg[which(Essences$Nom==EssPrinc)]


tab <- filter(gfForetDen_EssRegClasse,
              Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(EssReg2=ifelse(EssReg==EssPrinc,EssReg,"Autres"),
         EssReg2=factor(EssReg2,levels=c("Autres",EssPrinc))) %>%
  arrange(EssReg2)
tab_lim <- group_by(tab,
                    Classe) %>%
  summarise(Nha=sum(Nha,na.rm=T),
            Gha=sum(Gha,na.rm=T)) %>%
  ungroup()
tText <- group_by(tab,
                  NumForet,Cycle) %>%
  summarise(Nha=sum(Nha,na.rm=T),
            Gha=sum(Gha,na.rm=T)) %>%
  ungroup()
# X <- max(tab$Classe)-20
# Y <- round(max(tab$Nha),0)
# eff <- round(gfForetDen_[gfForetDen_$Cycle==DernierCycle,"Nha"],0)

ggplot(tab, aes(x = Classe, y = Nha, fill = EssReg2)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(tText,mapping=aes(x=0.8*max(tab_lim$Classe,na.rm=T),
                              y=0.8*max(tab_lim$Nha,na.rm=T),
                              label=paste0("N/ha = ",round(Nha,0)," tiges/ha")),
            colour="black", inherit.aes=F, parse=F, size=2.5) +
  # annotate("text",x=X, y=Y, label=paste0("N/ha =",eff)) +
  scale_fill_grey(name="Regroupements\nd'essences") +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,max(tab$Classe)+5),
                     breaks=seq(0,max(tab$Classe),20)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,
                              max(tab_lim$Nha) +
                                  floor(max(tab_lim$Nha)/6/5+0.5)*5),
                     breaks=seq(0,
                                max(tab_lim$Nha) +
                                  (floor(max(tab_lim$Nha)/6/5+0.5)*5)/2,
                                floor(max(tab_lim$Nha)/6/5+0.5)*5)) +
                     # limits=c(0,X)) +
  labs(x="Classe de diamètre", fill = "",y="N (tiges/ha)") +
  guides(fill=guide_legend(reverse=F)) +
  MyTheme1 + theme(legend.text=element_text(size=7),
                   legend.title=element_text(size=9))
@

<<Fig_AccD_Essence1, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="\\footnotesize{Valeurs d'accroissements en diamètre attribués aux différentes essences, selon les classes de diamètre.}", fig.pos='H', eval=F, include=F>>=
# ArbresEnTour <- Arbres
df_AcctD1 <- left_join(Arbres[,c("NumForet","NumPlac","NumArbre",
                                     "Essence","Azimut","Dist","Cycle",
                                     "Diam1","Diam2","Diam","Classe")], #,"EssReg"
                       AcctD) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,Azimut,Dist,Diam,Classe,AcctD) %>%
  filter(Cycle==DernierCycle) %>%
  mutate(Population="Bois vivant\nde franc-pied")


df_AcctD2 <- left_join(Taillis[,c("NumForet","NumPlac",
                                     "Essence","Cycle",
                                     "Diam","Classe")], #,"EssReg"
                       AcctD) %>%
  mutate(Population="Taillis",
         NumArbre=NA,
         Dist=NA,
         Azimut=NA) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,Azimut,Dist,Diam,Classe,AcctD,Population) %>% # ,EssReg
  filter(Cycle==DernierCycle)

# df_AcctD <- rbind(df_AcctD1,
#                   df_AcctD2)
df_AcctD <- df_AcctD1

df_AcctD_Bis <- group_by(df_AcctD,
                         Classe,Population,Essence) %>%
  mutate(Moy_AcctD=mean(AcctD,na.rm=T),
         Sd_AcctD=sd(AcctD,na.rm=T),
         Mark=factor(0.5)) %>%
  ungroup() %>%
  select(Mark,Population,Essence,Classe,Diam,Moy_AcctD,Sd_AcctD) %>%
  distinct()

ggplot() +
  geom_point(df_AcctD,
             mapping=aes(Diam,AcctD,colour=Essence),
             alpha=0.1,
             shape=1) +
  # geom_line(df_AcctD_Bis,
  #           mapping=aes(Diam,Moy_AcctD,size=EssReg),
  #           linetype=1,
  #           colour="gray70") +
  # geom_ribbon(df_AcctD_Bis,
  #           mapping=aes(Diam,
  #                       ymin=Moy_AcctD*(1-Sd_AcctD),
  #                       ymax=Moy_AcctD*(1+Sd_AcctD)),
  #           col= "black",alpha=0.7,
  #           fill="grey90",linetype=3) +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,colour=Essence),
            linetype=1,
            size=1) +
  scale_x_continuous(name="Classes de diamètre",
                     limits=c(10,max(df_AcctD$Classe,na.rm=T)),
                     breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,20)) + #,expand=c(0,0)
  scale_y_continuous(name="AcctD (cm/an)") +
  # ,
  # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
  #          max(df_AcctD$AcctD,na.rm=T)+0.5),
  # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
  # expand=c(0,0)) +
  facet_wrap(~ Population,
             nrow=2,
             scales="free") +
  scale_colour_manual(name="AcctD moyen par essence",
                      values=Palette_Essence) +
    # scale_size_manual(values=rep(0.9,9)) +
   guides(colour=guide_legend(nrow=2,
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
# ,
#                   legend.box="vertical",
#                   legend.box.spacing=unit(c(0,0,0,0), "cm"),
#                   legend.box.just="top"











# ggplot() +
#   geom_point(df_AcctD,
#              mapping=aes(Diam,AcctD,colour=Cat)) +
#   geom_line(df_AcctD_Bis,
#             mapping=aes(Diam,Moy_AcctD,size=Mark),
#             linetype=1,
#             colour="yellow") +
#   geom_line(df_AcctD_Bis,
#             mapping=aes(Diam,Moy_AcctD,size=Mark),
#             linetype=2,
#             colour="navyblue") +
#   scale_x_continuous(name="Classes de diamètre",
#                      limits=c(10,max(df_AcctD$Classe,na.rm=T)),
#                      breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,20)) + #,expand=c(0,0)
#   scale_y_continuous(name="AcctD (cm/an)") +
#   # ,
#   # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
#   #          max(df_AcctD$AcctD,na.rm=T)+0.5),
#   # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
#   #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
#   #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
#   # expand=c(0,0)) +
#   facet_wrap(~ Population,
#              nrow=2,
#              scales="free") +
#   scale_colour_manual(name="Catégories de diamètre",
#                       values=Palette_Cat) +
#   scale_size_manual(name="",
#                     label="AcctD moyen",
#                     values=0.7) +
#   guides(colour=guide_legend(nrow=1,
#                              byrow=T,
#                              order=2),
#          size=guide_legend(order=1)) +
#   MyTheme + theme(legend.position="bottom",
#                   legend.direction="horizontal",
#                   legend.box="vertical",
#                   legend.box.just="bottom",
#                   legend.spacing.y = unit(0,"cm"),
#                   strip.background=element_blank(),
#                   strip.text=element_text(face="bold"))
@

<<Fig_AccD_Essence2, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="\\footnotesize{Valeurs d'accroissements en diamètre attribués aux différentes essences, selon les classes de diamètre.}", fig.pos='H', eval=F, include=F>>=

df_AcctD1 <- left_join(ArbresEnTour[,c("NumForet","NumPlac","NumArbre",
                                     "Essence","EssReg","Azimut","Dist","Cycle",
                                     "Diam1","Diam2","Diam","Classe")],
                       AcctD) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD) %>%
  filter(Cycle==DernierCycle) %>%
  mutate(Population="Bois vivant\nde franc-pied")


df_AcctD2 <- left_join(Taillis[,c("NumForet","NumPlac",
                                     "Essence","EssReg","Cycle",
                                     "Diam","Classe")],
                       AcctD) %>%
  mutate(Population="Taillis",
         NumArbre=NA,
         Dist=NA,
         Azimut=NA) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD,Population) %>% # ,EssReg
  filter(Cycle==DernierCycle)

# df_AcctD <- rbind(df_AcctD1,
#                   df_AcctD2)
df_AcctD <- df_AcctD2

df_AcctD_Bis <- group_by(df_AcctD,
                         Classe,Population,EssReg) %>%
  mutate(Moy_AcctD=mean(AcctD,na.rm=T),
         Sd_AcctD=sd(AcctD,na.rm=T),
         Mark=factor(0.5)) %>%
  ungroup() %>%
  select(Mark,Population,EssReg,Classe,Diam,Moy_AcctD,Sd_AcctD) %>%
  distinct()

ggplot() +
  geom_point(df_AcctD,
             mapping=aes(Diam,AcctD,colour=EssReg),
             alpha=0.1,
             shape=1) +
  # geom_line(df_AcctD_Bis,
  #           mapping=aes(Diam,Moy_AcctD,size=EssReg),
  #           linetype=1,
  #           colour="gray70") +
  geom_ribbon(df_AcctD_Bis,
            mapping=aes(Diam,
                        ymin=Moy_AcctD*(1-Sd_AcctD),
                        ymax=Moy_AcctD*(1+Sd_AcctD)),
            col= "black",alpha=0.7,
            fill="grey90",linetype=3) +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,colour=EssReg),
            linetype=1,
            size=1) +
  scale_x_continuous(name="Classes de diamètre",
                     limits=c(10,max(df_AcctD$Classe,na.rm=T)),
                     breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,20)) + #,expand=c(0,0)
  scale_y_continuous(name="AcctD (cm/an)") +
  # ,
  # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
  #          max(df_AcctD$AcctD,na.rm=T)+0.5),
  # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
  # expand=c(0,0)) +
  facet_wrap(~ Population,
             nrow=2,
             scales="free") +
  scale_colour_manual(name="AcctD moyen par essence",
                      values=Palette) +
    # scale_size_manual(values=rep(0.9,9)) +
   guides(colour=guide_legend(nrow=2,
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
# ,
#                   legend.box="vertical",
#                   legend.box.spacing=unit(c(0,0,0,0), "cm"),
#                   legend.box.just="top"











# ggplot() +
#   geom_point(df_AcctD,
#              mapping=aes(Diam,AcctD,colour=Cat)) +
#   geom_line(df_AcctD_Bis,
#             mapping=aes(Diam,Moy_AcctD,size=Mark),
#             linetype=1,
#             colour="yellow") +
#   geom_line(df_AcctD_Bis,
#             mapping=aes(Diam,Moy_AcctD,size=Mark),
#             linetype=2,
#             colour="navyblue") +
#   scale_x_continuous(name="Classes de diamètre",
#                      limits=c(10,max(df_AcctD$Classe,na.rm=T)),
#                      breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,20)) + #,expand=c(0,0)
#   scale_y_continuous(name="AcctD (cm/an)") +
#   # ,
#   # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
#   #          max(df_AcctD$AcctD,na.rm=T)+0.5),
#   # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
#   #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
#   #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
#   # expand=c(0,0)) +
#   facet_wrap(~ Population,
#              nrow=2,
#              scales="free") +
#   scale_colour_manual(name="Catégories de diamètre",
#                       values=Palette_Cat) +
#   scale_size_manual(name="",
#                     label="AcctD moyen",
#                     values=0.7) +
#   guides(colour=guide_legend(nrow=1,
#                              byrow=T,
#                              order=2),
#          size=guide_legend(order=1)) +
#   MyTheme + theme(legend.position="bottom",
#                   legend.direction="horizontal",
#                   legend.box="vertical",
#                   legend.box.just="bottom",
#                   legend.spacing.y = unit(0,"cm"),
#                   strip.background=element_blank(),
#                   strip.text=element_text(face="bold"))
@

<<AcctVEss, echo=F, size='footnotesize', include=F, eval=F, fig.height=3, fig.cap="\\footnotesize{Répartition de l'accroissement en volume par essence.}", error=F, comment=F, warning=F, message=F, fig.pos="H">>=
tab <- filter(gfForetDen_EssReg,
              Cycle == DernierCycle & NumForet == Choix) %>%
  select(EssReg,AcctVper) %>%
  arrange(AcctVper) %>%
  mutate(EssReg=factor(EssReg,levels=EssReg))
# tab <- tab[order(-tab$AcctVper),]
# tab$X <- factor(tab$EssReg, levels = tab$EssReg)
ggplot(tab, aes(x = EssReg, y = AcctVper)) +
  geom_bar(stat='identity', position='stack', fill='grey') +
	labs(x = NULL, y="AcctV (m3/ha/an)") +
  coord_flip() +
  MyTheme1
# + theme(axis.text.x = element_text(angle = 90, hjust = 1))
@

% \subsection{Composition par essence et grandes catégories de diamètre}

<<CompoN, echo=F, size='footnotesize', fig.height=3, fig.cap="\\footnotesize{Composition en essence en nombre de tige de manière absolue ou relative.\\\\\\scriptsize{PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}}", error=F, comment=F, warning=F, message=F, fig.pos="H",include=F,eval=F>>=
# PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
temp <- filter(gfForetDen_EssRegCat,
               Cycle==DernierCycle) %>%
  select(NumForet,Cycle,Foret,EssReg,Cat,Nha,Gha,Vha,AcctGper,AcctVper) %>%
  # mutate(EssReg=factor(EssReg, levels=Niveaux),
         mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(EssReg,Cat)

p1 <- ggplot(temp, aes(Cat, Nha, fill=EssReg)) +
  geom_bar(stat="identity", position="stack") +
	labs(x = "",y="N (tiges/ha)") +
  scale_fill_manual(name="Essences\nregroupées",values=ColPalette_EssReg) +
  # guides(fill=F) +
  MyTheme1
# + theme(legend.title=element_text(size=7))
p2 <- ggplot(temp, aes(Cat, Nha, fill=EssReg)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=ColPalette_EssReg) +
  scale_y_continuous(name="Part de la densité",labels=percent) +
	labs(x = "", fill="") +
  # theme(legend.position = "none") +
  MyTheme1
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend, nrow=1,widths=c(8, 2))
# grid.arrange(p1, p2, widths=c(0.4, 0.6), ncol=2)
@

<<CompoG, echo=F, size='footnotesize', fig.height=3, fig.cap="\\footnotesize{Composition en essence en surface terrière, de manière absolue ou relative.\\\\\\scriptsize{PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}}", error=F, comment=F, warning=F, message=F, fig.pos="H",include=F,eval=F>>=
#PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\
p3 <- ggplot(temp, aes(Cat, Gha, fill=EssReg)) +
  geom_bar(stat="identity", position="stack") +
  # guides(fill=F) +
  labs(x = "",y="G (m2/ha)") +
  scale_fill_manual(name="Essences\nregroupées",values=ColPalette_EssReg) +
  # guides(fill=F) +
  MyTheme1
# + theme(legend.title=element_text(size=9))
p4 <- ggplot(temp, aes(Cat, Gha, fill=EssReg)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_manual(values=ColPalette_EssReg) +
  scale_y_continuous(name="Part de la surface terrière",labels=percent) +
  labs(x = "", fill="") +
  MyTheme1
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p3 + theme(legend.position="none"),
                         p4 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend, nrow=1,widths=c(8, 2))
# grid.arrange(p3, p4, widths=c(0.4, 0.6), ncol=2)
@
}{
Aucun élément de taillis inventorié
}
\FloatBarrier

% \EditIf{\Sexpr{Eval_Evol}}{TRUE}{
\EditIf{\Sexpr{DernierCycle > 1}}{TRUE}{
\subsubsection{Evolution du sous-étage}

Le tableau \ref{Tab_GestionPassee_Prec} retrace l'évolution des principales composantes dendrométriques des perches et du taillis au cours des différents inventaires.

<<Tab_GestionPassee_SsEtage, echo=F, warning=F, size='footnotesize', results='asis'>>=

# %%%%%%%%%% Sous-étage :
if (Eval_Taillis) {
# %%%%% Taillis
df1 <- filter(gfForetTaillis_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Gha) %>%
  mutate(Gha=paste0("\\cellcolor{LightGray} \\textbf{",
                    round(Gha,ifelse(Gha < 0.1,2,1)),"}"),

         Essence="\\cellcolor{LightGray} \\textbf{G Total}") %>%
  mutate(Population=NA) %>%
  select(Population,Annee,Essence,Gha) %>%
  dcast(Population + Essence ~ Annee,
        value.var="Gha")

df2 <- filter(gfForetTaillis_EssReg,
             NumForet==Choix) %>%
  rename(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha) %>%
  select(Annee,Essence,Gha) %>%
  group_by(Annee) %>%
  mutate(Gha_Tot=sum(Gha)) %>%
  group_by(Annee,Essence) %>%
  mutate(Gha_Part=Gha/Gha_Tot*100) %>%
  ungroup() %>%
  mutate(Gha=round(Gha,ifelse(Gha < 0.1,2,1))) %>%
  # filter(Gha_Part > 5) %>%
  mutate(Population=NA) %>%
  select(Population,Annee,Essence,Gha) %>%
  # mutate(Essence_Mark=ifelse(Essence %in% Essences_Seuil,
  #                            Essence,"Autres")) %>%
  dcast(Population + Essence ~ Annee,
        value.var="Gha")


df <- rbind(df2,df1)# %>%
  # rename_(paste0("\\multirow{",
  #                dim(df)[1],
  #                "}{*}{\\rotatebox{90}{Taillis}}")="Population")
pos_NAME <- which(names(df)!="Population")
names(df)[which(names(df)=="Population")] <- paste0("\\multirow{",
                                                    dim(df)[1]+1,
                                                    "}{*}{\\rotatebox{90}{Taillis}}")

ListPos <- list()
for (i in 0:dim(df)[1]) {
  ListPos[length(ListPos)+1] <- i
}
command=rep(paste0("\\cline{2-",dim(df)[2],"}\n"),dim(df)[1]+1)

names(df)[pos_NAME] <- paste0("\\textbf{",names(df)[pos_NAME],"}")
  # rename_("\\textbf{Annee}"="Annee")

# names(df)[2:(dim(df)[2]-1)] <- paste0("\\rotatebox{90}{\\textbf{G ",
#                                       names(df)[2:(dim(df)[2]-1)],
#                                       "}}")


# %%%%%%%%%% Impression tableau
cat("\\begin{table}[h]
    \\centering")
print(
  xtable(
    df,
    # digits=rep(0,dim(t1)[2]+1),
    digits = c(0, 0, rep(1,dim(df)[2] - 1)),
    align = c("M{0cm}", "|M{.5cm}", "|M{2.5cm}|", rep("M{1cm}|", dim(df)[2] - 2)),
    caption = NULL,
    label = NULL
  ),
  caption.placement = "bottom",
  floating = F,
  hline.after = c(-1, dim(df)[1]),
  sanitize.text.function = function(x){return(x)},
  include.rownames = F,
  add.to.row = list(
    pos=ListPos,
    command = command),
  size = "\\footnotesize"
)
} else {
  cat("\\begin{table}[h]
    \\centering")
}

# %%%%% Perches
df1 <-
  gfForetPer_ %>%
  filter(NumForet==Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  select(Annee, Gha) %>%
  mutate(
    Gha = paste0("\\cellcolor{LightGray} \\textbf{",
                 round(Gha, ifelse(Gha < 0.1, 2, 1)), "}"),

    Essence = "\\cellcolor{LightGray} \\textbf{G Total}"
  ) %>%
  mutate(Population = NA) %>%
  select(Population, Annee, Essence, Gha) %>%
  dcast(Population + Essence ~ Annee, value.var = "Gha")

df2 <-
  gfForetPer_Reg2 %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  arrange(Annee, Reg2, -Gha) %>%
  select(Annee, Reg2, Gha) %>%
  group_by(Annee) %>%
  mutate(Gha_Tot = sum(Gha)) %>%
  group_by(Annee, Reg2) %>%
  mutate(Gha_Part = ifelse(Gha > 0, round(Gha / Gha_Tot * 100), 0)) %>%
  ungroup() %>%
  mutate(
    Gha = round(Gha, ifelse(Gha < 0.1, 2, 1)),
    Gha = paste0(Gha, " (", Gha_Part, "\\%)")
  ) %>%
  mutate(Population = NA) %>%
  select(Population, Annee, Reg2, Gha) %>%
  rename(Essence = Reg2) %>%
  # mutate(Essence_Mark=ifelse(Essence %in% Essences_Seuil,
  #                            Essence,"Autres")) %>%
  dcast(Population + Essence ~ Annee, value.var = "Gha")

df3 <-
  gfForetPer_EssReg %>%
  filter(NumForet == Choix) %>%
  rename(Essence = EssReg) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  arrange(Annee, -Gha) %>%
  select(Annee, Essence, Gha) %>%
  group_by(Annee) %>%
  mutate(Gha_Tot = sum(Gha)) %>%
  group_by(Annee, Essence) %>%
  mutate(Gha_Part = Gha / Gha_Tot * 100) %>%
  ungroup() %>%
  # filter(Gha_Part > 5) %>%
  mutate(Population = NA) %>%
  select(Population, Annee, Essence, Gha) %>%
  mutate(Gha = round(Gha, ifelse(Gha < 0.1, 2, 1))) %>%
  # mutate(Essence_Mark=ifelse(Essence %in% Essences_Seuil,
  #                            Essence,"Autres")) %>%
  dcast(Population + Essence ~ Annee, value.var = "Gha")
# names(df3)[2:dim(df3)[2]] <- paste0("\\rotatebox{90}{\\textbf{G ",
#                                       names(df3)[2:dim(df3)[2]],
#                                       "}}")

# df <- full_join(df2,df3) %>%
#   full_join(df1) %>%
#   rename_("\\textbf{Cycle}"="Cycle")
# Entete=paste0("\\multirow{",
#                  dim(df)[1],
#                  "}{*}{\\rotatebox{90}{Perches}}")
df <- rbind(df2, df3, df1) #%>%
  # rbind(df1)# %>%
  # rename_(Entete="Population")
pos_NAME <- which(names(df) != "Population")
names(df)[which(names(df) == "Population")] <-
  paste0("\\multirow{", dim(df)[1] + 1, "}{*}{\\rotatebox{90}{Perches}}")

df$Essence[which(df$Essence == "A+B")] <- "G (A+B)"
df$Essence[which(df$Essence == "C+D")] <- "G (C+D)"

ListPos <- list()
for (i in 0:dim(df)[1]) {
  ListPos[length(ListPos)+1] <- i
}
command=rep(paste0("\\cline{2-",dim(df)[2],"}\n"),dim(df)[1]+1)

names(df)[pos_NAME] <- paste0("\\textbf{",names(df)[pos_NAME],"}")


# names(df)[2:(dim(df)[2]-1)] <- paste0("\\rotatebox{-90}{\\textbf{G ",
#                                       names(df)[2:(dim(df)[2]-1)],
#                                       "}}")
cat("
    \\vspace{0.5cm}
~
    ")
print(xtable(df,
             # digits=rep(0,dim(t1)[2]+1),
             digits=c(0,rep(0,dim(df)[2])),
             align=c("M{0cm}","|M{.5cm}","|M{2.5cm}|",rep("M{1cm}|",dim(df)[2]-2)),
             caption = "Evolution du Taillis",
             label   = "Tab_GestionPassee_SsEtage"),
      caption.placement = "bottom",
      hline.after=c(-1,dim(df)[1]),
      floating=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      add.to.row=list(
        pos=ListPos,
        command=command),
      size="\\footnotesize")
cat("\\caption{Evolution du sous-étage}
\\label{Tab_GestionPassee_SsEtage}
    \\end{table}")
@


\section{Accroissements}

% \textcolor{ForestGreen}{Pour la suite, tableau récap - taux d'accroissement par essence}\\

% \textcolor{red}{Problèmes constatés sur les figures : ne peut y avoir d'accroissement au premier passage ? Sauf pour les AcctD, si on reporte les accroissements du 2 passage au premier. + Accroissements en surface terrière négatifs constatés = vérifier coquilles dans la BD}
<<Comment_2.6, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.6")
cat(Comment$Texte)
@

\subsection{Evolution des accroissements}
\EditIf{\Sexpr{(protoc_CHG | plac_CHG) & DernierCycle == 2}}{TRUE}{
Les tableaux ci-dessous (tableau \ref{Tab_Taux}) présentent les différents taux\footnote{\underline{\textbf{Attention :}} le nombre de placettes et/ou le protocole ont été modifiés au cours des différents inventaires. En conséquence, les taux indiqués ici doivent être considérés à titre indicatifs : les taux réels devront être recalculés manuellement} d'accroissements en surface terrière, volume et valeur de consommation, déclinés par essences et par catégories de diamètre.
}{
Les tableaux ci-dessous (tableau \ref{Tab_Taux}) présentent les différents taux d'accroissements en surface terrière, volume et valeur de consommation, déclinés par essences et par catégories de diamètre.
}


<<Tab_Taux, echo=F, warning=F, size='footnotesize', results='asis', eval=Eval_Evol, include=Eval_Evol>>=

CyclesPeriodes_DF <-
  data.frame(
    Cycle_Ante = 1:(DernierCycle - 1),
    Cycle_Courant = 2:DernierCycle,
    stringsAsFactors = F
  ) %>%
  mutate(
    Annee_Ante = Cycles_Disp$Annee[ match(Cycle_Ante, Cycles_Disp$Cycle) ],
    Annee_Courant = Cycles_Disp$Annee[ match(Cycle_Courant, Cycles_Disp$Cycle) ],
    Periodes = paste0(Annee_Ante, "-", Annee_Courant)
  )

# %%%%%%%%%% Taux par essences
df1 <-
  gfForetDen_EssReg %>%
  filter(NumForet == Choix & Cycle == DernierCycle & Gha != 0) %>%
  rename(Essence = EssReg) %>%
  select(
    NumForet, Essence, Cycle,
    Gha, Vha, VcHa, AcctGper, AcctVper, Gainper
  ) %>%
  mutate(
    Gha = ifelse(Gha < 0, 0, Gha),
    Vha = ifelse(Vha < 0, 0, Vha),
    VcHa = ifelse(VcHa < 0, 0, VcHa),
    AcctGper = ifelse(AcctGper < 0, 0, AcctGper),
    AcctVper = ifelse(AcctVper < 0, 0, AcctVper),
    Gainper = ifelse(Gainper < 0, 0, Gainper)
  ) %>%
  mutate(Taux_G = round(AcctGper / Gha * 100, 1)) %>%
  arrange(desc(Taux_G)) %>%
  mutate(
    AcctGper = round(AcctGper, digits = 2),
    AcctVper = round(AcctVper, digits = 1),
    Gainper = round(Gainper, digits = 0),

    Taux_G = round(AcctGper/Gha*100, 1),
    Taux_G = formatC(Taux_G,  format = "f",  digits = 1),
    Taux_G = ifelse(AcctGper != 0, paste0(Taux_G, " \\%"), ""),

    Taux_V = round(AcctVper/Vha*100, 1),
    Taux_V = formatC(Taux_V,  format = "f",  digits = 1),
    Taux_V = ifelse(AcctVper != 0, paste0(Taux_V, " \\%"), ""),

    Taux_Vc = round(Gainper/VcHa*100, 1),
    Taux_Vc = formatC(Taux_Vc,  format = "f",  digits = 1),
    Taux_Vc = ifelse(Gainper != 0, paste0(Taux_Vc, " \\%"), ""),

    AcctGper =
      ifelse(AcctGper == 0, NA, formatC(AcctGper,  format = "f",  digits = 2)),
    AcctVper =
      ifelse(AcctVper == 0, NA, formatC(AcctVper,  format = "f",  digits = 1)),
    Gainper =
      ifelse(Gainper == 0, NA, formatC(Gainper,  format = "f",  digits = 0))
  ) %>%
  select(Essence, AcctGper, Taux_G, AcctVper, Taux_V, Gainper, Taux_Vc) %>%
  melt(id = c("Essence", "Taux_G", "Taux_V", "Taux_Vc")) %>%
  group_by(variable) %>%
  mutate(
    value = as.numeric(value),

    Tot = sum(value, na.rm = T),
    Part = ifelse(Tot > 0, value / Tot, NA),
    Part = round(Part * 100, 0),

    value = ifelse(
      value > 0,
      paste0(value, " \\scriptsize{\\textcolor{CornflowerBlue}{(", Part, "\\%)}}"),
      NA
    ),

    Part = NULL,
    Tot = NULL
  ) %>%
  ungroup() %>%
  dcast(Essence + Taux_G + Taux_V + Taux_Vc ~ variable) %>%
  mutate(Essence = factor(Essence, levels = names(Palette_Essence))) %>%
  arrange(Essence) %>%
  rename(Variable = Essence) %>%
  mutate(Variable = as.character(Variable))

pos1 <- dim(df1)[1]

# %%%%%%%%%% Taux par catégories de diamètre

df2 <-
  gfForetDen_Cat %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  select(NumForet, Cat, Cycle, Gha, Vha, VcHa, AcctGper, AcctVper, Gainper) %>%
  mutate(Cat = factor(Cat, levels = c("PER", "PB", "BM", "GB", "TGB"))) %>%
  arrange(Cat)

pos <- c()
for (col in c("AcctVper", "AcctGper", "Gainper")) {
  pos <- c(pos, which(df2[which(df2$Cat == "TGB"), col] < 0))
}
pos <- unique(pos)

if (length(pos) > 0) {
  df2 <- df2 %>% mutate(Cat = as.character(Cat))

  df2$Cat[which(df2$Cat=="TGB")] <- "GB et TGB"
  df2$Cat[which(df2$Cat=="GB")] <- "GB et TGB"
  df2 <-
    df2 %>%
    group_by(Cat) %>%
    summarise(
      Gha = sum(Gha, na.rm = T),
      Vha = sum(Vha, na.rm = T),
      VcHa = sum(VcHa, na.rm = T),

      AcctGper = sum(AcctGper,na.rm = T),
      AcctVper = sum(AcctVper,na.rm = T),
      Gainper = sum(Gainper,na.rm = T)
    ) %>%
    ungroup() %>%
    mutate(Cat = factor(Cat, levels = c("PER", "PB", "BM", "GB et TGB"))) %>%
    arrange(Cat)
}

Cat_ORDER <- as.character(df2$Cat)

df2 <-
  df2 %>%
  mutate(
    Gha = ifelse(Gha < 0, 0, Gha),
    Vha = ifelse(Vha < 0, 0, Vha),
    VcHa = ifelse(VcHa < 0, 0, VcHa),
    AcctGper = ifelse(AcctGper < 0, 0, AcctGper),
    AcctVper = ifelse(AcctVper < 0, 0, AcctVper),
    Gainper = ifelse(Gainper < 0, 0, Gainper)
  ) %>%
  mutate(
    AcctGper = round(AcctGper, digits = 2),
    AcctVper = round(AcctVper, digits = 1),
    Gainper = round(Gainper, digits = 0),

    Taux_G = round(AcctGper / Gha * 100, 1),
    Taux_G = formatC(Taux_G, format="f", digits = 1),
    Taux_G = ifelse(AcctGper != 0, paste0(Taux_G, " \\%"), ""),
    Taux_V=round(AcctVper / Vha * 100, 1),
    Taux_V = formatC(Taux_V, format = "f", digits = 1),
    Taux_V = ifelse(AcctVper != 0, paste0(Taux_V, " \\%"), ""),
    Taux_Vc = round(Gainper / VcHa * 100, 1),
    Taux_Vc = formatC(Taux_Vc, format = "f", digits = 1),
    Taux_Vc = ifelse(Gainper != 0, paste0(Taux_Vc, " \\%"), ""),

    AcctGper =
      ifelse(AcctGper == 0, NA, formatC(AcctGper, format = "f", digits = 2)),
    AcctVper =
      ifelse(AcctVper == 0, NA, formatC(AcctVper, format = "f", digits = 1)),
    Gainper =
      ifelse(Gainper == 0, NA, formatC(Gainper, format = "f", digits = 0))
  ) %>%
  select(Cat, AcctGper, Taux_G, AcctVper, Taux_V, Gainper, Taux_Vc) %>%
  melt(id = c("Cat", "Taux_G", "Taux_V", "Taux_Vc")) %>%
  group_by(variable) %>%
  mutate(
    value = as.numeric(value),

    Tot = sum(value, na.rm = T),
    Part = ifelse(Tot > 0, value / Tot, NA),
    Part=round(Part * 100, 0),

    value = ifelse(
      value > 0,
      paste0(value, " \\scriptsize{\\textcolor{CornflowerBlue}{(", Part, "\\%)}}"),
      NA
    ),

    Part = NULL,
    Tot = NULL
  ) %>%
  ungroup() %>%
  dcast(Cat + Taux_G + Taux_V + Taux_Vc ~ variable) %>%
  mutate(Cat = factor(Cat, levels = Cat_ORDER)) %>%
  arrange(Cat) %>%
  rename(Variable = Cat) %>%
  mutate(Variable = as.character(Variable))


pos2 <- dim(df2)[1]

# %%%%%%%%%% Taux par qualités regroupée

df5 <-
  gfForetDen_Reg2 %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  select(
    NumForet, Reg2, Cycle,
    Gha, Vha, VcHa, AcctGper, AcctVper, Gainper
  ) %>%
  mutate(Reg2 = factor(Reg2, levels = c("A+B", "C+D"))) %>%
  arrange(Reg2)


Reg2_ORDER <- as.character(df5$Reg2)

df5 <-
  df5 %>%
  mutate(
    Gha = ifelse(Gha < 0, 0, Gha),
    Vha = ifelse(Vha < 0, 0, Vha),
    VcHa = ifelse(VcHa < 0, 0, VcHa),
    AcctGper = ifelse(AcctGper < 0, 0, AcctGper),
    AcctVper = ifelse(AcctVper < 0, 0, AcctVper),
    Gainper = ifelse(Gainper < 0, 0, Gainper)
  ) %>%
  mutate(
    AcctGper = round(AcctGper, digits = 2),
    AcctVper = round(AcctVper, digits = 1),
    Gainper = round(Gainper, digits = 0),

    Taux_G = round(AcctGper / Gha * 100, 1),
    Taux_G = formatC(Taux_G,  format = "f",  digits = 1),
    Taux_G = ifelse(AcctGper!= 0, paste0(Taux_G, " \\%"), ""),
    Taux_V = round(AcctVper / Vha * 100, 1),
    Taux_V = formatC(Taux_V, format = "f", digits = 1),
    Taux_V = ifelse(AcctVper!= 0, paste0(Taux_V, " \\%"), ""),
    Taux_Vc = round(Gainper / VcHa * 100, 1),
    Taux_Vc = formatC(Taux_Vc, format = "f", digits = 1),
    Taux_Vc = ifelse(Gainper!= 0, paste0(Taux_Vc, " \\%"), ""),

    AcctGper =
      ifelse(AcctGper == 0, NA, formatC(AcctGper,  format = "f",  digits = 2)),
    AcctVper =
      ifelse(AcctVper == 0, NA, formatC(AcctVper,  format = "f",  digits = 1)),
    Gainper =
      ifelse(Gainper == 0, NA, formatC(Gainper,  format = "f",  digits = 0))) %>%
  select(Reg2, AcctGper, Taux_G, AcctVper, Taux_V, Gainper, Taux_Vc) %>%
  melt(id = c("Reg2", "Taux_G", "Taux_V", "Taux_Vc")) %>%
  group_by(variable) %>%
  mutate(
    value = as.numeric(value),

    Tot = sum(value, na.rm = T),
    Part = ifelse(Tot > 0, value / Tot, NA),
    Part = round(Part * 100, 0),

    value =
      ifelse(
        value > 0,
        paste0(value, " \\scriptsize{\\textcolor{CornflowerBlue}{(", Part, "\\%)}}"),
        NA
      ),

    Part = NULL,
    Tot = NULL
  ) %>%
  ungroup() %>%
  dcast(Reg2 + Taux_G + Taux_V + Taux_Vc ~ variable) %>%
  mutate(Reg2 = factor(Reg2, levels = Reg2_ORDER)) %>%
  arrange(Reg2) %>%
  rename(Variable = Reg2) %>%
  mutate(Variable = as.character(Variable))


pos5 <- dim(df5)[1]

# %%%%%%%%%% Taux par années

df31 <-
  gfForetDen_ %>%
  filter(NumForet == Choix) %>%
  mutate(Cycle = Cycle + 1) %>%
  select(NumForet, Cycle, Gha, Vha, VcHa)
df3 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle > 1) %>% #  & Cycle > 1
  # dplyr::select(NumForet,Cycle,
  #        Gha,Vha,VcHa,AcctGper,AcctVper,Gainper) %>%
  select(NumForet, Cycle, AcctGper, AcctVper, Gainper) %>%
  left_join(df31) %>%
  left_join(CyclesPeriodes_DF, by = c("Cycle" = "Cycle_Courant")) %>%
  mutate(
    Gha=ifelse(Gha < 0, 0, Gha),
    Vha = ifelse(Vha < 0, 0, Vha),
    VcHa = ifelse(VcHa < 0,
                  0,VcHa),
    AcctGper = ifelse(AcctGper < 0, 0, AcctGper),
    AcctVper = ifelse(AcctVper < 0, 0, AcctVper),
    Gainper = ifelse(Gainper < 0, 0, Gainper)) %>%
  mutate(Taux_G = round(AcctGper / Gha * 100, 1)) %>%
  arrange(desc(Taux_G)) %>%
  mutate(
    AcctGper = round(AcctGper, digits = 2),
    AcctVper = round(AcctVper, digits = 1),
    Gainper = round(Gainper, digits = 0),

    # Taux_G=round(AcctGper/Gha*100,1),
    Taux_G=formatC(Taux_G, format="f", digits=1),
    Taux_G=ifelse(AcctGper!=0,
                  paste0(Taux_G," \\%"),
                  ""),
    Taux_V=round(AcctVper/Vha*100,1),
    Taux_V=formatC(Taux_V, format="f", digits=1),
    Taux_V=ifelse(AcctVper!=0,
                  paste0(Taux_V," \\%"),
                  ""),
    Taux_Vc=round(Gainper/VcHa*100,1),
    Taux_Vc=formatC(Taux_Vc, format="f", digits=1),
    Taux_Vc=ifelse(Gainper!=0,
                   paste0(Taux_Vc," \\%"),
                   ""),

    AcctGper=ifelse(AcctGper==0,
                    NA,
                    formatC(AcctGper, format="f", digits=2)),
    AcctVper=ifelse(AcctVper==0,
                    NA,
                    formatC(AcctVper, format="f", digits=1)),
    Gainper=ifelse(Gainper==0,
                   NA,
                   formatC(Gainper, format="f", digits=0))
  ) %>%
  dplyr::select(Periodes, AcctGper, Taux_G, AcctVper, Taux_V, Gainper, Taux_Vc) %>%
  arrange(Periodes) %>%
  rename(Variable = Periodes) %>%
  mutate(Variable = as.character(Variable))

pos3 <- dim(df3)[1]
if ((protoc_CHG | plac_CHG) & DernierCycle == 2) {
  df3[pos3, ] <- paste0("\\textbf{\\textcolor{white}{", df3[pos3, ], "}}")
  df3[pos3, 1] <- paste0("\\rowcolor{DimGray} ", df3[pos3, 1])
} else {
  df3[pos3, ] <- paste0("\\textbf{", df3[pos3, ], "}")
  df3[pos3, 1] <- paste0("\\rowcolor{LightGray} ", df3[pos3, 1])
}

# %%%%%%%%%%%%%% Total
# --- Ecart (temps en années)
Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle == DernierCycle]
Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle == 1]
Annee_Ecart <- Annee_Fin - Annee_Debut

df_E <-
  gfForetDen_Coupe %>%
  filter(NumForet == Choix) %>%
  mutate(
    Coupe = gsub("PF/", "", Coupe),
    Coupe = gsub("PF", "", Coupe),
    Coupe = ifelse(Coupe == "", NA, Coupe),
    Cycle = ifelse(Cycle != DernierCycle, 1, DernierCycle)
  ) %>%
  group_by(NumForet, Cycle, Coupe) %>%
  summarise(
    Gha = sum(Gha, na.rm = T),
    Vha = sum(Vha, na.rm = T),
    VcHa = sum(VcHa, na.rm = T)
  ) %>%
  ungroup() %>%
  filter(!is.na(Coupe)) %>%
  select(NumForet, Coupe, Gha, Vha, VcHa)

# ----- Sécurités au cas où prélèvement(s) serai(en)t manquants
if (dim(df_E)[1] == 0) {
  df_temp <-
    data.frame(
      NumForet = Choix,
      Coupe = "C",
      Gha = 0,
      Vha = 0,
      VcHa = 0,
      stringsAsFactors = F
    )
  df_E <- df_E %>% rbind(df_temp)
}

if (length(which(df_E$Coupe == "C")) == 0) {
  df_temp <-
    df_E %>%
    mutate(
      Coupe = "C",
      Gha = 0,
      Vha = 0,
      VcHa = 0
    )
  df_E <- df_E %>% rbind(df_temp)
}

df_E1 <- df_E %>% select(NumForet, Coupe, Gha)
df_E2 <- df_E %>% select(NumForet, Coupe, Vha)
df_E3 <- df_E %>% select(NumForet, Coupe, VcHa)

df4 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & is.element(Cycle, c(1, DernierCycle))) %>%
  rename(
    Gha_Tot = Gha,
    Vha_Tot = Vha,
    VcHa_Tot = VcHa
  ) %>%
  select(NumForet, Cycle, Gha_Tot, Vha_Tot, VcHa_Tot) %>%
  mutate(Cycle = ifelse(Cycle == 1, "Debut", "Fin"))

df_Bilan1 <-
  df4 %>%
  select(NumForet, Cycle, Gha_Tot) %>%
  # melt(id = c("NumForet", "Cycle")) %>%
  dcast(NumForet ~ Cycle,  value.var = "Gha_Tot")
  # mutate(Coupe = Total)

df_Bilan2 <-
  df4 %>%
  select(NumForet, Cycle, Vha_Tot) %>%
  # melt(id = c("NumForet", "Cycle")) %>%
  dcast(NumForet ~ Cycle,  value.var = "Vha_Tot")

df_Bilan3 <-
  df4 %>%
  select(NumForet, Cycle, VcHa_Tot) %>%
  # melt(id = c("NumForet", "Cycle")) %>%
  dcast(NumForet ~ Cycle,  value.var = "VcHa_Tot")

df_Fin1 <-
  df_E1 %>%
  left_join(df_Bilan1) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot = sum(Gha)) %>%
  ungroup() %>%
  mutate(
    AcctGper_Tot = (Fin - Debut + Coupe_Tot) / Annee_Ecart,
    Periodes = paste0(Annee_Debut, " - ", Annee_Fin),
    Cycle = 1
  ) %>%
  select(Periodes, Cycle, AcctGper_Tot)

df_Fin2 <-
  df_E2 %>%
  left_join(df_Bilan2) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot = sum(Vha)) %>%
  ungroup() %>%
  mutate(
    AcctVper_Tot = (Fin - Debut + Coupe_Tot) / Annee_Ecart,
    Periodes = paste0(Annee_Debut, " - ", Annee_Fin),
    Cycle = 1
  ) %>%
  select(Periodes, Cycle, AcctVper_Tot)

df_Fin3 <-
  df_E3 %>%
  left_join(df_Bilan3) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot = sum(VcHa)) %>%
  ungroup() %>%
  mutate(
    Gainper_Tot = (Fin - Debut + Coupe_Tot) / Annee_Ecart,
    Periodes = paste0(Annee_Debut, " - ", Annee_Fin),
    Cycle = 1
  ) %>%
  select(Periodes, Cycle, Gainper_Tot)

df_Fin <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle == 1) %>%
  select(Cycle, Gha, Vha, VcHa) %>%
  left_join(df_Fin1) %>%
  left_join(df_Fin2) %>%
  left_join(df_Fin3) %>%
  distinct() %>%
  rename(
    AcctGper = AcctGper_Tot,
    AcctVper = AcctVper_Tot,
    Gainper = Gainper_Tot
  ) %>%
  mutate(
    Gha = ifelse(Gha < 0, 0, Gha),
    Vha = ifelse(Vha < 0, 0, Vha),
    VcHa = ifelse(VcHa < 0, 0, VcHa),
    AcctGper = ifelse(AcctGper < 0, 0, AcctGper),
    AcctVper = ifelse(AcctVper < 0, 0, AcctVper),
    Gainper = ifelse(Gainper < 0, 0, Gainper)
  ) %>%
  mutate(
    AcctGper = round(AcctGper, digits = 2),
    AcctVper = round(AcctVper, digits = 1),
    Gainper = round(Gainper, digits = 0),

    Taux_G = round(AcctGper / Gha * 100, 1),
    Taux_G = formatC(Taux_G,  format = "f",  digits = 1),
    Taux_G = ifelse(AcctGper != 0, paste0(Taux_G, " \\%"), ""),
    Taux_V = round(AcctVper / Vha * 100, 1),
    Taux_V = formatC(Taux_V,  format = "f",  digits = 1),
    Taux_V = ifelse(AcctVper != 0, paste0(Taux_V, " \\%"), ""),
    Taux_Vc = round(Gainper / VcHa * 100, 1),
    Taux_Vc = formatC(Taux_Vc,  format = "f",  digits = 1),
    Taux_Vc = ifelse(Gainper != 0, paste0(Taux_Vc, " \\%"), ""),

    AcctGper =
      ifelse(AcctGper == 0, NA, formatC(AcctGper,  format = "f",  digits = 2)),
    AcctVper =
      ifelse(AcctVper == 0, NA, formatC(AcctVper,  format = "f",  digits = 1)),
    Gainper =
      ifelse(Gainper == 0, NA, formatC(Gainper,  format = "f",  digits = 0))
  ) %>%
  select(Periodes, AcctGper, Taux_G, AcctVper, Taux_V, Gainper, Taux_Vc) %>%
  arrange(Periodes) %>%
  rename(Variable = Periodes) %>%
  mutate(Variable = as.character(Variable))

posFin <- dim(df_Fin)[1]
df_Fin[posFin, ] <- paste0("\\textbf{\\textcolor{white}{", df_Fin[posFin, ], "}}")
df_Fin[posFin, 1] <- paste0("\\rowcolor{DimGray} ", df_Fin[posFin, 1])

if (DernierCycle > 2) {
  df <-
    df1 %>%
    rbind(df2, df5, df3, df_Fin) %>%
    rename_(
      "\\textbf{}" = "Variable",
      "\\textbf{Taux G}" = "Taux_G",
      "\\textbf{Taux V}" = "Taux_V",
      "\\textbf{Taux Vc}" = "Taux_Vc",

      "\\textbf{AcctG}" = "AcctGper",
      "\\textbf{AcctV}" = "AcctVper",
      "\\textbf{Gain}" = "Gainper"
    )
}
if (DernierCycle  ==  2) {
  if ((protoc_CHG | plac_CHG) & DernierCycle == 2) {
    df <-
      df1 %>%
      rbind(df2, df5, df3) %>%
      rename_(
        "\\textbf{}" = "Variable",
        "\\textbf{Taux G}" = "Taux_G",
        "\\textbf{Taux V}" = "Taux_V",
        "\\textbf{Taux Vc}" = "Taux_Vc",

        "\\textbf{AcctG}" = "AcctGper",
        "\\textbf{AcctV}" = "AcctVper",
        "\\textbf{Gain}" = "Gainper"
      )
  } else {
    df <-
      df1 %>%
      rbind(df2, df5, df_Fin) %>%
      rename_(
        "\\textbf{}" = "Variable",
        "\\textbf{Taux G}" = "Taux_G",
        "\\textbf{Taux V}" = "Taux_V",
        "\\textbf{Taux Vc}" = "Taux_Vc",

        "\\textbf{AcctG}" = "AcctGper",
        "\\textbf{AcctV}" = "AcctVper",
        "\\textbf{Gain}" = "Gainper"
      )
  }
}

# # ----- Total
# df1_TOT <- filter(gfForetDen_,
#             NumForet==Choix & Cycle==DernierCycle) %>%
#   dplyr::select(NumForet,Cycle,
#          Gha,Vha,VcHa,AcctGper,AcctVper,Gainper) %>%
#   mutate(Gha=ifelse(Gha < 0,d
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#
#   mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",
#          Taux_G=paste0("\\textbf{",round(AcctGper/Gha*100,1)," \\%}"),
#          Taux_V=paste0("\\textbf{",round(AcctVper/Vha*100,1)," \\%}"),
#          Taux_Vc=paste0("\\textbf{",round(Gainper/VcHa*100,1)," \\%}"),
#
#          AcctGper=round(AcctGper,digits=ifelse(AcctGper < 0.1,
#                                                      2,1)),
#          AcctVper=round(AcctVper,digits=ifelse(AcctVper < 0.1,
#                                                      2,1)),
#          Gainper=round(Gainper,digits=ifelse(Gainper < 0.1,
#                                                      2,1)),
#          AcctGper=paste0("\\textbf{",AcctGper,"}"),
#          AcctVper=paste0("\\textbf{",AcctVper,"}"),
#          Gainper=paste0("\\textbf{",Gainper,"}")) %>%
#   dplyr::select(Essence,
#          AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc)
#
# df1 <- rbind(df1,df1_TOT) %>%
#   mutate(Essence=factor(Essence,
#                         levels=c(names(Palette_Essence),
#                                  "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
#   arrange(Essence) %>%
#   rename_("\\textbf{Essence}"="Essence",
#           "\\textbf{Taux G}"="Taux_G",
#           "\\textbf{Taux V}"="Taux_V",
#           "\\textbf{Taux Vc}"="Taux_Vc",
#
#           "\\textbf{AcctG}"="AcctGper",
#           "\\textbf{AcctV}"="AcctVper",
#           "\\textbf{Gain}"="Gainper")
#
#
#
#
#
#
#
#
#
#
# # ----- Total
# df2_TOT <- filter(gfForetDen_,
#             NumForet==Choix & Cycle==DernierCycle) %>%
#   dplyr::select(NumForet,Cycle,
#          Gha,Vha,VcHa,AcctGper,AcctVper,Gainper) %>%
#   mutate(Gha=ifelse(Gha < 0,
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#
#   mutate(Cat="\\rowcolor{LightGray} \\textbf{Total}",
#          Taux_G=paste0("\\textbf{",round(AcctGper/Gha*100,1)," \\%}"),
#          Taux_V=paste0("\\textbf{",round(AcctVper/Vha*100,1)," \\%}"),
#          Taux_Vc=paste0("\\textbf{",round(Gainper/VcHa*100,1)," \\%}"),
#
#          AcctGper=round(AcctGper,digits=ifelse(AcctGper < 0.1,
#                                                      2,1)),
#          AcctVper=round(AcctVper,digits=ifelse(AcctVper < 0.1,
#                                                      2,1)),
#          Gainper=round(Gainper,digits=ifelse(Gainper < 0.1,
#                                                      2,1)),
#          AcctGper=paste0("\\textbf{",AcctGper,"}"),
#          AcctVper=paste0("\\textbf{",AcctVper,"}"),
#          Gainper=paste0("\\textbf{",Gainper,"}")) %>%
#   dplyr::select(Cat,
#          AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc)
#
# df2 <- rbind(df2,df2_TOT) %>%
#   mutate(Cat=factor(Cat,
#                         levels=c(Cat_ORDER,
#                                  "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
#   rename_("\\textbf{Catégories de diamètre}"="Cat",
#           "\\textbf{Taux G}"="Taux_G",
#           "\\textbf{Taux V}"="Taux_V",
#           "\\textbf{Taux Vc}"="Taux_Vc",
#
#           "\\textbf{AcctG}"="AcctGper",
#           "\\textbf{AcctV}"="AcctVper",
#           "\\textbf{Gain}"="Gainper")


# %%%%%%%%%% Impression tableau
  if (DernierCycle > 2) {
    pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
  }
  if (DernierCycle == 2) {
    # if (protoc_CHG | plac_CHG) {
    #   pos_LINES <- c(-1:dim(df)[1], pos1, pos1 + pos2 , pos1 + pos2 + pos5)
    # } else {
      pos_LINES <- c(-1:dim(df)[1], pos1, pos1 + pos2, pos1 + pos2 + pos5)
    # }
}
# cat("\\begin{table}[h]
#     \\centering")
print(
  xtable(
    df,
    digits = rep(1, dim(df)[2] + 1),
    align = c("M{0cm}|", "|M{2.5cm}|", rep("M{1.5cm}|", dim(df)[2] - 1)),
    caption.placement = "bottom",
    caption = "Taux d'accroissements sur la période par essences, par catégories de diamètre, et par qualités\\\\\\footnotesize{Taux G : taux d'accroissement par rapport à la surface terrière\\\\Taux V : taux d'accroissement par rapport au volume\\\\Taux Vc : taux d'accroissement par rapport à la valeur de consommation}",
    label = "Tab_Taux"
  ),
  floating = T,
  hline.after = pos_LINES,
  sanitize.text.function = function(x){return(x)},
  include.rownames = FALSE,
  size = "\\footnotesize"
)

@

\FloatBarrier

\subsection{Accroissements en diamètre}

<<Comment_2.6.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.6.1")
cat(Comment$Texte)
@

La figure \ref{fig:Fig_AccD_Essence} présente les accroissements en diamètre des différentes essences.
% {\Large \textcolor{red}{Rajouter imprécision (intervalle de confiance ? sur des points)}}
<<Fig_AccD_Essence, echo=F, message=F, warning=F, fig.height=4, fig.cap="Valeurs d'accroissements en diamètre par essences, selon les classes et catégories de diamètre", fig.pos='H', eval=Eval_Evol, include=Eval_Evol>>=

t1 <-
  gfForetDen_EssReg %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(
    Gha = round(Gha, 1),
    Essence = EssReg
  ) %>%
  select(Essence, Gha) %>%
  filter(Gha > 0) %>% # Ordre des essences classées par G décroissant
  distinct() %>%
  arrange(-Gha)
# ----- Sous-ensemble d'essences faisant au moins 20‰ de la surface terrière :
Seuil <- 0.15
Essences_Seuil <- t1$Essence[ which(t1$Gha >= Seuil * sum(t1$Gha)) ]
Essence_Princ <- Essences_Seuil[1]

df_AcctD1 <-
  Arbres %>%
  filter(NumForet == Choix & Cycle==DernierCycle & Diam >= 17.5) %>%
  select(
    NumForet, NumPlac, NumArbre, Cycle,
    Essence, EssReg, Azimut, Dist, Diam, Classe, AcctD
  ) %>%
  filter(Cycle == DernierCycle) %>%
  mutate(Population = "Bois vivant\nde franc-pied")
# df <- filter(Arbres,
#              NumForet==Choix & Cycle==DernierCycle & Diam >= 17.5)
# df_AcctD1 <- left_join(df[,c("NumForet","NumPlac","NumArbre",
#                                      "Essence","EssReg","Azimut","Dist","Cycle",
#                                      "Diam1","Diam2","Diam","Classe")],
#                        AcctD) %>%
#   select(NumForet,NumPlac,NumArbre,Cycle,
#          Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD) %>%
#   filter(Cycle==DernierCycle) %>%
#   mutate(Population="Bois vivant\nde franc-pied")   # Version AFI

# df <- filter(Taillis,
#              NumForet==Choix & Cycle==DernierCycle)
# df_AcctD2 <- left_join(df[,c("NumForet","NumPlac",
#                                      "Essence","EssReg","Cycle",
#                                      "Diam","Classe")],
#                        AcctD) %>%
#   mutate(Population="Taillis",
#          NumArbre=NA,
#          Dist=NA,
#          Azimut=NA) %>%
#   select(NumForet,NumPlac,NumArbre,Cycle,
#          Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD,Population) %>% # ,EssReg
#   filter(Cycle==DernierCycle)

# df_AcctD <- rbind(df_AcctD1,
#                   df_AcctD2)
df_AcctD <-
  df_AcctD1 %>%
  mutate(
    Cat = cut(
      Diam,
      breaks = c(0, 17.5, 27.5, 47.5, 67.5, 200),
      labels = c("PER", "PB", "BM", "GB", "TGB"),
      include.lowest = T, right = F)
  )

df_AcctD_Bis <-
  df_AcctD %>%
  filter(EssReg %in% Essences_Seuil) %>%
  group_by(Cat, Population, EssReg) %>%
  mutate(
    Moy_AcctD = mean(AcctD, na.rm = T),
    Sd_AcctD = sd(AcctD, na.rm = T),
    Mark = factor(0.5)
  ) %>%
  ungroup() %>%
  select(Mark, Population, EssReg, Cat, Moy_AcctD, Sd_AcctD) %>%
  # mutate(Cat = as.character(Cat)) %>%
  # mutate(Moy_AcctD = as.factor(Moy_AcctD)) %>%
  distinct() %>%
  arrange(Cat)


# --- Table pour sortir la moyenne par classe des accroissements courants des précomptables
df_AcctD1_Tot <-
  df_AcctD1 %>%
  group_by(Classe) %>%
  summarise(AcctD = mean(AcctD, na.rm = T)) %>%
  ungroup() %>%
  mutate(Population = "AcctD_Prec")

# -- p_ghost est une figure "fantôme" : elle n'apparîtra pas dans le rendu final mais elle permet de récupérer la légende correspondant au tracé de la moyenne des AcctD par classe (toutes essences confondues) + dans la figure finale, d'espacer de façon régulière les 3 morceaux de légende (moyenne des AcctD courant (toutes essences confondues), AcctD courants des essences, moyenne des AcctD des catégories de diamètre)
p_ghost <-
  ggplot() +
  geom_path(
    df_AcctD1_Tot,
    mapping = aes(Classe, AcctD, size = Population)) +
  scale_size_manual(name = "Moyenne des\nAcctD courants\ndes précomptables",
                    values = 0.5) +
  guides(size =
           guide_legend(
             nrow = ifelse(
               length(unique(df_AcctD$EssReg)) > 4,
               round(length(unique(df_AcctD$EssReg))/4, 0),
               1)
           )
  ) +
  MyTheme +
  theme(
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    legend.position = "bottom",
    legend.direction = "vertical",
    legend.box = "horizontal",
    legend.box.just = "top",
    legend.spacing.y  =  unit(0, "cm"),
    # legend.background = element_rect(colour = "gray50",
    #                                 size = 0.2),
    strip.background = element_blank(),
    strip.text = element_text(face = "bold")
  )

Y=max(df_AcctD$AcctD,na.rm=T)
p1 <-
  ggplot() +
  geom_point(
    df_AcctD,
    mapping = aes(Diam, AcctD, colour = EssReg),
    alpha = 1,
    shape = 1) +
  geom_path(df_AcctD1_Tot,
            mapping = aes(Classe, AcctD, size = Population)) +
  scale_x_continuous(
    name = "Classes de diamètre",
    limits = c(17.5, max(df_AcctD$Classe, na.rm = T)),
    breaks = seq(10, floor(max(df_AcctD$Classe, na.rm = T) / 10 + 0.5) * 10, 10)
  ) + #, expand = c(0, 0)
  scale_y_continuous(
    name = "AcctD (cm/an)",
    limits = c(0, Y),
    breaks = seq(0, Y*1.1, 0.25)
  ) +
  # facet_wrap(~ Population,
  #            nrow = 2,
  #            scales = "free") +
  scale_colour_manual(
    name = "AcctD courants",
    values = Palette_Essence
  ) +
  scale_size_manual(
    name = "Moyenne des\nAcctD courants\ndes précomptables",
    values = 0.5,
    label = "AcctD"
  ) +
  # scale_size_manual(values = rep(0.9, 9)) +
  guides(
    colour = guide_legend(
      nrow = ifelse(
        length(unique(df_AcctD$EssReg)) > 4,
        round(length(unique(df_AcctD$EssReg))/4, 0),
        1),
      byrow = T,
      order = 2
    ),
    size = guide_legend(order = 1)
  ) +
  MyTheme +
  theme(
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7),
    legend.position = "bottom",
    legend.direction = "vertical",
    legend.box = "horizontal",
    legend.box.just = "top",
    legend.spacing.y  =  unit(0, "cm"),
    # legend.background = element_rect(colour = "gray50",
    #                                 size = 0.2),
    strip.background = element_blank(),
    strip.text = element_text(face = "bold")
  )


df_AcctD_Ter <- mutate(df_AcctD_Bis,
                       Sd_AcctD=ifelse(EssReg==Essence_Princ,
                                       Sd_AcctD,
                                       NA))
Y=max(df_AcctD_Ter$Moy_AcctD,na.rm=F)
p2 <- ggplot() +
  geom_errorbar(df_AcctD_Ter,
            mapping=aes(Cat,
                        ymin=Moy_AcctD-Sd_AcctD,
                        ymax=Moy_AcctD+Sd_AcctD,
                        colour=EssReg,group=EssReg),
            width=0.4,
            position=position_dodge(0.5)) +
  geom_point(df_AcctD_Bis,
            mapping=aes(Cat,Moy_AcctD,colour=EssReg,group=EssReg),
            position=position_dodge(0.5)) +
  scale_x_discrete(name="Catégories de diamètre") +
                     # limits=c(10,max(df_AcctD$Cat,na.rm=T)),
                     # breaks=levels(df_AcctD$Cat)) + #,expand=c(0,0)
  scale_y_continuous(name="AcctD (cm/an)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,0.1)) +
  # facet_wrap(~ Population,
  #            nrow=2,
  #            scales="free") +
  scale_colour_manual(name="Moyenne par essence\ndes AcctD courants",
                      values=Palette_Essence) +
    # scale_size_manual(values=rep(0.9,9)) +
   guides(colour=guide_legend(nrow=ifelse(length(unique(df_AcctD$EssReg)) > 4,
                                         round(length(unique(df_AcctD$EssReg))/4,0),
                                         1),
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme + theme(legend.title=element_text(size=8),
                  legend.text=element_text(size=7),
                  legend.position="bottom",
                  legend.direction="vertical",
                  legend.box="vertical",
                  legend.box.just="top",
                  legend.spacing.y = unit(0,"cm"),
                  # legend.background=element_rect(colour="gray50",
                  #                                 size=0.2),
                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))

mylegend0 <- g_legend(p_ghost)
mylegend1 <- g_legend(p1)
mylegend2 <- g_legend(p2)

# grid.arrange(p1,p2,nrow=2,heights=rep(1,2))
# grid.arrange(p1,p2,ncol=2,widths=rep(1,2))
pA <- arrangeGrob(p1 + theme(legend.position="none"),
                  p2 + theme(legend.position="none"),
                  nrow=1, widths=rep(1,2))
# pB <- arrangeGrob(ggplot()+geom_blank()+theme_void(), # Figure vide pour décaler les légender et mieux les centrer
#                   mylegend0,
#                   mylegend1,
#                   mylegend2,
#                   nrow=1, widths=c(0.2,1,1.2,1))
pB <- arrangeGrob(mylegend1,
                  mylegend2,
                  nrow=1, widths=c(3,1))
# pB_1 <- arrangeGrob(mylegend0,
#                   mylegend2,
#                   nrow=1,widths=c(1,1))
# pB_2 <- arrangeGrob(pB_1,
#                     mylegend1,
#                   nrow=2, heights=c(1,2))

grid.arrange(pA,pB,
             nrow=2,heights=c(4,2))
# grid.arrange(pA,pB_2,
#              nrow=2,heights=c(5,2))
@
\FloatBarrier

La partie gauche de la figure \ref{fig:Fig_AccD_Essence} représente la variabilité des accroissements sur le diamètre des arbres ainsi que la moyenne des accroissements courants en diamètre par classe de diamètre.\\
Dans la partie droite, sont représentés les moyennes des accroissements courants en diamètre des principales essences (essences représentant au moins 15\% du G total des précomptables), ainsi que l'intervalle de confiance pour l'essence majoritaire.\\

<<Fig_AccD_Cat, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="Valeurs d'accroissements en diamètre selon les différentes classes et catégories de diamètre", fig.pos='H', eval=F, include=F>>=
# ArbresEnTour <- Arbres
df_AcctD1 <- left_join(Arbres[,c("NumForet","NumPlac","NumArbre",
                                     "Essence","EssReg","Azimut","Cycle",
                                     "Diam1","Diam2","Diam","Classe")],
                       AcctD) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Diam,Classe,AcctD) %>%
  filter(Cycle==DernierCycle & !is.na(AcctD)) %>%
  mutate(Population="Bois vivant\nde franc-pied")


df_AcctD2 <- left_join(Taillis[,c("NumForet","NumPlac",
                                     "Essence","EssReg","Cycle",
                                     "Diam","Classe")],
                       AcctD) %>%
  mutate(Population="Taillis",
         NumArbre=NA,
         Dist=NA,
         Azimut=NA) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Diam,Classe,AcctD,Population) %>% # ,EssReg
  filter(Cycle==DernierCycle & !is.na(AcctD))

df_AcctD <- rbind(df_AcctD1,
                  df_AcctD2) %>%
  mutate(Population="Arbres et taillis confondus",
         Cat=cut(Classe,
                 breaks = c(0,17.5,27.5,47.5,67.5,200),
                   labels = c("PER", "PB", "BM", "GB","TGB"),
                   include.lowest = T,
                   right = F),
         Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB")))# %>%
  # filter(Cat!="PER")
# %>%
#   group_by(Cat,Population) %>%
#   mutate(Moy_AcctD=mean(AcctD,na.rm=T)) %>%
#   ungroup()
df_AcctD_Bis <- group_by(df_AcctD,
                         Classe,Population) %>%
  mutate(Moy_AcctD=mean(AcctD,na.rm=T),
         Sd_AcctD=sd(AcctD),
         # A=Moy_AcctD-AcctD,
         # B=A^2,
         # C=sum(B)/(length(B)-1),
         # D=sqrt(C), # Ecart-Type vérifié !
         Mark=factor(1)) %>%
  ungroup() #%>%
  # select(Mark,Population,Classe,Diam,Moy_AcctD,Sd_AcctD) %>%
  # distinct()
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

ggplot() +
  geom_point(df_AcctD,
             mapping=aes(Diam,AcctD,colour=Cat),
             alpha=1) +# 0.4
             # shape=1) +
  geom_ribbon(df_AcctD_Bis,
            mapping=aes(Diam,
                        ymin=Moy_AcctD*(1-Sd_AcctD),
                        ymax=Moy_AcctD*(1+Sd_AcctD)),
            col= "black",alpha=0.7,
            fill="grey90",linetype=3) +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,size=Mark),
            linetype=1,
            colour="yellow") +
  geom_line(df_AcctD_Bis,
            mapping=aes(Diam,Moy_AcctD,size=Mark),
            linetype=2,
            colour="navyblue") +
  scale_x_continuous(name="Classes de diamètre",
                     limits=c(10,max(df_AcctD$Classe,na.rm=T)),
                     breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,5),
                     expand=c(0,0)) + #,expand=c(0,0)
  scale_y_continuous(name="AcctD (cm/an)") +
  # ,
  # limits=c(min(df_AcctD$AcctD,na.rm=T)-0.5,
  #          max(df_AcctD$AcctD,na.rm=T)+0.5),
  # breaks=seq(floor((min(df_AcctD$AcctD,na.rm=T)-0.5)/0.5-0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/0.5+0.5)*0.5,
  #            floor((max(df_AcctD$AcctD,na.rm=T)+0.5)/5/0.5+0.5)*0.5),
  # expand=c(0,0)) +
  # facet_wrap(~ Population,
  #            nrow=2,
  #            scales="free") +
  scale_colour_manual(name="Catégories de diamètre",
                      values=Palette_Cat) +
  scale_size_manual(name="",
                    label="AcctD moyen",
                    values=0.7) +
  guides(colour=guide_legend(nrow=1,
                             byrow=T,
                             order=2),
         size=guide_legend(order=1)) +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
# ,
#                   legend.box="vertical",
#                   legend.box.spacing=unit(c(0,0,0,0), "cm"),
#                   legend.box.just="top"
@
\FloatBarrier

La figure \ref{fig:Fig_AccD_EvolCat} présente l'évolution au cours du temps des accroissements courants en diamètre par catégories de diamètre.% (perches et précomptables inclus).

<<Fig_AccD_EvolCat, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="Suivi au cours du temps des moyennes des accroissements en diamètre courants par catégorie de diamètre", fig.pos='H', eval=Eval_Evol, include=Eval_Evol>>=

df_AcctD1 <- filter(Arbres,
                    NumForet==Choix & Cycle!=1 &
                      Diam >= 17.5 & !is.na(AcctD)) %>%
  select(NumForet,NumPlac,NumArbre,Cycle,
         Essence,EssReg,Azimut,Dist,Diam,Classe,AcctD) %>%
  filter(Cycle==DernierCycle) %>%
  mutate(Population="Bois vivant\nde franc-pied")

# df_AcctD1 <- left_join(Arbres[Arbres$NumForet==Choix,
#                               c("NumForet","NumPlac","NumArbre",
#                                      "Essence","EssReg","Azimut","Cycle",
#                                      "Diam1","Diam2","Diam","Classe")],
#                        AcctD) %>%
#   select(NumForet,NumPlac,NumArbre,Cycle,
#          Essence,EssReg,Azimut,Diam,Classe,AcctD) %>%
#   filter(!is.na(AcctD) & Diam >= 17.5 & Cycle!=1) %>%
#   mutate(Population="Bois vivant\nde franc-pied")     # Version AFI



CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))
# df_AcctD <- rbind(df_AcctD1,
#                   df_AcctD2) %>%
df_AcctD <- left_join(df_AcctD1,
                      Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Annee=Periodes,

         Population="Arbres",
         Cat=cut(Classe,
                 breaks = c(0,17.5,27.5,47.5,67.5,200),
                   labels = c("PER", "PB", "BM", "GB","TGB"),
                   include.lowest = T,
                   right = F),
         Cat=factor(Cat,levels=c("PER", "PB", "BM", "GB","TGB")))# %>%
  # filter(Cat!="PER")
# %>%
#   group_by(Cat,Population) %>%
#   mutate(Moy_AcctD=mean(AcctD,na.rm=T)) %>%
#   ungroup()
df_AcctD_Bis <- group_by(df_AcctD,
                         Annee,Cat,Population) %>%
  summarise(Moy_AcctD=mean(AcctD,na.rm=T),
         Sd_AcctD=sd(AcctD),
         # A=Moy_AcctD-AcctD,
         # B=A^2,
         # C=sum(B)/(length(B)-1),
         # D=sqrt(C), # Ecart-Type vérifié !
         Mark=factor(1)) %>%
  ungroup() %>%
  mutate(Annee=factor(Annee))#%>%
  # select(Mark,Population,Classe,Diam,Moy_AcctD,Sd_AcctD) %>%
  # distinct()
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
# Palette_Cycle <- rep("dodgerblue3",DernierCycle)
# names(Palette_Cycle) <- 1:DernierCycle
# Alpha_Cycle <- c(1,rep(0.3,DernierCycle-2),1)
# names(Alpha_Cycle) <- 1:DernierCycle
Palette_Cycle <- rep("dodgerblue3",DernierCycle-1)
if (DernierCycle == 3) {
  Palette_Cycle <- c("dodgerblue3","firebrick3")
}
# names(Palette_Cycle) <- 1:DernierCycle
# names(Palette_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
names(Palette_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

if (DernierCycle > 2) {
Alpha_Cycle <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle <- 1
}
# names(Alpha_Cycle) <- 1:DernierCycle
# names(Alpha_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
names(Alpha_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]


# Cat_VEC <- sort(unique(df_AcctD_Bis$Cat))
# Cat_VEC <- as.character(Cat_VEC)
#
# df_AcctD_Bis_Label <- filter(df_AcctD_Bis,
#                             Cat %in% Cat_VEC[c(1,length(Cat_VEC))])
df_Bis <- mutate(df_AcctD_Bis,
                Cat=as.numeric(Cat)) %>%
group_by(Annee) %>%
  mutate(Cat_Min=min(Cat),
         Cat_Max=max(Cat)) %>%
  filter(Cat==Cat_Min | Cat==Cat_Max) %>%
  ungroup() %>%
  mutate(Cat=levels(df_AcctD_Bis$Cat)[Cat]) %>% # on remet les catégories de diamètre
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))


# Y=max(df_AcctD_Bis$Moy_AcctD,na.rm=T)
ggplot() +
  geom_line(df_AcctD_Bis,
             mapping=aes(Cat,Moy_AcctD,colour=Annee,group=Annee,alpha=Annee)) +
  # geom_label_repel(df_AcctD_Bis_Label,
  #                  mapping=aes(Cat,Moy_AcctD,label=Cycle),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  geom_label_repel(df_Bis,
                   mapping=aes(Cat,Moy_AcctD,label=Annee),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1, colour="black") +
  # scale_x_continuous(name="Catégories de diamètre",
  #                    # limits=c(10,max(df_AcctD$Classe,na.rm=T)),
  #                    # breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,5),
  #                    expand=c(0,0)) +
  scale_y_continuous(name="Moyenne des AcctD courants (cm/an)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,0.1)) +
  scale_colour_manual(name="Périodes d'inventaire",
                      values=Palette_Cycle) +
  scale_alpha_manual(name="Périodes d'inventaire",
                     values=Alpha_Cycle) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
  labs(x="Catégories de diamètre") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))


@

\FloatBarrier

\subsection{Accroissements en surface terrière}

<<Comment_2.6.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.6.2")
cat(Comment$Texte)
@

% \textcolor{red}{Attention ne pas oublier de remplacer par les valeurs par périodes une fois mis en place dans la fonction afi\_Calculs(). Ne pas oublier de modifier la légende (accroissements courants par période)}
La figure \ref{fig:Fig_AccGAccV_EvolCat} illustre l'évolution de l'accroissement en surface terrière. Dans la partie gauche sont représentés les accroissements constatés à l'échelle de l'ensemble du dispositif, toutes essences confondues. Dans la partie droite est présenté le détail pour l'essence majoritaire (au regard de la surface terrière).


% \textcolor{red}{Attention Regroupement essence. Décision prise d'utiliser EssReg.}
<<Fig_AccGAccV_EvolCat, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="Suivi au cours du temps des moyennes des accroissements courants en surface terrière par catégorie de bois", fig.pos='H', eval=Eval_Evol, include=Eval_Evol>>=
CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))


df_Acct_Bis <- filter(gfForetDen_Cat,
                      NumForet==Choix & Cycle!=1) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Annee=Periodes) %>%
  select(Annee,Cat,AcctGper,AcctVper) %>%
  group_by(Annee,Cat) %>%
  summarise(Moy_AcctGper=mean(AcctGper,na.rm=T),
            Moy_AcctVper=mean(AcctVper,na.rm=T)) %>%
  ungroup() %>%
  mutate(Annee=factor(Annee),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
# Palette_Cycle <- rep("dodgerblue4",DernierCycle)
# # names(Palette_Cycle) <- 1:DernierCycle
# names(Palette_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
# Alpha_Cycle <- c(1,rep(0.3,DernierCycle-2),1)
# # names(Alpha_Cycle) <- 1:DernierCycle
# names(Alpha_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
Palette_Cycle <- rep("dodgerblue3",DernierCycle-1)
if (DernierCycle == 3) {
  Palette_Cycle <- c("dodgerblue3","firebrick3")
}
names(Palette_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

if (DernierCycle > 2) {
Alpha_Cycle <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle <- 1
}
names(Alpha_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]


# Cat_VEC <- sort(unique(df_Acct_Bis$Cat))
# Cat_VEC <- as.character(Cat_VEC)
#
# df_Acct_Bis_Label <- filter(df_Acct_Bis,
#                             Cat %in% Cat_VEC[c(1,length(Cat_VEC))])
df_Bis <- mutate(df_Acct_Bis,
                Cat=as.numeric(Cat)) %>%
group_by(Annee) %>%
  mutate(Cat_Min=min(Cat),
         Cat_Max=max(Cat)) %>%
  filter(Cat==Cat_Min | Cat==Cat_Max) %>%
  ungroup() %>%
  mutate(Cat=levels(df_Acct_Bis$Cat)[Cat]) %>% # on remet les catégories de diamètre
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Y=max(df_Acct_Bis$Moy_AcctGper)

p1 <- ggplot() +
  geom_line(df_Acct_Bis,
             mapping=aes(Cat,Moy_AcctGper,
                         colour=Annee,group=Annee,alpha=Annee)) +
  # geom_label_repel(df_Acct_Bis_Label,
  #                  mapping=aes(Cat,Moy_AcctG,label=Annee),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  geom_label_repel(df_Bis,
                   mapping=aes(Cat,Moy_AcctGper,label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1, colour="black") +
  scale_y_continuous(name="Moyenne des AcctG courants\n(m2/ha/an)",
                     breaks=seq(0,Y*1.1,0.05),
                     limits=c(0,Y)) +
  scale_colour_manual(name="Périodes d'inventaire",
                      values=Palette_Cycle) +
  scale_alpha_manual(name="Périodes d'inventaire",
                     values=Alpha_Cycle) +
  guides(colour=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                             byrow=T,order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                            byrow=T,order=1)) +
  labs(x="Catégories de diamètre") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),
                  # legend.justification="center",

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))

# --- Même figure mais pour l'essence principale
df_Acct_Bis <- filter(gfForetDen_EssRegCat,
                       NumForet==Choix & EssReg==Essence_Princ &
                        Cycle!=1) %>%
  mutate(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Annee=Periodes) %>%
  select(Annee,Cat,AcctGper,AcctVper) %>%
  group_by(Annee,Cat) %>%
  summarise(Moy_AcctGper=mean(AcctGper,na.rm=T),
            Moy_AcctVper=mean(AcctVper,na.rm=T)) %>%
  ungroup() %>%
  mutate(Annee=factor(Annee),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
Colour <- Essences$Couleur[Essences$Nom==Essence_Princ]
if (length(Colour)==0) { # Cas où la table l'essence principale pour les AcctD est tirée des EssReg et où pas de correspondance avec Essence$Nom
  Colour <- Essences$Couleur[match(Essence_Princ,Essences$Reg)]
}
# Palette_Cycle2 <- rep(Colour,DernierCycle)
# names(Palette_Cycle) <- 1:DernierCycle
# names(Palette_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
# Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
# # names(Alpha_Cycle) <- 1:DernierCycle
# names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]

Palette_Cycle2 <- rep(Colour,DernierCycle-1)
names(Palette_Cycle2) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
names(Alpha_Cycle2) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]


# Cat_VEC <- sort(unique(df_Acct_Bis$Cat))
# Cat_VEC <- as.character(Cat_VEC)
#
# df_Acct_Bis_Label <- filter(df_Acct_Bis,
#                             Cat %in% Cat_VEC[c(1,length(Cat_VEC))])
df_Bis <- mutate(df_Acct_Bis,
                Cat=as.numeric(Cat)) %>%
group_by(Annee) %>%
  mutate(Cat_Min=min(Cat),
         Cat_Max=max(Cat)) %>%
  filter(Cat==Cat_Min | Cat==Cat_Max) %>%
  ungroup() %>%
  mutate(Cat=levels(df_Acct_Bis$Cat)[Cat]) %>% # on remet les catégories de diamètre
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

# Y=max(df_Acct_Bis$Moy_AcctGper,na.rm=T)

p2 <- ggplot() +
  geom_line(df_Acct_Bis,
             mapping=aes(Cat,Moy_AcctGper,
                         colour=Annee,group=Annee,alpha=Annee)) +
  # geom_label_repel(df_Acct_Bis_Label,
  #                  mapping=aes(Cat,Moy_AcctV,label=Cycle),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  geom_label_repel(df_Bis,
                   mapping=aes(Cat,Moy_AcctGper,label=Annee),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1, colour="black") +
  scale_y_continuous(name=paste0("Moyenne des AcctG courants\n(m2/ha/an)\npour l'essence ",
                                 Essence_Princ),
                     breaks=seq(0,Y*1.1,0.05),
                     limits=c(0,Y)) +
  scale_colour_manual(name="Périodes d'inventaire",
                      values=Palette_Cycle2) +
  scale_alpha_manual(name="Périodes d'inventaire",
                     values=Alpha_Cycle2) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
  guides(colour=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                             byrow=T,order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                            byrow=T,order=1)) +
  labs(x="Catégories de diamètre") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),


                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))


mylegend1 <- g_legend(p1)

# grid.arrange(p1,p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend1,nrow=2,heights=c(9, 2))
grid.arrange(p1,p2,nrow=1)

@
\FloatBarrier

\subsection{Accroissements en valeur}

<<Comment_2.6.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.6.3")
cat(Comment$Texte)
@

La figure \ref{fig:Fig_AccGAccV_EvolCat} illustre l'évolution de l'accroissement en valeur. Dans la partie gauche sont représentés les accroissements constatés à l'échelle de l'ensemble du dispositif, toutes essences confondues. Dans la partie droite, est présenté le détail pour l'essence majoritaire (au regard de la surface terrière).

% \textcolor{red}{Attention ne pas oublier de remplacer par les valeurs par périodes une fois mis en place dans la fonction afi\_Calculs(). Ne pas oublier de modifier la légende (accroissements courants par période)}

% \textcolor{red}{Attention Regroupement essence. Décision prise d'utiliser EssReg.}
<<Fig_Gain_EvolCat, echo=F, message=F, warning=F, fig.height=3.5, fig.cap="Suivi au cours du temps des moyennes des accroissements courants en valeur (gain) par catégorie de bois", fig.pos='H', eval=Eval_Evol, include=Eval_Evol>>=
CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))


df_Acct_Bis <- filter(gfForetDen_Cat,
                       NumForet==Choix & Cycle!=1) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Annee=Periodes) %>%
  select(Annee,Cat,Gainper) %>%
  group_by(Annee,Cat) %>%
  summarise(Moy_Gainper=mean(Gainper,na.rm=T)) %>%
  ungroup() %>%
  mutate(Annee=factor(Annee),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
# Palette_Cycle <- rep("midnightblue",DernierCycle)
# # names(Palette_Cycle) <- 1:DernierCycle
# names(Palette_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
# Alpha_Cycle <- c(1,rep(0.3,DernierCycle-2),1)
# # names(Alpha_Cycle) <- 1:DernierCycle
# names(Alpha_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
Palette_Cycle <- rep("midnightblue",DernierCycle-1)
if (DernierCycle == 3) {
  Palette_Cycle <- c("midnightblue","firebrick3")
}
names(Palette_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

if (DernierCycle > 2) {
Alpha_Cycle <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle <- 1
}
names(Alpha_Cycle) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

# Cat_VEC <- sort(unique(df_Acct_Bis$Cat))
# Cat_VEC <- as.character(Cat_VEC)
#
# df_Acct_Bis_Label <- filter(df_Acct_Bis,
#                             Cat %in% Cat_VEC[c(1,length(Cat_VEC))])
df_Bis <- mutate(df_Acct_Bis,
                Cat=as.numeric(Cat)) %>%
group_by(Annee) %>%
  mutate(Cat_Min=min(Cat),
         Cat_Max=max(Cat)) %>%
  filter(Cat==Cat_Min | Cat==Cat_Max) %>%
  ungroup() %>%
  mutate(Cat=levels(df_Acct_Bis$Cat)[Cat]) %>% # on remet les catégories de diamètre
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Y=max(df_Acct_Bis$Moy_Gainper,na.rm=T)

p1 <- ggplot() +
  geom_line(df_Acct_Bis,
             mapping=aes(Cat,Moy_Gainper,
                         colour=Annee,group=Annee,alpha=Annee)) +
  geom_label_repel(df_Bis,
                   mapping=aes(Cat,Moy_Gainper,label=Annee),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1, colour="black") +
  scale_y_continuous(name="Moyenne des Gain courants\n(euros/ha/an)",
                     breaks=seq(0,Y*1.1,10),
                     limits=c(0,Y)) +
  scale_colour_manual(name="Périodes d'inventaire",
                      values=Palette_Cycle) +
  scale_alpha_manual(name="Périodes d'inventaire",
                     values=Alpha_Cycle) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
    guides(colour=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                               byrow=T,order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                            byrow=T,order=1)) +
  labs(x="Catégories de diamètre") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))


# --- Même figure mais pour l'essence principale
df_Acct_Bis <- filter(gfForetDen_EssRegCat,
                       NumForet==Choix & EssReg==Essence_Princ &
                        Cycle!=1) %>%
  mutate(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Annee=Periodes) %>%
  select(Annee,Cat,Gainper) %>%
  group_by(Annee,Cat) %>%
  summarise(Moy_Gainper=mean(Gainper,na.rm=T)) %>%
  ungroup() %>%
  mutate(Annee=factor(Annee),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))


# Cat_VEC <- sort(unique(df_Acct_Bis$Cat))
# Cat_VEC <- as.character(Cat_VEC)
#
# df_Acct_Bis_Label <- filter(df_Acct_Bis,
#                             Cat %in% Cat_VEC[c(1,length(Cat_VEC))])
df_Bis <- mutate(df_Acct_Bis,
                Cat=as.numeric(Cat)) %>%
group_by(Annee) %>%
  mutate(Cat_Min=min(Cat),
         Cat_Max=max(Cat)) %>%
  filter(Cat==Cat_Min | Cat==Cat_Max) %>%
  ungroup() %>%
  mutate(Cat=levels(df_Acct_Bis$Cat)[Cat]) %>% # on remet les catégories de diamètre
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")))

Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")
Colour <- Essences$Couleur[Essences$Nom==Essence_Princ]
if (length(Colour)==0) { # Cas où la table l'essence principale pour les AcctD est tirée des EssReg et où pas de correspondance avec Essence$Nom
  Colour <- Essences$Couleur[match(Essence_Princ,Essences$Reg)]
}
# Palette_Cycle2 <- rep(Colour,DernierCycle)
# # names(Palette_Cycle) <- 1:DernierCycle
# names(Palette_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
# Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
# # names(Alpha_Cycle) <- 1:DernierCycle
# names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
#                                              is.element(Cycles$Cycle,1:DernierCycle))]
Palette_Cycle2 <- rep(Colour,DernierCycle-1)
names(Palette_Cycle2) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

if (DernierCycle > 2) {
Alpha_Cycle <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle <- 1
}
if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
names(Alpha_Cycle2) <- CyclesPeriodes_DF$Periode[which(is.element(CyclesPeriodes_DF$Cycle_Courant,2:DernierCycle))]

# Y=max(df_Acct_Bis$Moy_Gainper,na.rm=T)

p2 <- ggplot() +
  geom_line(df_Acct_Bis,
             mapping=aes(Cat,Moy_Gainper,
                         colour=Annee,group=Annee,alpha=Annee)) +
  geom_label_repel(df_Bis,
                   mapping=aes(Cat,Moy_Gainper,label=Annee),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1, colour="black") +
  scale_y_continuous(name=paste0("Moyenne des Gain courants\n(euros/ha/an)\npour l'essence ",
                                 Essence_Princ),
                     breaks=seq(0,Y*1.1,10),
                     limits=c(0,Y)) +
  scale_colour_manual(name="Périodes d'inventaire",
                      values=Palette_Cycle2) +
  scale_alpha_manual(name="Périodes d'inventaire",
                     values=Alpha_Cycle2) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
    guides(colour=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                               byrow=T,order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 1,
                                         ceiling(DernierCycle/2),1),
                            byrow=T,order=1)) +
  labs(x="Catégories de diamètre") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))

grid.arrange(p1,p2,nrow=1)
@
\FloatBarrier

\section{Evolution au cours du temps}

<<Comment_2.7, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7")
cat(Comment$Texte)
@

\subsection{Evolution du matériel sur pied (en volume et en valeur)}

\subsubsection{Variables dendrométriques}

<<Comment_2.9.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.9.1")
cat(Comment$Texte)
@

Le tableau \ref{Tab_GestionPassee_Prec} retrace l'évolution des principales composantes dendrométriques des précomptables au cours des différents inventaires.

% \textcolor{red}{Attention Regroupement essence. Décision prise d'utiliser EssReg.}
<<Tab_GestionPassee_Prec, echo=F, warning=F, size='footnotesize', results='asis', eval = Eval_Evol, include = Eval_Evol>>=
# t1 <- filter(gfForetDen_Essence,
#              Cycle == DernierCycle & NumForet==Choix) %>%
#   select(Essence,Gha) %>%
#   mutate(Population="Précomptables",
#          Gha=round(Gha,1)) %>%
#   # ListArbres <- data.frame(Essence=unique(gfForetFpied_Essence$Essence),
#   #                             Population="Arbres",
#   #                             stringsAsFactors=F) %>%
#   #   left_join(t1) %>%
#   rename(Valeur=Gha) %>%
#   arrange(-Valeur)
#
# # ----- Sous-ensemble d'essences faisant au moins 20‰ de la surface terrière :
# Seuil <- 0.10
# Essences_Seuil <- t1$Essence[which(t1$Valeur >= Seuil*sum(t1$Valeur))]
# Essence_Princ <- Essences_Seuil[1]



# %%%%%%%%%% Précomptables
df1 <-
  gfForetDen_ %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")])
# names(df1)[which(names(df1)=="Mesure Houppiers")] <- "Mesure_Houppiers"

df1 <-
  df1 %>%
  mutate(
    Nha = round(Nha, 0),
    Gha = round(Gha, 1),
    Vha = round(Vha)
  ) %>%
  # Couvert=round(Couvert/10000*0.25*Coefft^2*100,0), # Gha*"rapport Dhoup^2/Diam^2" donne la surface (en m2/ha) de projection de houppier. On divise par 10000 pour ramener à la surface totale d'1ha
  # Couvert=ifelse(Mesure_Houppiers==1,
  #                paste0(Couvert," \\%"),
  #                NA)) %>%
  select(Annee, Nha, Gha, Vha) %>%
  melt(id = "Annee") %>%
  mutate(value = as.character(value)) %>%
  dcast(variable ~ Annee)

df2 <-
  gfForetDen_Reg1 %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  left_join(Quals[, c("Nom", "Reg2")], by = c("Reg1" = "Nom")) %>%
  select(Annee, Reg2, Gha) %>%
  group_by(Annee, Reg2) %>%
  summarise(Gha = round(sum(Gha), 1)) %>%
  group_by(Annee) %>%
  mutate(Gha_Tot = round(sum(Gha), 1)) %>%
  group_by(Annee, Reg2) %>%
  mutate(Gha_Part = round(Gha / Gha_Tot * 100)) %>%
  ungroup() %>%
  select(-one_of("Gha_Tot")) %>%
  melt(id=c("Annee", "Reg2")) %>%
  dcast(Annee ~ variable + Reg2) %>%
  select(-one_of("Gha_Part_C+D")) %>%
  melt(id = "Annee") %>%
  mutate(value = as.character(value)) %>%
  dcast(variable ~ Annee)

df2_EssencePrinc <- filter(gfForetDen_EssRegReg1,
              NumForet==Choix) %>%
  mutate(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  left_join(Quals[,c("Nom","Reg2")],
            by=c("Reg1"="Nom")) %>%
  select(Annee,Essence,Reg2,Gha) %>%
  mutate(Gha=round(Gha,1),
         Essence_Mark=ifelse(Essence==Essence_Princ,
                             Essence,"Autres")) %>%
  # filter(!is.na(Reg2)) %>%
  group_by(Annee,Essence_Mark,Reg2) %>%
  summarise(Gha=sum(Gha)) %>%
  # group_by(Annee) %>%
  # mutate(Gha_Tot=sum(Gha)) %>%
  # group_by(Annee,Essence_Mark,Reg2) %>%
  # mutate(Gha_Part=Gha/Gha_Tot) %>%
  ungroup() %>%
  filter(Essence_Mark==Essence_Princ)

# Sécurité si A+B = 0
Reg2_ALIBI <- expand.grid(Annee=unique(df2_EssencePrinc$Annee),
                           Essence_Mark=unique(df2_EssencePrinc$Essence_Mark),
                           Reg2=c("A+B","C+D"),
                           stringsAsFactors=F) %>%
  data.frame()

df2_EssencePrinc <- full_join(df2_EssencePrinc,
                              Reg2_ALIBI) %>%
  select(-one_of("Essence_Mark")) %>%
  melt(id=c("Annee","Reg2")) %>%
  dcast(Annee ~ variable + Reg2) %>%
  select(-one_of("Gha_C+D")) %>%
  melt(id="Annee") %>%
  mutate(value=as.character(value)) %>%
  dcast(variable ~ Annee) %>%
  mutate(variable=as.character(variable))
# rename_("Gha_A+B_Essence_Princ"="Gha_A+B")

df2_EssencePrinc$variable[which(df2_EssencePrinc$variable=="Gha_A+B")] <- "Gha_A+B_Essence_Princ"

df2 <- rbind(df2,df2_EssencePrinc)
# for (i in 2:dim(df2)[2]) {
#   df2[,i] <- round(df2[,i],1)
# }


df3 <- filter(gfForetDen_Cat,
             NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,Gha) %>%
  group_by(Annee) %>%
  mutate(Gha_Tot=sum(Gha)) %>%
  group_by(Annee,Cat) %>%
  mutate(Gha_Part=round(Gha/Gha_Tot*100)) %>%
  ungroup() %>%
  select(Annee,Cat,Gha_Part) %>%
  dcast(Annee ~ Cat,
        value.var="Gha_Part") %>%
  melt(id="Annee") %>%
  dcast(variable ~ Annee)

df <- rbind(df1,df2) %>%
  rbind(df3) %>%
  mutate(variable=as.character(variable),

         variable=ifelse(variable=="Nha","N",variable),
         variable=ifelse(variable=="Gha","G",variable),
         variable=ifelse(variable=="Vha","V",variable),
         variable=ifelse(variable=="Gha_Part_A+B","\\hline\n\\% G (A+B)",variable),
         variable=ifelse(variable=="Gha_A+B","G (A+B)",variable),
         variable=ifelse(variable=="Gha_C+D","G (C+D)",variable),
         variable=ifelse(variable=="Gha_A+B_Essence_Princ",
                         paste0("G ",Essence_Princ," (A+B)"),
                         variable),
         variable=ifelse(variable=="PB","\\hline\n\\% G PB",variable),
         variable=ifelse(variable=="BM","\\% G BM",variable),
         variable=ifelse(variable=="GB","\\% G GB",variable),
         variable=ifelse(variable=="TGB","\\% G TGB",variable),

         variable=factor(variable,
                         levels=c("N","G","V","Couvert","\\hline\n\\% G (A+B)","G (A+B)","G (C+D)",
                                  paste0("G ",Essence_Princ," (A+B)"),
                                  "\\hline\n\\% G PB","\\% G BM","\\% G GB","\\% G TGB"))) %>%
  arrange(variable) %>%
  rename_("\\rowcolor{LightGray} "="variable")
pos_NAME <- which(names(df)!="\\rowcolor{LightGray} ")
names(df)[pos_NAME] <- paste0("\\textbf{",names(df)[pos_NAME],"}")
  # select(one_of("Cycle","Vha","Gha","Gha_Part_A+B","Gha_A+B","Gha_C+D",
  #               "Gha_A+B_Essence_Princ",
  #        "PB","BM","GB","TGB")) %>%
  # rename_("\\textbf{Cycle}"="Cycle",
  #         "\\textbf{V}"="Vha",
  #         "\\textbf{G}"="Gha",
  #         "\\textbf{\\% PB}"="PB",
  #         "\\textbf{\\% BM}"="BM",
  #         "\\textbf{\\% GB}"="GB",
  #         "\\textbf{\\% TGB}"="TGB")

# names(df)[which(names(df)=="Gha_A+B")] <- "\\textbf{G (A+B)}"
# names(df)[which(names(df)=="Gha_C+D")] <- "\\textbf{G (C+D)}"
# names(df)[which(names(df)=="Gha_Part_A+B")] <- "\\textbf{\\% G (A+B)}"
# names(df)[which(names(df)=="Gha_A+B_Essence_Princ")] <- paste0("\\textbf{G\\hspace{0.2cm}",
#                                                                Essence_Princ,
#                                                                " (A+B)}")



# %%%%%%%%%% Impression tableau

print(xtable(df,
             # digits=rep(0,dim(t1)[2]+1),
             digits=c(0,rep(0,dim(df)[2])),
             align=c("M{0cm}","|M{2.5cm}|",
                     rep("M{1cm}|",dim(df)[2]-1)),
             caption = "Evolution du matériel sur pied",
             label   = "Tab_GestionPassee_Prec"),
      table.placement="H",
      caption.placement = "bottom",
      hline.after=-1:dim(df)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
@


<<Param_GestionPassee, echo=F, warning=F, size='footnotesize', results='asis'>>=

# Paramétrage largeur chunk suivant :
width_PARAM <- 2
if (DernierCycle == 1) {
  width_PARAM <- 2
}
if (DernierCycle == 2) {
  width_PARAM <- 3.25
}
if (DernierCycle == 3) {
  width_PARAM <- 4.5
}
if (DernierCycle == 4) {
  width_PARAM <- 5.75
}
if (DernierCycle > 4) {
  width_PARAM <- 7
}
@

La figure \ref{fig:Hist_GestionPassee} représente l'évolution de la répartition de la surface terrière entre :
\begin{itemize}[label=-]
\item les précomptables de qualité A+B
\item les perches de qualité A+B
\item les précomptables de qualité C+D
\item les perches de qualité C+D
\item le taillis
\end{itemize}

<<Hist_GestionPassee, echo=F, warning=F, size='footnotesize', fig.pos="H", fig.height=4, fig.width=width_PARAM, fig.cap="Suivi de la répartition de la surface terrière entre les différentes qualités au cours du temps", eval=Eval_Evol, include=Eval_Evol>>=
# %%%%%%%%%% Précomptables :
df1 <- filter(gfForetDen_Reg2,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Population=Reg2) %>%
  select(Annee,Population,Gha)

df2 <- filter(gfForetPer_Reg2,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Population=paste0("Perches ",Reg2)) %>%
  select(Annee,Population,Gha)

df3 <- filter(gfForetTaillis_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Population="Taillis") %>%
  select(Annee,Population,Gha)

df <- rbind(df1,df2,df3) %>%
  mutate(Population=factor(Population,
                           levels=c("Taillis",
                                    "Perches C+D","C+D",
                                    "Perches A+B","A+B")),
         Annee=factor(Annee))

Palette_Hist_GestionPassee <- c("red2","darkgreen",
                                "darkviolet","darkseagreen1",
                                "navajowhite4")
names(Palette_Hist_GestionPassee) <- c("A+B","C+D",
                                    "Perches A+B","Perches C+D",
                                    "Taillis")

Y <- group_by(df,
              Annee) %>%
  summarise(Gha=sum(Gha)) %>%
  ungroup() %>%
  select(Gha) %>%
  filter(Gha==max(Gha)) %>%
  unlist()

ggplot() +
  geom_bar(df,
           mapping=aes(Annee,Gha,fill=Population),
           position="stack",stat="identity",width=0.5) + #,width=0.7
  scale_y_continuous(limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,2.5)) +
  scale_fill_manual(name=NULL,
                    values=Palette_Hist_GestionPassee) +
  # coord_flip() +
  guides(fill=guide_legend(reverse=T,
                           nrow=ifelse(width_PARAM < 4.5,
                                       2,1))) +
  theme_bw() + MyTheme +
  labs(x="Années d'inventaire",y="G (m2/ha)") +
  theme(legend.position="bottom",
        legend.direction="horizontal")


@

La figure \ref{fig:Hist_GestionPassee_Effectif} représente l'évolution du nombre de tiges de précomptables au cours du temps.

<<Hist_GestionPassee_Effectif, echo=F, warning=F, size='footnotesize', fig.pos="H", fig.height=4, fig.cap="Effectif à l'hectare des arbres précomptables",eval=Eval_Evol,include=Eval_Evol>>=
# %%%%%%%%%% Précomptables :
df <- filter(gfForetDen_Classe,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Classe,Nha) %>%
  mutate(Annee=factor(Annee))



# Palette_Cycle <- rep("dodgerblue4",DernierCycle)
# names(Palette_Cycle) <- 1:DernierCycle
# Alpha_Cycle <- c(1,rep(0.3,DernierCycle-2),1)
# names(Alpha_Cycle) <- 1:DernierCycle
Palette_Cycle <- rep("dodgerblue4",DernierCycle)
# names(Palette_Cycle) <- 1:DernierCycle
names(Palette_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
if (DernierCycle > 2) {
Alpha_Cycle <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle <- c(1,1)
  Palette_Cycle <- c("dodgerblue4","firebrick3")
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Y=max(df$Nha)
X=max(df$Classe)
Xmin=min(df$Classe)


Classe_VEC <- sort(unique(df$Classe))
# Classe_VEC <- as.character(Classe_VEC)

# df_Bis <- filter(df,
#                  Classe %in% Classe_VEC[c(1,length(Classe_VEC))])
df_Bis <- group_by(df,
                Annee) %>%
  mutate(Classe_Min=min(Classe),
         Classe_Max=max(Classe)) %>%
  filter(Classe==Classe_Min | Classe==Classe_Max) %>%
  ungroup()


ggplot() +
  geom_line(df,
            mapping=aes(Classe,Nha,colour=Annee,
                        alpha=Annee,group=Annee)) + #,width=0.7
  geom_label_repel(df_Bis,
                   mapping=aes(Classe,Nha,label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1, colour="black") +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,5)) +
  scale_colour_manual(name="Années d'inventaire",
                      values=Palette_Cycle) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle) +
  labs(x="Classes de diamètre",y="N (nb/ha)") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))



@
\FloatBarrier

Le tableau \ref{Tab_PF} présente le nombre de tiges passé à la futaie au cours de la dernière période.
\FloatBarrier
<<Tab_PF, echo=F, warning=F, size='footnotesize', results='asis', eval=Eval_Evol, include=Eval_Evol>>=

# --- Ecart (temps en années)
Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle]
Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle==1]
Annee_Ecart <- Annee_Fin-Annee_Debut


df_ALIBI <- filter(gfForetDen_EssReg,
                   NumForet==Choix & Cycle > 1) %>%
  rename(Essence=EssReg)

Essences_ALIBI <- expand.grid(NumForet=Choix,
                              Cycle=2:DernierCycle,
                            Essence=unique(df_ALIBI$Essence),
                            stringsAsFactors=F) %>%
  data.frame()
Essences_ALIBI2 <- expand.grid(NumForet=Choix,
                              Cycle=DernierCycle,
                            Essence=unique(df_ALIBI$Essence),
                            stringsAsFactors=F) %>%
  data.frame()

CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                                Cycle_Courant=2:DernierCycle,
                                stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant),
         Rotation=Annee_Courant-Annee_Ante)


df1_EssenceAnnee <- filter(gfForetDen_EssRegCatCoupe,
                           NumForet==Choix & Cycle > 1 &
                             Cat=="PB") %>%
  rename(Essence=EssReg) %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Essence,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  full_join(Essences_ALIBI) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Nha=Nha/Rotation,
         Nha=ifelse(Nha==0,NA,round(Nha,1))) %>%
  select(Essence,Periodes,Nha)

# Total par essences
df1_EssenceTOT <- filter(gfForetDen_EssRegCatCoupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  rename(Essence=EssReg) %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Cycle=ifelse(Cycle!=1,
                      DernierCycle,1)) %>%
  filter(Coupe=="PF") %>%
  full_join(Essences_ALIBI2) %>%
  group_by(NumForet,Cycle,Essence,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Periodes=paste0(Annee_Debut,"-",Annee_Fin),
         Nha=Nha/Annee_Ecart,
         Nha=ifelse(Nha==0,"",round(Nha,1)),
         Nha=paste0("\\cellcolor{LightGray} \\textbf{",Nha,"}")) %>%
  # filter(!is.na(Coupe)) %>%
  select(Essence,Periodes,Nha)

# Total par année
df1_AnneeTOT <- filter(gfForetDen_CatCoupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",
         Nha=Nha/Rotation,
         Nha=ifelse(Nha==0,"",round(Nha,1)),
         Nha=paste0("\\textbf{",Nha,"}")) %>%
  select(Essence,Periodes,Nha)

# Total par année et toutes essences confondues
df1_TOT <- filter(gfForetDen_CatCoupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Cycle=ifelse(Cycle!=1,
                      DernierCycle,1)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Periodes=paste0(Annee_Debut,"-",Annee_Fin),
         Nha=Nha/Annee_Ecart,
         Nha=ifelse(Nha==0,NA,round(Nha,1)),
         Essence="\\rowcolor{LightGray} \\textbf{Total}") %>%
  filter(!is.na(Coupe)) %>%
  select(Essence,Periodes,Nha)

if (DernierCycle==2) {
  df1 <- rbind(df1_EssenceTOT,
             df1_AnneeTOT) %>%
  mutate(Essence=factor(Essence,
                        levels=c(names(Palette_Essence),
                                 "\\rowcolor{LightGray} \\textbf{Total}")),
         Periodes=factor(Periodes,levels=unique(c(CyclesPeriodes_DF$Periodes,
                                                paste0(Annee_Debut,"-",Annee_Fin))))) %>%
  arrange(Essence,Periodes) %>%
  dcast(Essence ~ Periodes,
        value.var="Nha")
} else {
df1 <- rbind(df1_EssenceAnnee,df1_EssenceTOT,
             df1_AnneeTOT,df1_TOT) %>%
  mutate(Essence=factor(Essence,
                        levels=c(names(Palette_Essence),
                                 "\\rowcolor{LightGray} \\textbf{Total}")),
         Periodes=factor(Periodes,levels=unique(c(CyclesPeriodes_DF$Periodes,
                                                paste0(Annee_Debut,"-",Annee_Fin))))) %>%
  arrange(Essence,Periodes) %>%
  dcast(Essence ~ Periodes,
        value.var="Nha")
}

# df1 <- rbind(df1,df1_TOT) %>%
#   mutate(Essence=factor(Essence,
#                         levels=c(names(Palette_Essence),
#                                  "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
#   arrange(Essence) %>%
#   rename_("Essences" = "Essence")
names(df1) <- paste0("\\textbf{",names(df1),"}")
df1[dim(df1)[1],
    dim(df1)[2]] <- paste0("\\cellcolor{DimGray}{\\textcolor{White}{\\textbf{",
                           df1[dim(df1)[1],dim(df1)[2]],"}}}")






##### #####

Reg2_ALIBI <- expand.grid(NumForet=Choix,
                           Cycle=2:DernierCycle,
                           Reg2=c("A+B","C+D"),
                           stringsAsFactors=F) %>%
  data.frame()
Reg2_ALIBI2 <- expand.grid(NumForet=Choix,
                           Cycle=DernierCycle,
                           Reg2=c("A+B","C+D"),
                           stringsAsFactors=F) %>%
  data.frame()

df2_Reg2Annee <- filter(gfForetDen_CatReg2Coupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Reg2,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  full_join(Reg2_ALIBI) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Nha=Nha/Rotation,
         Nha=ifelse(Nha==0,NA,round(Nha,1))) %>%
  select(Reg2,Periodes,Nha)
# %>%
#   arrange(desc(Nha)) %>%
#   dcast(Reg2 ~ Periodes,
#         value.var="Nha")

# Total par Qualités
df2_Reg2TOT <- filter(gfForetDen_CatReg2Coupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Cycle=ifelse(Cycle!=1,
                      DernierCycle,1)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Reg2,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  full_join(Reg2_ALIBI) %>%
  mutate(Periodes=paste0(Annee_Debut,"-",Annee_Fin),
         Nha=Nha/Annee_Ecart,
         Nha=ifelse(Nha==0,"",round(Nha,1)),
         Nha=paste0("\\cellcolor{LightGray} \\textbf{",Nha,"}")) %>%
  filter(!is.na(Coupe)) %>%
  select(Reg2,Periodes,Nha)

df2_AnneeTOT <- filter(gfForetDen_CatCoupe,
                  NumForet==Choix & Cycle > 1 &
                    Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  mutate(Reg2="\\rowcolor{LightGray} \\textbf{Total}",
         Nha=Nha/Rotation,
         Nha=ifelse(Nha==0,"",round(Nha,1)),
         Nha=paste0("\\textbf{",Nha,"}")) %>%
  select(Reg2,Periodes,Nha)
# %>%
#   dcast(Reg2 ~ Periodes,
#         value.var="Nha")
Reg2_ORDER <- c("A+B","C+D","\\rowcolor{LightGray} \\textbf{Total}")

# Total par année et toutes essences confondues
df2_TOT <- filter(gfForetDen_CatCoupe,
             NumForet==Choix & Cycle > 1 &
               Cat=="PB") %>%
  mutate(Coupe=gsub("/E","",Coupe),
         Coupe=gsub("E","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Cycle=ifelse(Cycle!=1,
                      DernierCycle,1)) %>%
  filter(Coupe=="PF") %>%
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Periodes=paste0(Annee_Debut,"-",Annee_Fin),
         Nha=Nha/Annee_Ecart,
         Nha=ifelse(Nha==0,NA,round(Nha,1)),
         Reg2="\\rowcolor{LightGray} \\textbf{Total}") %>%
  filter(!is.na(Coupe)) %>%
  select(Reg2,Periodes,Nha)

if (DernierCycle==2) {
  df2 <- rbind(df2_Reg2TOT,
             df2_AnneeTOT) %>%
  mutate(Reg2=factor(Reg2,
                      levels=Reg2_ORDER),
         Periodes=factor(Periodes,levels=unique(c(CyclesPeriodes_DF$Periodes,
                                           paste0(Annee_Debut,"-",Annee_Fin))))) %>%
  arrange(Reg2,Periodes) %>%
  dcast(Reg2 ~ Periodes,
        value.var="Nha") %>%
  rename_("Qualité" = "Reg2")
} else {
  df2 <- rbind(df2_Reg2Annee,df2_Reg2TOT,
             df2_AnneeTOT,df2_TOT) %>%
  mutate(Reg2=factor(Reg2,
                      levels=Reg2_ORDER),
         Periodes=factor(Periodes,levels=unique(c(CyclesPeriodes_DF$Periodes,
                                           paste0(Annee_Debut,"-",Annee_Fin))))) %>%
  arrange(Reg2,Periodes) %>%
  dcast(Reg2 ~ Periodes,
        value.var="Nha") %>%
  rename_("Qualité" = "Reg2")
}



# df2 <- rbind(df2,df2_TOT) %>%
#   mutate(Reg2=factor(Reg2,
#                     levels=Reg2_ORDER)) %>%
#   arrange(Reg2) %>%
#   rename_("Qualités" = "Reg2")
names(df2) <- paste0("\\textbf{",names(df2),"}")

df2[dim(df2)[1],
    dim(df2)[2]] <- paste0("\\cellcolor{DimGray}{\\textcolor{White}{\\textbf{",
                           df2[dim(df2)[1],dim(df2)[2]],"}}}")


cat("\\begin{table}[h]
\\centering
")
print(xtable(df1,
             digits=c(0,rep(0,dim(df1)[2])),
             align=c("M{0cm}","|M{2.5cm}|",
                     rep("M{1.5cm}|",dim(df1)[2]-1)),
             # caption = "Nombre de tiges passant à la futaie au cours des différentes périodes - distinction par essences",
             label=NULL),
      floating=F,
      # table.placement="H",
      # caption.placement = "bottom",
      hline.after=-1:dim(df1)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
cat("\\hspace{0.5cm}
    ~")
print(xtable(df2,
             digits=c(0,rep(0,dim(df2)[2])),
             align=c("M{0cm}","|M{1.5cm}|",
                     rep("M{1.5cm}|",dim(df2)[2]-1)),
             # caption = "Nombre de tiges passant à la futaie au cours des différentes périodes - disctinction par qualités",
             label=NULL),
      floating=F,
      # table.placement="H",
      # caption.placement = "bottom",
      hline.after=-1:dim(df2)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
cat("\\caption{Nombre de tiges passant à la futaie au cours des différentes périodes - disctinction par essences et par qualités}
\\label{Tab_PF}
\\end{table}")
@

\FloatBarrier
\subsubsection{Variables économiques}

<<Comment_2.7.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.1")
cat(Comment$Texte)
@


% \textcolor{red}{Manque couvert - méthode de calcul à comprendre?}\\
Le tableau \ref{Tab_GestionPasseeEco_Prec} présente l'évolution des valeurs de consommation et potentielle au cours du temps. On y retrouve les résultats pour les différentes populations du sous-étage (semis, taillis et perches) ainsi que ceux pour les précomptables, déclinés par catégories de diamètre.\\
Ces valeurs sont calculées à partir d'une grille de prix unitaire en euros, utilisée par l'AFI. Ces données sont présentées ici à titre indicatif. Plus que les valeurs absolues, ce sont les variations relatives dans le temps qui sont intéressantes.\\
La figure \ref{fig:Hist_GestionPasseeEco} complète cet aperçu de l'évolution des principales composantes économiques du dispositif.

<<Tab_GestionPasseeEco_Prec, echo=F, warning=F, size='footnotesize', results='asis',eval=Eval_Evol,include=Eval_Evol>>=

# %%%%%%%%%% Valeur de consommation (Précomptables)
df1 <- filter(gfForetDen_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,VcHa) %>%
  mutate(VcHa=paste0("\\textbf{",
                     round(VcHa),
                     " \\scriptsize{\\textcolor{CornflowerBlue}{(100\\%)}}}"),
         Cat="\\rowcolor{LightGray} \\textbf{Précomptables}") %>%
  dcast(Cat ~ Annee,
        value.var="VcHa")

df2 <- filter(gfForetDen_Cat,
             NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,VcHa) %>%
  group_by(Annee) %>%
  mutate(VcHa_Tot=sum(VcHa)) %>%
  group_by(Annee,Cat) %>%
  mutate(VcHa_Part=round(VcHa/VcHa_Tot*100)) %>%
  ungroup() %>%
  mutate(VcHa=paste0(round(VcHa)," \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    VcHa_Part,
                    "\\%)}}"),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  select(Annee,Cat,VcHa) %>%
  dcast(Cat ~ Annee,
        value.var="VcHa")

# ---------- %%%%%%%%%%%%%%%%%%%% ---------- #
Cycles_ALIBI <- expand.grid(NumForet=Choix,
                            Cycle=1:DernierCycle)
# ---------- Valeur de consommation Perches et Taillis
df_Perches <- filter(gfForetPer_) %>%
  full_join(Cycles_ALIBI) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Gha) %>%
  mutate(Vha=Gha*7,
         VcHa=round(Vha*3/2*6,0),
         VpHa=round(VcHa*1.3)) %>%  # 3/2 -> passage de m3 en stère; 6 -> prix du stère %>%
  mutate(Cat="Perches") %>%
  select(Cat,Annee,VcHa,VpHa)

df_Taillis <- filter(gfForetTaillis_) %>%
  full_join(Cycles_ALIBI) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Gha) %>%
  mutate(Vha=Gha*7,
         VcHa=round(Vha*3/2*6,0),
         VpHa=0) %>%
  mutate(Cat="Taillis") %>%
  select(Cat,Annee,VcHa,VpHa)

df_SsEtage <- rbind(df_Perches,df_Taillis) %>%
  mutate(Cat=factor(Cat,levels=c("Taillis","Perches")))

# ----- ----- ----- #
# Sauvegarde total 2
df_TOT2 <- select(df_SsEtage,
                  Cat,Annee,VcHa) %>%
  distinct() %>%
  rename(Valeur=VcHa)
# Sauvegarde total 3
df_TOT3 <- select(df_SsEtage,
                  Cat,Annee,VpHa) %>%
  distinct() %>%
  rename(Valeur=VpHa)
# ----- ----- ----- #

df_SsEtage_VcHa <- select(df_SsEtage,
                          Cat,Annee,VcHa) %>%
  dcast(Cat ~ Annee,
        value.var="VcHa")

df_SsEtage_VpHa <- select(df_SsEtage,
                          Cat,Annee,VpHa) %>%
  filter(Cat!="Taillis") %>%
  dcast(Cat ~ Annee,
        value.var="VpHa")

########################## TOTAUX ##########################
# Sauvegarde total 1 : Vc
df_TOT1_VcHa <- filter(gfForetDen_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Cat="Précomptables") %>%
  select(Cat,Annee,VcHa) %>%
  rename(Valeur=VcHa)

df_TOT_VcHa <- rbind(df_TOT1_VcHa,df_TOT2) %>%
  group_by(Annee) %>%
  summarise(Valeur=round(sum(Valeur,na.rm=T),0)) %>%
  ungroup()


Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle]
Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle==1]
Periode <- paste0(Annee_Debut," - ",Annee_Fin)

VcHa_VAR <- (df_TOT_VcHa$Valeur[which(df_TOT_VcHa$Annee==Annee_Fin)]-
               df_TOT_VcHa$Valeur[which(df_TOT_VcHa$Annee==Annee_Debut)])/
  df_TOT_VcHa$Valeur[which(df_TOT_VcHa$Annee==Annee_Debut)]*100
VcHa_VAR <- round(VcHa_VAR,0)
if (VcHa_VAR > 0) {
  VcHa_VAR <- paste0("+",VcHa_VAR)
} else {
  VcHa_VAR <- paste0("-",VcHa_VAR)
}

df_TOT_VcHa <- mutate(df_TOT_VcHa,
                      Valeur=paste0("\\textbf{\\textcolor{white}{",
                                       Valeur,"}}"),
                      Cat="\\rowcolor{DimGray} \\textbf{\\textcolor{white}{Total}}") %>%
  dcast(Cat ~ Annee,
        value.var="Valeur")

# ---------- %%%%%%%%%%%%%%%%%%%% ---------- #

df_SAV1 <- rbind(df2,df1,
                 df_SsEtage_VcHa,
                 df_TOT_VcHa) %>%
  # full_join(df3) %>%
  # full_join(df4)
  rename_("Population"="Cat")

names(df_SAV1)[2:dim(df_SAV1)[2]] <- paste0("Vc ",names(df_SAV1)[2:dim(df_SAV1)[2]])
names(df_SAV1) <- paste0("\\textbf{",names(df_SAV1),"}")
  # rename_("\\textbf{Cycle}"="Cycle",
  #         "\\textbf{Vc PB}"="PB",
  #         "\\textbf{Vc BM}"="BM",
  #         "\\textbf{Vc GB}"="GB",
  #         "\\textbf{Vc TGB}"="TGB",
  #         "\\textbf{Vc Précomptables}"="Précomptables")


# names(df2_EssencePrinc)[which(names(df2_EssencePrinc)=="Gha_A+B")] <- "Gha_A+B_Essence_Princ"
#
# df2 <- full_join(df2,df2_EssencePrinc)
#
#
#
#
# df <- full_join(df1,df2) %>%
#   full_join(df3) %>%
#   select(one_of("Cycle","Vha","Gha","Gha_Part_A+B","Gha_A+B","Gha_C+D",
#                 "Gha_A+B_Essence_Princ",
#          "PB","BM","GB","TGB")) %>%
#   rename_("\\rowcolor{SteelBlue} \\textbf{Cycle}"="Cycle",
#           "\\textbf{V}"="Vha",
#           "\\textbf{G}"="Gha",
#           "\\textbf{\\% PB}"="PB",
#           "\\textbf{\\% BM}"="BM",
#           "\\textbf{\\% GB}"="GB",
#           "\\textbf{\\% TGB}"="TGB")

# names(df)[which(names(df)=="Gha_A+B")] <- "\\textbf{G (A+B)}"
# names(df)[which(names(df)=="Gha_C+D")] <- "\\textbf{G (C+D)}"
# names(df)[which(names(df)=="Gha_Part_A+B")] <- "\\textbf{\\% G (A+B)}"
# names(df)[which(names(df)=="Gha_A+B_Essence_Princ")] <- paste0("\\textbf{G\\hspace{0.2cm}",
#                                                                Essence_Princ,
#                                                                " (A+B)}")



# %%%%%%%%%% Valeur de consommation (Précomptables)
df1 <- filter(gfForetDen_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,VpHa) %>%
  mutate(VpHa=paste0("\\textbf{",
                     round(VpHa),
                     " \\scriptsize{\\textcolor{CornflowerBlue}{(100\\%)}}}"),
         Cat="\\rowcolor{LightGray} \\textbf{Précomptables}") %>%
  dcast(Cat ~ Annee,
        value.var="VpHa")

df2 <- filter(gfForetDen_Cat,
             NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,VpHa) %>%
  group_by(Annee) %>%
  mutate(VpHa_Tot=sum(VpHa)) %>%
  group_by(Annee,Cat) %>%
  mutate(VpHa_Part=round(VpHa/VpHa_Tot*100)) %>%
  ungroup() %>%
  mutate(VpHa=ifelse(VpHa!=0 & !is.na(VpHa),
                     paste0(round(VpHa)," \\scriptsize{\\textcolor{CornflowerBlue}{(",
                            VpHa_Part,
                            "\\%)}}"),
                     NA),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  select(Annee,Cat,VpHa) %>%
  dcast(Cat ~ Annee,
        value.var="VpHa")

# df_SAV2 <- rbind(df2,df1) %>%
#   rename_("Population"="Cat")
#
# names(df_SAV2)[2:dim(df_SAV2)[2]] <- paste0("Vp ",names(df_SAV2)[2:dim(df_SAV2[2])])
  # rename_("\\textbf{Cycle}"="Cycle",
  #         "\\textbf{Vp PB}"="PB",
  #         "\\textbf{Vp BM}"="BM",
  #         "\\textbf{Vp GB}"="GB",
  #         "\\textbf{Vp TGB}"="TGB",
  #         "\\textbf{Vp Précomptables}"="Précomptables")














# ---------- Valeur potentielle Régé
# PrixRege_DF <- melt(PrixRege,
#                     id=c("Identifiant","Région","Essence","Facilité")) %>%
#   rename(Cout=value) %>%
#   mutate(variable=paste0(variable,"Ha"))
#
# Rege_Assuree <- filter(Reges,
#                        NumForet==Choix &
#                          Essence==Essences_Rege[1] &
#                          Rejet==0) %>% # !is.element(Rejet,c("X","x"))
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   mutate(Surf=Class1+Class2+Class3) %>%
#   group_by(NumForet,NumPlac,SsPlac,Annee,Essence,Rejet) %>%
#   summarise(Surf=sum(Surf),
#             Surf=ifelse(Surf >= 5,1,0)) %>%
#   group_by(NumForet,Annee,Essence,Rejet) %>%
#   summarise(Valide=sum(Surf)/NbreSsPlac) %>%
#   ungroup() %>%
#   select(NumForet,Annee,Essence,Valide) %>%
#   mutate(Valide=ifelse(Valide > 0.2,
#                        0.2,Valide))
#
#
#
#
# df_Rege <- filter(gfForetRege_Essence,
#              NumForet==Choix &
#                Essence==Essences_Rege[1]) %>%  # sélectionne que l'essence majoritaire
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   select(NumForet,Annee,Essence,
#          Classe1Ha,Classe2Ha,Classe3Ha) %>%
#   mutate(Classe1Ha=Classe1Ha*1, # On pondère les différentes classes par les différents facteurs (macros)
#          Classe2Ha=Classe2Ha*2,
#          Classe3Ha=Classe3Ha*5) %>%
#   melt(id=c("NumForet","Annee","Essence")) %>%
#   mutate(variable=as.character(variable)) %>%
#   left_join(ClePrixRege,
#             by=c("NumForet"="NumForet",
#                  "Essence"="EssenceRege")) %>%
#   mutate(Essence_Defaut=Essence,
#          Essence_Defaut=ifelse(is.na(RegionRege),
#                         NA,Essence_Defaut),
#          Essence_Defaut=as.character(Essence_Defaut),
#
#          FaciliteRege=tolower(FaciliteRege)) %>%
#   left_join(PrixRege_DF,
#             c("RegionRege"="Région",
#               "Essence_Defaut"="Essence",
#               "FaciliteRege"="Facilité",
#               "variable"="variable")) %>%
#   select(NumForet,Annee,Essence,variable,value,Cout) %>%
#   group_by(NumForet,Annee) %>%
#   mutate(Total_ClasseHa=sum(value,na.rm=T)) %>%
#   ungroup() %>%
#   mutate(value=value*Cout) %>%
#   group_by(NumForet,Annee,Total_ClasseHa) %>%
#   summarise(Total_ClasseHaCout=sum(value,na.rm=T)) %>%
#   ungroup() %>%
#   left_join(Rege_Assuree) %>%
#   mutate(Valeur_Pot=ifelse(Total_ClasseHa > 0 &
#                              Valide > 0,
#                            round(Total_ClasseHaCout/Total_ClasseHa*Valide,0),
#                            0),
#          Cat="Semis") %>%
#   select(Cat,Annee,Valeur_Pot)
#
# # ----- ----- ----- #
# # Sauvegarde total 4
# df_Rege_TOT <- select(df_Rege,
#                   Cat,Annee,Valeur_Pot) %>%
#   rename(Valeur=Valeur_Pot)
# # ----- ----- ----- #
#
# if (dim(df_Rege_TOT)[1] > 0) {
#   df_Rege <- dcast(df_Rege,
#                    Cat ~ Annee,
#                    value.var="Valeur_Pot")
# }


########################## TOTAUX ##########################

# Sauvegarde total 1 :Vp
df_TOT1_VpHa <- filter(gfForetDen_,
              NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Cat="Précomptables") %>%
  select(Cat,Annee,VpHa) %>%
  rename(Valeur=VpHa)


df_TOT_VpHa <- rbind(df_TOT1_VpHa,df_TOT3) %>% #,df_Rege_TOT
  group_by(Annee) %>%
  summarise(Valeur=round(sum(Valeur,na.rm=T),0)) %>%
  ungroup()


VpHa_VAR <- (df_TOT_VpHa$Valeur[which(df_TOT_VpHa$Annee==Annee_Fin)]-
               df_TOT_VpHa$Valeur[which(df_TOT_VpHa$Annee==Annee_Debut)])/
  df_TOT_VpHa$Valeur[which(df_TOT_VpHa$Annee==Annee_Debut)]*100
VpHa_VAR <- round(VpHa_VAR,0)
if (VpHa_VAR > 0) {
  VpHa_VAR <- paste0("+",VpHa_VAR)
} else {
  VpHa_VAR <- paste0("-",VpHa_VAR)
}

df_TOT_VpHa <- mutate(df_TOT_VpHa,
                      Valeur=paste0("\\textbf{\\textcolor{white}{",
                                    Valeur,
                                    "}}"),
                      Cat="\\rowcolor{DimGray} \\textbf{\\textcolor{white}{Total}}") %>%
  dcast(Cat ~ Annee,
        value.var="Valeur")

# ------------------- Tableau df_SAV2 ------------------- #
# if (dim(df_Rege_TOT)[1] > 0) {
#   df_SAV2 <- rbind(df2,df1,
#                    df_SsEtage_VpHa,
#                    df_Rege,
#                    df_TOT_VpHa) %>%
#     rename_("Population"="Cat")
# } else {
  df_SAV2 <- rbind(df2,df1,
                   df_SsEtage_VpHa,
                   df_TOT_VpHa) %>%
    rename_("Population"="Cat")
# }

names(df_SAV2)[2:dim(df_SAV2)[2]] <- paste0("Vp ",names(df_SAV2)[2:dim(df_SAV2)[2]])
names(df_SAV2) <- paste0("\\textbf{",names(df_SAV2),"}")




# %%%%%%%%%% Impression tableau
cat("\\begin{table}[ht]
    \\centering")
print(xtable(df_SAV1,
             # digits=rep(0,dim(t1)[2]+1),
             digits=rep(0,dim(df_SAV1)[2]+1),
             align=c("M{0cm}","|M{2cm}|",
                     rep("M{1.5cm}|",dim(df_SAV1)[2]-2),"M{2.1cm}|"),
             caption = NULL,
             label   = NULL),
      caption.placement = "bottom",
      hline.after=-1:dim(df_SAV1)[1],
      floating=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
cat("
    \\vspace{0.25cm}
    ")
print(xtable(df_SAV2,
             # digits=rep(0,dim(t1)[2]+1),
             digits=rep(0,dim(df_SAV2)[2]+1),
             align=c("M{0cm}","|M{2cm}|",
                     rep("M{1.5cm}|",dim(df_SAV2)[2]-2),"M{2.1cm}|"),
             caption = NULL,
             label   = NULL),
      caption.placement = "bottom",
      hline.after=-1:dim(df_SAV2)[1],
      floating=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
cat("\\caption{Evolution de la valeur de consommation et de la valeur potentielle du matériel sur pied}
\\label{Tab_GestionPasseeEco_Prec}
    \\end{table}")



# Paramétrage largeur chunk suivant :
if (DernierCycle == 2) {
  width_PARAM <- 5.75
}
if (DernierCycle > 2) {
  width_PARAM <- 7
}
@
\FloatBarrier
La variation de la valeur de consommation est de \Sexpr{VcHa_VAR} \% sur la période \Sexpr{Periode}. Celle de la valeur potentielle est de \Sexpr{VpHa_VAR} \%.\\

<<Hist_GestionPasseeEco, echo=F, warning=F, size='footnotesize', fig.pos="H", fig.height=4, fig.width=width_PARAM, fig.cap="Suivi de la répartition de la surface terrière entre les différents qualités au cours du temps",eval=Eval_Evol,include=Eval_Evol>>=
# ---------- Valeurs de consommation et potentielle : Perches et Taillis
df_Perches <- filter(gfForetPer_) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Gha) %>%
  mutate(Vha=Gha*10,
         VcHa=round(Vha*3/2*6,0),
         VpHa=round(VcHa*1.3)) %>%  # 3/2 -> passage de m3 en stère; 6 -> prix du stère %>%
  mutate(Cat="Perches") %>%
  select(Cat,Annee,VcHa,VpHa)

df_Taillis <- filter(gfForetTaillis_) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Gha) %>%
  mutate(Vha=Gha*10,
         VcHa=round(Vha*3/2*6,0),
         VpHa=round(VcHa*1.3)) %>%
  mutate(Cat="Taillis") %>%
  select(Cat,Annee,VcHa,VpHa)

df_SsEtage <- rbind(df_Perches,df_Taillis) %>%
  mutate(Cat=factor(Cat,levels=c("Taillis","Perches")))

# ----- ----- ----- #
# Sauvegarde total 2
df_SsEtage_VcHa <- select(df_SsEtage,
                  Cat,Annee,VcHa) %>%
  distinct() %>%
  rename(Valeur=VcHa)
# Sauvegarde total 3
df_SsEtage_VpHa <- select(df_SsEtage,
                  Cat,Annee,VpHa) %>%
  distinct() %>%
  rename(Valeur=VpHa)



# ---------- Valeur potentielle : Régé
# PrixRege_DF <- melt(PrixRege,
#                     id=c("Identifiant","Région","Essence","Facilité")) %>%
#   rename(Cout=value) %>%
#   mutate(variable=paste0(variable,"Ha"))
#
# Rege_Assuree <- filter(Reges,
#                        NumForet==Choix &
#                          Essence==Essences_Rege[1] &
#                          Rejet==0) %>% # !is.element(Rejet,c("X","x"))
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   mutate(Surf=Class1+Class2+Class3) %>%
#   group_by(NumForet,NumPlac,SsPlac,Annee,Essence,Rejet) %>%
#   summarise(Surf=sum(Surf),
#             Surf=ifelse(Surf >= 5,1,0)) %>%
#   group_by(NumForet,Annee,Essence,Rejet) %>%
#   summarise(Valide=sum(Surf)/NbreSsPlac) %>%
#   ungroup() %>%
#   select(NumForet,Annee,Essence,Valide) %>%
#   mutate(Valide=ifelse(Valide > 0.2,
#                        0.2,Valide))
#
#
#
#
# df_Rege <- filter(gfForetRege_Essence,
#              NumForet==Choix &
#                Essence==Essences_Rege[1]) %>%  # sélectionne que l'essence majoritaire
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   select(NumForet,Annee,Essence,
#          Classe1Ha,Classe2Ha,Classe3Ha) %>%
#   mutate(Classe1Ha=Classe1Ha*1, # On pondère les différentes classes par les différents facteurs (macros)
#          Classe2Ha=Classe2Ha*2,
#          Classe3Ha=Classe3Ha*5) %>%
#   melt(id=c("NumForet","Annee","Essence")) %>%
#   mutate(variable=as.character(variable)) %>%
#   left_join(ClePrixRege,
#             by=c("NumForet"="NumForet",
#                  "Essence"="EssenceRege")) %>%
#   left_join(PrixRege_DF,
#             c("RegionRege"="Région",
#               "Essence"="Essence",
#               "FaciliteRege"="Facilité",
#               "variable"="variable")) %>%
#   select(NumForet,Annee,Essence,variable,value,Cout) %>%
#   group_by(NumForet,Annee) %>%
#   mutate(Total_ClasseHa=sum(value,na.rm=T)) %>%
#   ungroup() %>%
#   mutate(value=value*Cout) %>%
#   group_by(NumForet,Annee,Total_ClasseHa) %>%
#   summarise(Total_ClasseHaCout=sum(value,na.rm=T)) %>%
#   ungroup() %>%
#   left_join(Rege_Assuree) %>%
#   mutate(Valeur_Pot=ifelse(Total_ClasseHa > 0 &
#                              Valide > 0,
#                            round(Total_ClasseHaCout/Total_ClasseHa*Valide,0),
#                            0),
#          Cat="Semis") %>%
#   select(Cat,Annee,Valeur_Pot)
#
# # ----- ----- ----- #
# # Sauvegarde total 4
# df_Rege_VpHa <- select(df_Rege,
#                        Cat,Annee,Valeur_Pot) %>%
#   rename(Valeur=Valeur_Pot)



# %%%%%%%%%% Précomptables :
# df1 <- filter(gfForetDen_Cat,
#               NumForet==Choix) %>%
#   mutate(Population=Cat) %>%
#   select(Cycle,Population,Gha)
#
# df2 <- filter(gfForetPer_Reg2,
#               NumForet==Choix) %>%
#   mutate(Population=paste0("Perches ",Reg2)) %>%
#   select(Cycle,Population,Gha)
#
# df3 <- filter(gfForetTaillis_,
#               NumForet==Choix) %>%
#   mutate(Population="Taillis") %>%
#   select(Cycle,Population,Gha)
#
# df <- rbind(df1,df2,df3) %>%
#   mutate(Population=factor(Population,
#                            levels=c("Taillis",
#                                     "Perches C+D","C+D",
#                                     "Perches A+B","A+B")))
# ---------- Valeurs de consommation et potentielle : Précomptables (par Cat de Diam)
df_Prec_VcHa <- filter(gfForetDen_Cat,
                       NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Cat,Annee,VcHa) %>%
  mutate(Annee=factor(Annee)) %>%
  rename(Valeur=VcHa)
df_Prec_VpHa <- filter(gfForetDen_Cat,
                       NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Cat,Annee,VpHa) %>%
  mutate(Annee=factor(Annee)) %>%
  rename(Valeur=VpHa)



  # ---------- Totaux
  df_TOT_VcHa <- rbind(df_Prec_VcHa,
                       df_SsEtage_VcHa) %>%
    mutate(Cat=factor(Cat,levels=c("TGB","GB","BM","PB","PER",
                                   "Perches","Taillis","Semis")))
  Y_VcHa <- group_by(df_TOT_VcHa,
              Annee) %>%
  summarise(Valeur=sum(Valeur)) %>%
  ungroup() %>%
  select(Valeur) %>%
  filter(Valeur==max(Valeur)) %>%
  unlist()

df_TOT_VpHa <- rbind(df_Prec_VpHa, #,df_Rege_VpHa
                     df_SsEtage_VpHa) %>%
    mutate(Cat=factor(Cat,levels=c("TGB","GB","BM","PB","PER",
                                   "Perches","Taillis","Semis")))

Y_VpHa <- group_by(df_TOT_VpHa,
              Annee) %>%
  summarise(Valeur=sum(Valeur)) %>%
  ungroup() %>%
  select(Valeur) %>%
  filter(Valeur==max(Valeur)) %>%
  unlist()

Y=max(Y_VcHa,Y_VpHa)
# by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100

Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}


  # ---------- Figures
Palette_Pop <- c("chartreuse3","navajowhite4","dodgerblue1", # "darkseagreen2","darkorange1",
                 "Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Pop) <- c("Semis","Taillis","Perches",
                        "TGB","GB","BM","PB","PER")




p1 <- ggplot() +
  geom_bar(df_TOT_VcHa,
           mapping=aes(Annee,Valeur,fill=Cat),
           position="stack",stat="identity") + #,width=0.7
  scale_y_continuous(name="Vc (euros/ha)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  scale_fill_manual(name="Population",
                    values=Palette_Pop) +
  # coord_flip() +
  guides(fill=guide_legend(reverse=F,
                           nrow=1)) +
  labs(x="Années d'inventaire") +
  theme_bw() + MyTheme +
  theme(legend.position="bottom",
        legend.direction="horizontal")



p2 <- ggplot() +
  geom_bar(df_TOT_VpHa,
           mapping=aes(Annee,Valeur,fill=Cat),
           position="stack",stat="identity") + #,width=0.7
  scale_y_continuous(name="Vp (euros/ha)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  scale_fill_manual(name="Population",
                    values=Palette_Pop) +
  # coord_flip() +
  guides(fill=guide_legend(reverse=T,
                           nrow=1)) +
  labs(x="Années d'inventaire") +
  theme_bw() + MyTheme +
  theme(legend.position="bottom",
        legend.direction="horizontal")


myLegend2 <- g_legend(p2)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                          p2 + theme(legend.position="none"),
                          nrow=1,widths=c(1,1)),
             myLegend2,
             nrow=2,heights=c(8,1))
@

La figure \ref{fig:Courbe_GestionPasseeEco} présente l'évolution des valeurs de consommation et potentielle au cours du temps.

<<Courbe_GestionPasseeEco, echo=F, warning=F, size='footnotesize', fig.pos="H", fig.height=3, fig.cap="Evolution des valeurs de consommation et potentielle au cours du temps",eval=Eval_Evol,include=Eval_Evol>>=
# df <- filter(gfForetDen_,
#               NumForet==Choix) %>%
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   select(Annee,VcHa,VpHa) %>%
#   melt(id="Annee")

df1 <- mutate(df_TOT_VcHa,
              Cat="Vc")
df2 <- mutate(df_TOT_VpHa,
              Cat="Vp")
df <- rbind(df1,
            df2) %>%
  group_by(Cat,Annee) %>%
  summarise(Valeur=sum(Valeur,na.rm=T)) %>%
  ungroup() %>%
  rename(variable=Cat,
         value=Valeur)


Palette_Courbe_GestionPasseeEco <- c("mediumseagreen","red3")
names(Palette_Courbe_GestionPasseeEco) <- c("Vc","Vp")

Y=max(df$value)
# by_VALUE <- floor(((Y/8+Y/12)/2)/100+0.5)*100
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

ggplot() +
  geom_line(df,
           mapping=aes(Annee,value,colour=variable,group=variable)) + #,width=0.7
  geom_point(df,
           mapping=aes(Annee,value,colour=variable,shape=variable),
           size=2,fill="yellow") +
  scale_y_continuous(name="Valeur (euros/ha)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  scale_colour_manual(name="",
                      values=Palette_Courbe_GestionPasseeEco) +
  scale_shape_manual(name="",
                      values=c(15,21)) +
  # coord_flip() +
  guides(fill=guide_legend(label=c("Valeur de consommation",
                                   "Valeur potentielle"))) +
  labs(x="Années d'inventaire") +
  theme_bw() + MyTheme +
  theme(legend.position="bottom",
        legend.direction="horizontal")
@
\FloatBarrier
% \textcolor{red}{Figure ci-dessus : Régé fait passer Vp au-dessus de Vc en 2003... On interprète que taux d'accroissement en valeur en 2003 est supérieur aux 4\% de référence !}


<<Comment_2.7.1.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.1.1")
cat(Comment$Texte)
@

% La partie gauche de la figure \ref{fig:Evol_I} illustre l'évolution de la surface terrière moyenne relevée sur le dispositif au cours des différents inventaires. ON y a distingué 2 groupes de qualités (A+B et C+D).\\
% La partie droite de la figure illustre l'évolution des valeurs potentielle et de consommation moyennes relevées sur le dispositif au cours des différents inventaires.

% \textcolor{ForestGreen}{N.B perso : Faire apparaître le Gha et Vc prélevés ? Que si au moins 3 passages en inventaire.\\
% Attention ici que les précomptables contrairement au paragraphe précédent (en théorie)}
<<Evol_I, echo=F, fig.pos='H', size='footnotesize', include=F, eval=F, fig.height=4, fig.cap="Evolution des principales variables au cours des inventaires", error=F, comment=F, warning=F, message=F>>=

t <- filter(gfForetDen_Reg2,
            NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(Reg2=factor(Reg2,levels=c("C+D","A+B"))) %>%
  arrange(Reg2)

# Ymax=max(t$Gha)*1.1
Ymax=group_by(t,
              Annee) %>%
  summarise(Gha=sum(Gha,na.rm=T)) %>%
  ungroup() %>%
  filter(Gha==max(Gha)) %>%
  select(Gha) %>%
  unlist()
Ymax=Ymax*1.1

p1 <- ggplot() +
  geom_bar(t,
           mapping=aes(factor(Annee),Gha,fill=Reg2),
           stat="identity",position="stack") +
  scale_y_continuous(limits=c(0,Ymax),
                     # breaks=seq(0,
                     #            floor(Ymax*1.1/2.5+0.5)*2.5,
                     #            by=floor(Ymax*1.1/6/2.5+0.5)*2.5),
                     breaks=seq(0,Ymax,2),
                     # breaks=floor(seq(0,max(tVc$value,na.rm=T)*1.1,max(tVc$value,na.rm=T)*1.1/4)/125+0.5)*125,
                     expand=c(0,0),
                     name="G (m2/ha)") +
  scale_fill_manual(name="Qualités",
                    values=c("red2","darkgreen")) +
  guides(fill=guide_legend(reverse=T)) +
  labs(x="Années d'inventaire",
       title="Evolution de la surface terrière (selon les qualités)") +
  # ggtitle("Evolution de la surface terrière (selon les qualités)") +
  theme_bw() +
  theme(title=element_text(size=9),
        plot.title = element_text(hjust = 0.5),
        axis.title.x=element_text(size=9),
        axis.title.y=element_text(size=9),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=7),
        axis.text.y=element_text(size=7),
        legend.position="bottom",
        legend.direction="horizontal") #blue



t2 <- filter(gfForetDen_,
            NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,VcHa,VpHa) %>%
  melt(id="Annee") %>%
  mutate(variable=factor(variable,levels=c("VcHa","VpHa")))

Ymax=max(t2$value)*1.1

p2 <- ggplot() +
  geom_line(t2,
            mapping=aes(factor(Annee),value,colour=variable,group=variable)) +
    scale_y_continuous(expand=c(0,0),
                       limits=c(0,Ymax),
                       # breaks=seq(0,
                       #            floor(Ymax*1.1/100+0.5)*100,
                       #            by=floor(Ymax*1.1/6/100+0.5)*100),
                       breaks=seq(0,Ymax,500),
                       name="Valeur (euros/ha)") +
  scale_colour_manual(name="",
                      values=c("forestgreen","firebrick"),
                    labels=c("Valeur de\nconsommation","Valeur potentielle")) +
  labs(x="Années d'inventaire",
       title="Evolution des variables économiques") +
  # ggtitle("Evolution des variables économiques") +
  theme_bw() +
  theme(title=element_text(size=9),
        plot.title = element_text(hjust = 0.5),
        axis.title.x=element_text(size=9),
        axis.title.y=element_text(size=9),
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=7),
        axis.text.y=element_text(size=7),
        legend.position="bottom",
        legend.direction="horizontal") #royalblue4


# grid.arrange(p1,p2,widths=c(1,1))
# mylegend <- g_legend(p2)
#
# grid.arrange(arrangeGrob(p1,
#                          p2 + theme(legend.position="none"),
#                          ggplot() + theme_void(),
#                          mylegend,
#                          ncol=2, widths=rep(1,2), heights=c(8,1)))
grid.arrange(p1,p2,nrow=1)
@
\FloatBarrier

\subsubsection{Variabilité spatiale}
Le tableau \ref{Tab_VarSpat} présente succinctement la variabilité des résultats sur la surface terrière des placettes d'inventaire.

<<Comment_2.7.1.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.1.1")
cat(Comment$Texte)
@

<<Tab_VarSpat, echo=F, include=TRUE, error=F, comment=F, warning=F, message=F, results='asis', fig.height=2>>=
df_Pla <-
  gfPlaDen_ %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  select(Annee, NumPlac, Gha) %>%
  mutate(
    Gha = round(Gha, 1),
    NumPlac = as.numeric(NumPlac)
  ) %>%
  arrange(NumPlac) %>%
  dcast(NumPlac ~ Annee, value.var = "Gha") %>%
  rename(Placettes = NumPlac)
pos <- dim(df_Pla)[1]

df_Disp <-
  gfForetDen_ %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  select(Annee, Gha, CV_Gha, Er_Gha) %>%
  mutate(Sd = Gha * CV_Gha / 100) %>%
  melt(id = c("Annee")) %>%
  mutate(
    value =
      ifelse(
        is.element(variable, c("CV_Gha")),
        formatC(value, format = "f", digits = 0),
        formatC(value, format = "f", digits = 1)
      ),
    # value=round(value,1),
    # value=ifelse(is.element(variable,c("Er_Gha","CV_Gha")),
    #              round(value),value),
    value =
      ifelse(
        is.element(variable, c("Er_Gha", "CV_Gha")),
        paste0(value," \\%"), value
      ),
    # value=ifelse(is.element(variable,c("CV_Gha")),
    #              paste0(round(value,0)," \\%"),value),
    # value=ifelse(is.element(variable,c("Er_Gha","CV_Gha")),
    #              paste0(round(value)," \\%"),value),
    value =
      ifelse(variable == "Gha", paste0("\\textbf{", value, "}"), value)
  ) %>%
  dcast(variable ~ Annee, value.var = "value") %>%
  mutate(
    variable = as.character(variable),
    variable =
      ifelse(variable == "Gha", "\\rowcolor{LightGray} \\textbf{Moy}", variable),
    variable = ifelse(variable == "Sd", "E.-type", variable),
    variable = ifelse(variable == "CV_Gha", "CV", variable),
    variable = ifelse(variable == "Er_Gha", "Er", variable),

    variable =
      factor(
        variable,
        levels = c("\\rowcolor{LightGray} \\textbf{Moy}", "E.-type", "CV", "Er")
      )
  ) %>%
  rename(Placettes = variable)

df <- rbind(df_Pla, df_Disp)
# names(df) <- paste0("\\textbf{",names(df),"}")
Years <- as.numeric(names(df)[2:dim(df)[2]])
if (dim(df)[2] > 2) {
names(df)[2:3] <- c("Ante","Actual")
}

print(
  xtable(
    df_Disp,
    caption = "Variabilité spatiale (sur la surface terrière)",
    caption.placement = "top",
    digits = rep(0, dim(df_Disp)[2] + 1),
    align = c("M{0cm}", "|M{1.5cm}|", rep("M{1cm}|", dim(df_Disp)[2] - 1)),
    label = "Tab_VarSpat"
  ),
  include.rownames = FALSE,
  sanitize.text.function = function(x) {return(x)},
  hline.after = -1:dim(df_Disp)[1],
  size="\\footnotesize"
)



# # Fonction pour arranger grand table -> transformer sous la forme d'un vecteur :
# Vector2Table_Print <- function(vector, caption, label) {
#   # Calcul du nombre de lignes (distribution des essences dans un tableau à 5 colonnes... A voir)
#   nrows <- ceiling(length(vector)/5)
#   df <- data.frame(vector[1:nrows],
#                    vector[(nrows+1):(nrows*2)],
#                    vector[(nrows*2+1):(nrows*3)],
#                    vector[(nrows*3+1):(nrows*4)],
#                    vector[(nrows*4+1):(nrows*5)])
#   # mise en forme tableau dans un tableau où nrows~2/3ncols
#   nrows <- ceiling(length(vector)/5) # divise par 6 (nombre maximal de colonnes de 2.5cm qui peuvent tenir sur une feuille de 17cm de largeur de texte)
#   if (nrows < 10) {
#     ncols <- length(vector)/nrows
#     while (nrows < 2/3*ncols) {
#       nrows=nrows+1
#       ncols <- length(vector)/nrows
#     }
#   } else {
#     ncols=5
#   }
#
#   df <- data.frame(rep(NA,nrows))
#   count=0
#   for (i in 1:ncols) {
#     df[,i] <- vector[(count+1):(count+nrows)]
#     count=count+nrows
#   }
#
#   # Impresssion
#   print(xtable(df,
#                caption = paste0("\\footnotesize{",caption,"}"),
#                caption.placement = "bottom",
#                digits=rep(0,dim(df)[2]+1),
#                align=c("l","|M{1.5cm}|",rep("M{1.5cm}|",dim(df)[2]-1)),
#                label = label),
#         include.rownames=FALSE,
#         include.colnames = FALSE,
#         hline.after=c(0:dim(df)[1]),
#         size="\\scriptsize")
# }
#
#
# # Préparation df :
# df1 <- mutate(df,
#               Label=paste0("Placette ",Placettes," - ",
#                        Years[1]," : ",Ante,"m2/ha - ",
#                        Years[2]," : ",Actual," m2/ha -")) %>%
#   select(Label)
#
#
# Vector2Table_Print(df1$Label,"Variabilité spatiale (sur la surface terrière)",
#                    "Tab_VarSpat")

df_Pla <-
  gfPlaDen_ %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  select(Annee, NumPlac, Gha) %>%
  mutate(
    Gha = round(Gha, 1),
    NumPlac = as.numeric(NumPlac),
    Annee = factor(Annee)
  ) %>%
  arrange(NumPlac)

# X_lim <-
#   if(DernierCycle > 2) {c(min(Years) - 1, max(Years) + 1)} else {
#     c(min(Years) - 3, max(Years) + 3)
#   }

ggplot() +
  geom_boxplot(
    df_Pla, mapping = aes(Annee, Gha, group = Annee)
    ) +
  scale_y_continuous(
    limits = c(0, max(df_Pla$Gha, na.rm = T) * 1.1),
    breaks = seq(0, max(df_Pla$Gha, na.rm = T) * 1.3, 5),
    expand = c(0, 0),
    name = "(m2/ha)"
  ) +
  # scale_x_continuous(
  #   limits = X_lim,
  #   breaks = Years,
  #   name = "Année"
  # ) +
  theme_bw() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 9), #element_text(hjust=1,angle=0)
    axis.ticks.x = element_blank(),
    axis.line.x = element_blank(),
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(size = 7)
  ) #blue
@

La figure \ref{fig:CourbeCV_VarSpat} représente l'évolution au cours du temps du coefficient de variation des données de surface terrière.

<<CourbeCV_VarSpat, fig.pos = 'H', include = Eval_Evol, eval = Eval_Evol, fig.height = 2, fig.cap = "Evolution du coefficient de variation">>=

df <-
  gfForetDen_ %>%
  filter(NumForet == Choix) %>%
  left_join(Cycles[, c("NumForet", "Cycle", "Annee")]) %>%
  mutate(
    CV_Gha = CV_Gha / 100,
    Annee = factor(Annee)
  ) %>%
  select(NumForet, Annee, CV_Gha)

Y_lim = 0.5
if (max(df$CV_Gha) > Y_lim) Y_lim = 1

p <-
  ggplot() +
  geom_line(
    df,
    mapping = aes(Annee, CV_Gha, group = NumForet)
  ) +
  scale_y_continuous(
    name = "CV %",
    limits = c(0, Y_lim),
    breaks = seq(0, 1, 0.1),
    labels = percent
  ) +
  labs(x = "Années d'inventaire") +
  theme_bw() + MyTheme

if (dim(df)[1] <= 1) {
  p <- p + geom_point(df, mapping = aes(Annee, CV_Gha, group = NumForet))
}
p
@

% \subsubsection{Variables économiques}

<<Comment_2.7.1.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.1.1")
cat(Comment$Texte)
@
\FloatBarrier

\subsection{Evolution par essences}
% \textcolor{red}{Ici, faire 1 paragraphe pour expliquer les 3 figures plutôt que de répéter à chaque fois ?}
<<Comment_2.7.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.2")
cat(Comment$Texte)
@

Les figures \ref{fig:RadarEssence_Evol_Gha}, \ref{fig:RadarEssence_Evol_VcHa} et \ref{fig:RadarEssence_Evol_VpHa} illustrent respectivement l'évolution de la surface terrière, de la valeur de consommation et de la valeur potentielle au cours du temps, déclinées par essences.\\
% Dans la partie gauche de la figure, on a représenté la répartition relative de la surface terrière sur les différentes essences.\\
% Dans la partie droite de la figure, on présente le détail de l'évolution de la surface terrière des essences principales (représentant au moins 15 \% de la surface terrière).
La partie gauche des figures représente l'importance relative de chaque essence pour les différentes variables. La partie droite des figures présente l'évolution des variables par essence (essences représentant au moins 15 \% de la surface terrière).

<<RadarEssence_Evol, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la part relative des différentes essences entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssReg,
#                     NumForet==Choix &
#                       Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   arrange(Cycle,-Gha)

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence[t_Niveaux$Cycle==DernierCycle])
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <-
  gfForetDen_EssReg %>%
  filter(NumForet == Choix & Gha > 0) %>%
  rename(Essence = EssReg) %>%
  select(Cycle, Essence, Gha, VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G = Gha, Vc = VcHa) %>%
  # group_by(Essence) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence = factor(Essence, levels = Niveaux_EssReg2)) %>%
  arrange(Cycle, Essence)

t_Radar.m <-
  t_Radar %>%
  melt(id = c("Cycle", "Essence")) %>%
  group_by(Cycle, variable) %>%
  mutate(
    Tot = sum(value, na.rm = T),
    Ratio = value / Tot,
    RatioCum = cumsum(value / Tot)
  ) %>%
  ungroup() %>%
  mutate(
    label = NA,
    label = ifelse(variable == "G", paste0(round(value, 1), " m2/ha"), label),
    label = ifelse(variable == "Vc", paste0(round(value, 0), " euros/ha"), label)
  ) %>%
  # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Essence = factor(Essence, levels = Niveaux_EssReg1)) %>%
  arrange(Cycle, variable, Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_EssReg) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <-
  t_Radar.m %>%
  group_by(Cycle, variable) %>%
  summarise(value = mean(value, na.rm = T)) %>%
  ungroup()




# --- Gha
t_Radar.m1 <- t_Radar.m %>% filter(variable == "G")
t_Radar_Text1 <- t_Radar_Text %>% filter(variable == "G")

p1 <-
  ggplot() +
  geom_bar(t_Radar.m1, mapping = aes(x = Cycle, y = value, fill = Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  geom_label_repel(t_Radar.m1,
                     mapping=aes(x=Cycle,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des essences sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences\nregroupées :", values=Palette_Essence) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Essence)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des essences sur la surface terrière\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- VcHa
t_Radar.m2 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text2 <- filter(t_Radar_Text,
                     variable=="Vc")
p2 <- ggplot() +
  geom_bar(t_Radar.m2, mapping=aes(x=Cycle, y=value, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text2, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  geom_label_repel(t_Radar.m2,
                     mapping=aes(x=Cycle,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des essences sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences\nregroupées :", values=Palette_Essence) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m2$Essence)) > 10,
                                         2,1),
                             bycol=TRUE)) +
  ggtitle("Part relative des essences sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- Plot
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(9,1))
@

<<RadarEssence_Evol_Gha, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la surface terrière par essence entre les différents inventaires", fig.pos="H",eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssReg,
#                     NumForet==Choix &
#                       Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   arrange(Annee,-Gha)

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence[t_Niveaux$Cycle==DernierCycle])
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <- filter(gfForetDen_EssReg,
                  NumForet == Choix &
                      Gha > 0) %>%
  rename(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Essence,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Essence) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
  arrange(Annee,Essence)

t_Radar.m <- melt(t_Radar, id=c("Annee","Essence")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
  arrange(Annee,variable,Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Essence) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- Gha (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="G")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="G")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Annee,
  #                                       y=0.5,
  #                                       label=Annee),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Annee,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Annee,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des essences sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Essence)) > 5,
                                         round(length(unique(t_Radar.m1$Essence))/5,0),1),
                             byrow=TRUE,
                             reverse=T)) +
 ggtitle("Part relative des essences sur la surface terrière\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="vertical",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())


if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- Gha (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order)) %>%
  filter(Essence %in% Essences_Seuil)

Y=max(t1$G)
value_by <- ifelse(Y<=10,
                   0.5,round(Y/15))
# t1_Bis <- mutate(t_Radar,
#              Annee=factor(Annee,levels=1:DernierCycle)) %>%
#   filter(Essence %in% Essences_Seuil) # & Annee %in% c(1,DernierCycle)
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Essence,y=G,alpha=Annee,colour=Essence)) +
    geom_point(t1,
             mapping=aes(x=Essence,y=G,alpha=Annee,colour=Essence,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Essence,
                               y=G,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  scale_y_continuous(name="G (m2/ha)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,value_by)) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Essences principales :", values=Palette_Essence) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Essence)) > 5,
                                         round(length(unique(t1$Essence))/5),1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Evolution de la surface terrière (pour les essences principales)\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier

% La figure \ref{fig:RadarEssence_Evol_VcHa} illustre l'évolution de la valeur de consommation au cours du temps, déclinée par essences.\\
% Dans la partie gauche de la figure, on a représenté la répartition relative de la valeur de consommation sur les différentes essences.\\
% Dans la partie droite de la figure, on présente le détail de l'évolution de la valeur de consommation des essences principales (représentant au moins 15 \% de la surface terrière).

<<RadarEssence_Evol_VcHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur de consommation par essence entre les différents inventaires", fig.pos="H",eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssReg,
#                     NumForet==Choix &
#                       Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   arrange(Annee,-Gha)

# ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence[t_Niveaux$Cycle==DernierCycle])
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <- filter(gfForetDen_EssReg,
                  NumForet == Choix &
                      Gha > 0) %>%
  rename(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Essence,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Essence) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
  arrange(Annee,Essence)

t_Radar.m <- melt(t_Radar, id=c("Annee","Essence")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
  arrange(Annee,variable,Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_EssReg) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- VcHa (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="Vc")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Annee,
  #                                       y=0.5,
  #                                       label=Annee),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Annee,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Annee,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des essences sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Essence)) > 5,
                                         round(length(unique(t_Radar.m1$Essence))/5,0),1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des essences sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="vertical",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())


# Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]

# --- VcHa (absolu)
t1 <- mutate(t_Radar,
             # Cycle=factor(Cycle,levels=1:DernierCycle)) %>%
             Annee=factor(Annee,levels=Annees_Order)) %>%
  filter(Essence %in% Essences_Seuil)
Xmax=max(t1$Vc)

Y=max(t1$Vc)
value_by <- ifelse(Y<=10000,
                   500,1000)

p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Essence,y=Vc,alpha=Annee,colour=Essence)) +
  geom_point(t1,
             mapping=aes(x=Essence,y=Vc,alpha=Annee,colour=Essence,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Essence,
                               y=Vc,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  scale_y_continuous(name="Vc (euros/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,value_by)) +
  # scale_y_continuous(breaks=seq(0,floor(Xmax/100+0.5)*100,
  #                               floor(Xmax/10/100+0.5)*100)) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Essences principales :", values=Palette_Essence) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Essence)) > 5,
                                         round(length(unique(t1$Essence))/5),1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Evolution de la valeur de consommation (pour les essences principales)\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier

% La figure \ref{fig:RadarEssence_Evol_VpHa} illustre l'évolution de la valeur potentielle au cours du temps, déclinée par essences.\\
% Dans la partie gauche de la figure, on a représenté la répartition relative de la valeur potentielle sur les différentes essences.\\
% Dans la partie droite de la figure, on présente le détail de l'évolution de la valeur potentielle des essences principales (représentant au moins 15 \% de la surface terrière).

<<RadarEssence_Evol_VpHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur potentielle par essence entre les différents inventaires", fig.pos="H",eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VpHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
# t_Niveaux <- filter(gfForetDen_EssReg,
#                     NumForet==Choix &
#                       Gha > 0) %>%
#   rename(Essence=EssReg) %>%
#   left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
#   arrange(Annee,-Gha)
#
# # ----- Repères pour figures
# Niveaux_Essence1 <- unique(t_Niveaux$Essence[t_Niveaux$Cycle==DernierCycle])
# Niveaux_Essence2 <- Niveaux_Essence1[length(Niveaux_Essence1):1]

t_Radar <- filter(gfForetDen_EssReg,
                  NumForet == Choix &
                      Gha > 0) %>%
  rename(Essence=EssReg) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Essence,
         Gha,VpHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vp=VpHa) %>%
  # group_by(Essence) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg2)) %>%
  arrange(Annee,Essence)

t_Radar.m <- melt(t_Radar, id=c("Annee","Essence")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(EssReg," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Essence=factor(Essence,levels=Niveaux_EssReg1)) %>%
  arrange(Annee,variable,Essence)
# ggplot(tab.m, aes(x=variable, y=value, fill=EssReg)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_EssReg) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- VpHa (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="Vp")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="Vp")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Essence),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Annee,
  #                                       y=0.5,
  #                                       label=Annee),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des essences sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Essences :", values=Palette_Essence) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Essence)) > 5,
                                         round(length(unique(t_Radar.m1$Essence))/5,0),1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des essences sur la valeur potentielle\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="vertical",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



# Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- VpHa (absolu)
t1 <- mutate(t_Radar,
             # Cycle=factor(Cycle,levels=1:DernierCycle)) %>%
             Annee=factor(Annee,levels=Annees_Order)) %>%
  filter(Essence %in% Essences_Seuil)

Xmax=max(t1$Vp)
Y=max(t1$Vp)
value_by <- ifelse(Y<=10000,
                   500,1000)

p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Essence,y=Vp,alpha=Annee,colour=Essence)) +
  geom_point(t1,
             mapping=aes(x=Essence,y=Vp,alpha=Annee,colour=Essence,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Essence,
                               y=Vp,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  scale_y_continuous(name="Vp (euros/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,value_by)) +
  # scale_y_continuous(breaks=seq(0,floor(Xmax/100+0.5)*100,
  #                               floor(Xmax/10/100+0.5)*100)) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Essences principales :", values=Palette_Essence) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Essence)) > 5,
                                         round(length(unique(t1$Essence))/5),1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Evolution de la valeur potentielle (pour les essences principales)\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier


\subsection{Evolution par catégories de diamètre}

<<Comment_2.7.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.7.3")
cat(Comment$Texte)
@

% La figure \ref{fig:RadarCat_Evol_Gha} illustre l'évolution de la surface terrière au cours du temps, déclinée par catégories de diamètre.\\
% Dans la partie gauche de la figure, on a représenté la répartition relative de la surface terrière sur les différentes catégories de diamètre.\\
% Dans la partie droite de la figure, on présente le détail de l'évolution au cours du temps et en valeur absolue, de la surface terrière des différentes catégories de diamètre.
Les figures \ref{fig:RadarCat_Evol_Gha} et \ref{fig:RadarCat_Evol_VcHa} illustrent respectivement l'évolution de la surface terrière et de la valeur de consommation au cours du temps, déclinées par catégories de diamètre\\
La partie gauche des figures représente l'importance relative de chaque catégorie de diamètre pour les différentes variables. La partie droite des figures présente l'évolution des variables par catégories de diamètre.
<<RadarCat_Evol, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la part relative des différentes catégories de diamètre entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Cat,
                    NumForet==Choix) %>%
  arrange(Cycle,-Gha)

# ----- Repères pour figures
Niveaux_Cat1 <- c("PER","PB","BM","GB","TGB")
Niveaux_Cat2 <- Niveaux_Cat1[length(Niveaux_Cat1):1]

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

t_Radar <- filter(gfForetDen_Cat,
                  NumForet == Choix) %>%
  select(Cycle,Cat,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Cat) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat1)) %>%
  arrange(Cycle,Cat)

t_Radar.m <- melt(t_Radar, id=c("Cycle","Cat")) %>%
  group_by(Cycle,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat2)) %>%
  arrange(Cycle,variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Cat) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Cycle,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- Gha
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="G")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="G")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Cycle, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     name="Part relative des catégories de diamètre sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des catégories de diamètre sur la surface terrière\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    legend.direction="vertical",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- VcHa
t_Radar.m2 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text2 <- filter(t_Radar_Text,
                     variable=="Vc")
p2 <- ggplot() +
  geom_bar(t_Radar.m2, mapping=aes(x=Cycle, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text2, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  geom_label_repel(t_Radar.m2,
                     mapping=aes(x=Cycle,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des catégories de diamètre sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories\nde diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(ncol=ifelse(length(unique(t_Radar.m2$Cat)) > 10,
                                         2,1),
                             bycol=TRUE)) +
  ggtitle("Part relative des catégories de diamètre sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.box="vertical",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- Plot
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(9,1))

@

<<RadarCat_Evol_Gha, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la surface terrière des catégories de diamètre entre les différents inventaires", fig.pos="H",eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Cat,
                    NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Repères pour figures
Niveaux_Cat1 <- c("PER","PB","BM","GB","TGB")
Niveaux_Cat2 <- Niveaux_Cat1[length(Niveaux_Cat1):1]

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

t_Radar <- filter(gfForetDen_Cat,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Cat) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat1)) %>%
  arrange(Annee,Cat)

t_Radar.m <- melt(t_Radar, id=c("Annee","Cat")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat2)) %>%
  arrange(Annee,variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Cat) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- Gha (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="G")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="G")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des catégories de diamètre sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories de diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des catégories de diamètre sur la surface terrière\nau cours des différents inventaires") +
theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())




if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- Gha (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))

  Y=max(t1$G)
  value_by <- ifelse(Y<=10,
                     0.5,round(Y/15))

p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Cat,y=G,alpha=Annee,colour=Cat)) +
  geom_point(t1,
             mapping=aes(x=Cat,y=G,alpha=Annee,colour=Cat,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Cat,
                               y=G,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_y_continuous(name="G (m2/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,value_by)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Catégories de diamètre :", values=Palette_Cat) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Evolution de la surface terrière des catégories de diamètre\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier

% La figure \ref{fig:RadarCat_Evol_VcHa} illustre l'évolution de la valeur de consommation au cours du temps, déclinée par catégories de diamètre.\\
% Dans la partie gauche de la figure, on a représenté la répartition relative de la valeur de consommation sur les différentes catégories de diamètre.\\
% Dans la partie droite de la figure, on présente le détail de l'évolution au cours du temps et en valeur absolue, de la valeur de consommation des différentes catégories de diamètre.

<<RadarCat_Evol_VcHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur de consommation des catégories de diamètre entre les différents inventaires", fig.pos="H",eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Cat,
                    NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Repères pour figures
Niveaux_Cat1 <- c("PER","PB","BM","GB","TGB")
Niveaux_Cat2 <- Niveaux_Cat1[length(Niveaux_Cat1):1]

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

t_Radar <- filter(gfForetDen_Cat,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Cat) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat1)) %>%
  arrange(Annee,Cat)

t_Radar.m <- melt(t_Radar, id=c("Annee","Cat")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat2)) %>%
  arrange(Annee,variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Cat) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- VcHa (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="Vc")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des catégories de diamètre sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories de diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des catégories de diamètre sur la valeur de consommation\nau cours des différents inventaires") +
theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- VcHa (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))

Y=max(t1$Vc)
value_by <- ifelse(Y<=10000,
                   500,1000)
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Cat,y=Vc,alpha=Annee,colour=Cat)) +
  geom_point(t1,
             mapping=aes(x=Cat,y=Vc,alpha=Annee,colour=Cat,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Cat,
                               y=Vc,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  scale_y_continuous(name="Vc (euros/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,value_by)) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Catégories de diamètre :", values=Palette_Cat) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Evolution de la valeur de consommation des catégories de diamètre\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))
grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier

<<RadarCat_Evol_VpHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur de consommation des catégories de diamètre entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VpHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Cat,
                    NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Repères pour figures
Niveaux_Cat1 <- c("PER","PB","BM","GB","TGB")
Niveaux_Cat2 <- Niveaux_Cat1[length(Niveaux_Cat1):1]

# ----- Palette
Niveaux_Cat <- c("PER","PB","BM","GB","TGB")
# Palette_Cat <- c("gold","green2","cornflowerblue","orchid2","red")#"green2",
# Palette_Cat <- c("Gray10","Gray30","Gray50","Gray70","Gray90")
# names(Palette_Cat) <- c("PER","PB","BM","GB","TGB")
Palette_Cat <- c("Gray15","Gray40","Gray60","Gray80","Gray100")
names(Palette_Cat) <- c("TGB","GB","BM","PB","PER")

t_Radar <- filter(gfForetDen_Cat,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Cat,
         Gha,VpHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vp=VpHa) %>%
  # group_by(Cat) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat1)) %>%
  arrange(Annee,Cat)

t_Radar.m <- melt(t_Radar, id=c("Annee","Cat")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Cat," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,levels=Niveaux_Cat2)) %>%
  arrange(Annee,variable,Cat)
# ggplot(tab.m, aes(x=variable, y=value, fill=Cat)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Cat) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- VpHa (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="Vp")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="Vp")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Cat),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des catégories de diamètre sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Catégories de diamètre :", values=Palette_Cat) +
    guides(fill=guide_legend(nrow=ifelse(length(unique(t_Radar.m1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des catégories de diamètre sur la valeur potentielle\nau cours des différents inventaires") +
theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- 1
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- VpHa (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))
Y=max(t1$Vp)
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Cat,y=Vp,alpha=Annee,colour=Cat)) +
  geom_point(t1,
             mapping=aes(x=Cat,y=Vp,alpha=Annee,colour=Cat,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Cat,
                               y=Vp,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_y_continuous(name="Vp (euros/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,500)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Catégories de diamètre :", values=Palette_Cat) +
  guides(colour=guide_legend(nrow=ifelse(length(unique(t1$Cat)) > 10,
                                         2,1),
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Répartition des catégories de diamètre sur la valeur potentielle\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))
grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier


\subsection{Evolution par qualités}

<<Comment_2.8, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.8")
cat(Comment$Texte)
@

\FloatBarrier

La figure \ref{fig:RadarQual_Evol_Gha} illustre l'évolution de la surface terrière au cours du temps, déclinée par qualités.\\
La partie gauche de la figure représente l'importance relative de la surface terrière pour les différentes qualités.\\
La partie droite de la figure présente l'évolution de la surface terrière par qualité.

<<RadarQual_Evol, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la part relative des différentes catégories de diamètre entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, EssReg[,c("Essence","EssReg")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ EssReg, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$EssReg <- factor(tab$EssReg, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Reg1,
                    NumForet==Choix) %>%
  arrange(Cycle,-Gha)

# ----- Palette
Niveaux_Reg1 <- c("A","B","C","D")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")
QualPalette2 <- c("#238B45","#74C476","#BAE4B3","#EDF8E9")
names(QualPalette2) <- c("A","B","C","D")

# ----- Repères pour figures
Niveaux_Reg1 <- c("A","B","C","D")
Niveaux_Reg2 <- Niveaux_Reg1[length(Niveaux_Reg1):1]

t_Radar <- filter(gfForetDen_Reg1,
                  NumForet == Choix) %>%
  select(Cycle,Reg1,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg1)) %>%
  arrange(Cycle,Reg1)

t_Radar.m <- melt(t_Radar, id=c("Cycle","Reg1")) %>%
  group_by(Cycle,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Reg1," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Cycle,variable,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=Reg1)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Reg1) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Cycle,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- Gha
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="G")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="G")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Cycle, y=value, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  geom_label_repel(t_Radar.m1,
                     mapping=aes(x=Cycle,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des qualités de grume sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Qualités\nde grume :",
                    values=QualPalette2) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des qualités de grume sur la surface terrière\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- VcHa
t_Radar.m2 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text2 <- filter(t_Radar_Text,
                     variable=="Vc")
p2 <- ggplot() +
  geom_bar(t_Radar.m2, mapping=aes(x=Cycle, y=value, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text2, mapping=aes(x=Cycle,
                                       y=0.5,
                                       label=Cycle),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.5,
             fontface="bold") +
  # ggplot2::geom_text(t_Radar.m,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               "")),
  #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  geom_label_repel(t_Radar.m2,
                     mapping=aes(x=Cycle,
                                 y=round(RatioCum-Ratio/2,3),
                                 label = ifelse(Ratio > 0.05,
                                                label,
                                                NA)),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des qualités de grume sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Qualités\nde grume :",
                    values=QualPalette2) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des qualités de grume sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# --- Plot
mylegend <- g_legend(p1)
grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=1, widths=rep(1,2)),
             mylegend,nrow=2,heights=c(9,1))
@

<<RadarQual_Evol_Gha, echo=F, warning=F, fig.height=4, fig.cap="Evolution des qualités entre les différents inventaires", fig.pos="H", eval=Eval_Evol, include=Eval_Evol>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <-
  gfForetDen_Reg1 %>%
  filter(NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Palette
Niveaux_Reg1 <- c("A","B","C","D")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

# ----- Repères pour figures
Niveaux_Reg1 <- c("A","B","C","D")
Niveaux_Reg2 <- Niveaux_Reg1[length(Niveaux_Reg1):1]

t_Radar <- filter(gfForetDen_Reg1,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Reg1,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg1)) %>%
  arrange(Annee,Reg1)

t_Radar.m <- melt(t_Radar, id=c("Annee","Reg1")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Reg1," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Annee,variable,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=Reg1)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Reg1) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()




# --- Gha (relatif)
t_Radar.m1 <- filter(t_Radar.m,
                     variable=="G")
t_Radar_Text1 <- filter(t_Radar_Text,
                     variable=="G")
p1 <- ggplot() +
  geom_bar(t_Radar.m1, mapping=aes(x=Annee, y=value, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text1, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m1,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des qualités de grume sur la surface terrière\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Qualités de grume :", values=QualPalette) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des qualités de grume sur la surface terrière\nau cours des différents inventaires") +
theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-2),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- Gha (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))

Y=max(t1$G)
value_by <- ifelse(Y<=10,
                   0.5,round(Y/15))
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Reg1,y=G,alpha=Annee,colour=Reg1)) +
  geom_point(t1,
             mapping=aes(x=Reg1,y=G,alpha=Annee,colour=Reg1,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Reg1,
                               y=G,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_y_continuous(name="G (m2/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,value_by)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Qualités de grume :", values=QualPalette) +
  guides(colour=guide_legend(nrow=1,
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Répartition des qualités de grume sur la surface terrière\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())


# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@

<<RadarQual_Evol_VcHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur de consommation des qualités de grume entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Reg1,
                    NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Palette
Niveaux_Reg1 <- c("A","B","C","D")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

# ----- Repères pour figures
Niveaux_Reg1 <- c("A","B","C","D")
Niveaux_Reg2 <- Niveaux_Reg1[length(Niveaux_Reg1):1]

t_Radar <- filter(gfForetDen_Reg1,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Reg1,
         Gha,VcHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vc=VcHa) %>%
  # group_by(Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg1)) %>%
  arrange(Annee,Reg1)

t_Radar.m <- melt(t_Radar, id=c("Annee","Reg1")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vc",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Reg1," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Annee,variable,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=Reg1)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Reg1) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()



# --- VcHa (relatif)
t_Radar.m2 <- filter(t_Radar.m,
                     variable=="Vc")
t_Radar_Text2 <- filter(t_Radar_Text,
                     variable=="Vc")
p1 <- ggplot() +
  geom_bar(t_Radar.m2, mapping=aes(x=Annee, y=value, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text2, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m2,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des qualités de grume sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Qualités de grume :", values=QualPalette) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des qualités de grume sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- 1
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- VcHa (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))
Y=max(t1$Vc)
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Reg1,y=Vc,alpha=Annee,colour=Reg1)) +
  geom_point(t1,
             mapping=aes(x=Reg1,y=Vc,alpha=Annee,colour=Reg1,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Reg1,
                               y=Vc,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  scale_y_continuous(name="Vc (euros/ha)",
                     limits=c(0,Y*1.1),
                     expand=c(0,0),
                     breaks=seq(0,Y*1.3,500)) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Qualités de grume :", values=QualPalette) +
  guides(colour=guide_legend(nrow=1,
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Répartition des qualités de grume sur la valeur de consommation\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@

<<RadarQual_Evol_VpHa, echo=F, warning=F, fig.height=4, fig.cap="Evolution de la valeur de consommation des qualités de grume entre les différents inventaires", fig.pos="H", eval=F, include=F>>=
# tab <- merge(TabCompo, Cat[,c("Essence","Cat")], by="Essence")
# tab <- summaryBy(Nha + Gha + Vha + VcHa + VpHa ~ Cat, data=tab, FUN= sum, na.rm=T, keep.names=T)
# tab$Cat <- factor(tab$Cat, levels=Niveaux)
t_Niveaux <- filter(gfForetDen_Reg1,
                    NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  arrange(Annee,-Gha)

# ----- Palette
Niveaux_Reg1 <- c("A","B","C","D")
QualPalette <- c("#EDF8E9","#BAE4B3","#74C476","#238B45")
names(QualPalette) <- c("D","C","B","A")

# ----- Repères pour figures
Niveaux_Reg1 <- c("A","B","C","D")
Niveaux_Reg2 <- Niveaux_Reg1[length(Niveaux_Reg1):1]

t_Radar <- filter(gfForetDen_Reg1,
                  NumForet == Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Annee,Reg1,
         Gha,VpHa) %>% #,VhaIFN
  # full_join(t) %>%
  arrange(-Gha) %>%
  rename(G=Gha,
         Vp=VpHa) %>%
  # group_by(Reg1) %>%
  # summarise(N=sum(N,na.rm=T),
  #           G=sum(G,na.rm=T),
  #           V=sum(V,na.rm=T),
  #           Vc=sum(Vc,na.rm=T),
  #           Vp=sum(Vp,na.rm=T)) %>%
  # ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg1)) %>%
  arrange(Annee,Reg1)

t_Radar.m <- melt(t_Radar, id=c("Annee","Reg1")) %>%
  group_by(Annee,variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  mutate(label=NA,
         label=ifelse(variable=="G",
                      paste0(round(value,1)," m2/ha"),
                      label),
         label=ifelse(variable=="Vp",
                      paste0(round(value,0)," euros/ha"), #\U020AC
                      label)) %>%
         # if(variable=="Vha") {paste0(Reg1," : ",round(value,0)," m3/ha")}) %>%
  ungroup() %>%
  mutate(Reg1=factor(Reg1,levels=Niveaux_Reg2)) %>%
  arrange(Annee,variable,Reg1)
# ggplot(tab.m, aes(x=variable, y=value, fill=Reg1)) +
#       geom_bar(stat='identity', position='fill') +  coord_polar(theta = "y") +
#   		scale_x_discrete("") + theme(legend.position="bottom") + MyTheme1 +
#       scale_fill_manual(values=ColPalette_Reg1) + labs(y="", fill = "") +
#       theme(axis.title.y=element_blank())
t_Radar_Text <- group_by(t_Radar.m,
                    Annee,variable) %>%
  summarise(value=mean(value,na.rm=T)) %>%
  ungroup()



# --- VpHa (relatif)
t_Radar.m2 <- filter(t_Radar.m,
                     variable=="Vp")
t_Radar_Text2 <- filter(t_Radar_Text,
                     variable=="Vp")
p1 <- ggplot() +
  geom_bar(t_Radar.m2, mapping=aes(x=Annee, y=value, fill=Reg1),
           stat='identity', position='fill') +
  # ggplot2::geom_text(t_Radar_Text, mapping=aes(x=Cycle,
  #                                       y=0.5,
  #                                       label=Cycle),
  #                    size=3, colour="black", alpha=1, vjust=1,
  #                                fontface="bold") +
  geom_label(t_Radar_Text2, mapping=aes(x=Annee,
                                       y=0.5,
                                       label=Annee),
             label.padding = unit(0.15, "lines"),
             label.r=unit(0, "lines"),
             size=2.5, fill="gray70", alpha=0.8,
             fontface="bold") +
  # # ggplot2::geom_text(t_Radar.m,
  # #                    mapping=aes(x=Cycle,
  # #                                y=round(RatioCum-Ratio/2,3),
  # #                                label = ifelse(Ratio > 0.05,
  # #                                               label,
  # #                                               "")),
  # #                    size=2.5, alpha=1, colour="black") + # , check_overlap = TRUE
  # geom_label_repel(t_Radar.m2,
  #                    mapping=aes(x=Cycle,
  #                                y=round(RatioCum-Ratio/2,3),
  #                                label = ifelse(Ratio > 0.05,
  #                                               label,
  #                                               NA)),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1) +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(breaks=seq(0,1,0.1),
                     # name="Part relative des qualités de grume sur la valeur de consommation\nau cours des différents inventaires",
                     labels = percent) +
  # scale_fill_discrete("Essences Regroupées") +
  scale_fill_manual("Qualités de grume :", values=QualPalette) +
    guides(fill=guide_legend(nrow=1,
                             byrow=TRUE,
                             reverse=T)) +
  ggtitle("Part relative des qualités de grume sur la valeur potentielle\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    legend.text = element_text(size = 5),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



if (DernierCycle > 2) {
Alpha_Cycle2 <- c(1,rep(0.3,DernierCycle-3),1)
}
if (DernierCycle == 2) {
  Alpha_Cycle2 <- c(1,1)
}
# names(Alpha_Cycle) <- 1:DernierCycle
names(Alpha_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Size_Cycle2 <- c(2,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Size_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]
Shape_Cycle2 <- c(6,rep(1,DernierCycle-2),2)
# names(Alpha_Cycle) <- 1:DernierCycle
names(Shape_Cycle2) <- Cycles$Annee[which(Cycles$NumForet==Choix &
                                             is.element(Cycles$Cycle,1:DernierCycle))]


Annees_Order <- 1:DernierCycle
Cycles_Disp <- filter(Cycles,
                      NumForet==Choix)
Annees_Order <- Cycles_Disp$Annee[match(Annees_Order,
                                        Cycles_Disp$Cycle)]
# --- VpHa (absolu)
t1 <- mutate(t_Radar,
             Annee=factor(Annee,levels=Annees_Order))
p2 <- ggplot() +
  geom_point(t1,
             mapping=aes(x=Reg1,y=Vp,alpha=Annee,colour=Reg1)) +
  geom_point(t1,
             mapping=aes(x=Reg1,y=Vp,alpha=Annee,colour=Reg1,
                         shape=Annee,size=Annee)) +
  geom_label_repel(t1,
                   mapping=aes(x=Reg1,
                               y=Vp,
                               label=Annee),
                   label.padding = unit(0.15, "lines"),
                   size=1.7, alpha=1) +
  # scale_alpha_manual(values=c(1,rep(0.2,DernierCycle-2),1)) +
  # scale_size_manual(values=c(2,rep(1,DernierCycle-2),2)) +
  # scale_shape_manual(values=c(6,rep(1,DernierCycle-2),2)) +
  scale_alpha_manual(name="Années d'inventaire",
                     values=Alpha_Cycle2) +
  scale_size_manual(name="Années d'inventaire",
                     values=Size_Cycle2) +
  scale_shape_manual(name="Années d'inventaire",
                     values=Shape_Cycle2) +
  scale_colour_manual("Qualités de grume :", values=QualPalette) +
  guides(colour=guide_legend(nrow=1,
                             byrow=TRUE,
                             order=1),
         alpha=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         shape=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2),
         size=guide_legend(nrow=ifelse(DernierCycle > 5,
                                         2,1),
                             byrow=TRUE,
                             order=2)) +
  # coord_flip() +
  ggtitle("Répartition des qualités de grume sur la valeur potentielle\nau cours des différents inventaires") +
  theme_bw() + MyTheme1 +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    # axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    # axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    # axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    legend.box="vertical",
    legend.box.margin=unit(c(0.1,0.1,0.1,0.1), "cm"))
    # legend.title=element_text(size = 7),
    # plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
    # panel.grid.major = element_blank(),
    # panel.border=element_blank())

# --- Plot
# mylegend <- g_legend(p2)
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1, widths=rep(1,2)),
#              mylegend,nrow=2,heights=c(9,1))

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier


\section{Gestion passée}

<<Comment_2.9, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.9")
cat(Comment$Texte)
@

\EditIf{\Sexpr{plac_CHG | protoc_CHG}}{TRUE}{
\subsection[Prélèvement]{Prélèvement\protect\footnote{\underline{\textbf{Attention :}} le nombre de placettes et/ou le protocole ont été modifiés au cours des différents inventaires. En conséquence, les taux indiqués ici doivent être considérés à titre indicatifs : les taux réels devront être recalculés manuellement}}
}{\subsection{Prélèvement}}

<<Comment_2.9.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="2.9.3")
cat(Comment$Texte)
@

% \textcolor{red}{Pour cette partie, nécessaire de revoir la base de données (colonne type) pour faire la distinction Chablis et Exploité - en attente...}

Le tableau \ref{TabCat_Prelvt} présente les différents prélèvements effectués sur chaque période.

<<TabCat_Prelvt_Ancien, echo=F, warning=F, size='footnotesize', fig.height=4, fig.cap="Répartition du prélèvement en volume et en valeur par catégories de diamètre", fig.pos="H", results='asis', eval=F, include=F>>=
# t <- filter(gfForetExploit_Cat,
#             NumForet==Choix & Cycle==DernierCycle)
# t <- filter(gfForetPFutaie_Cat,
#             NumForet==Choix & Cycle==DernierCycle)
alibi_DF <-
  data.frame(
    Cat = rep(c("PER", "PB", "BM", "GB", "TGB"), 3),
    Coupe = c(rep(NA, 5), rep("PF", 5), rep("E", 5)),
    # Mark=rep(1,15),
    stringsAsFactors = F
  )

t1 <-
  gfForetFpied_CatCoupe %>%
  filter(NumForet == Choix & Cycle == DernierCycle) %>%
  mutate(
    VcHa = round(VcHa, 0),
    Gha = round(Gha, 1),
    Coupe = ifelse(Coupe == "PF/E", "E", Coupe)
  ) %>%
  select(Cat, Gha, Coupe, VcHa) %>%
  full_join(alibi_DF) %>%
  mutate(Cat = factor(Cat, levels = c("PER", "PB", "BM", "GB", "TGB"))) %>%
  melt(id = c("Cat", "Coupe")) %>%
  dcast(Cat ~ Coupe + variable, value.var = "value") %>%
  select(-one_of("NA_Gha", "NA_VcHa")) %>%
  rename_("Catégories de diamètre"="Cat")

names_DF <-
  data.frame(
    name_IN = c("NA_Gha", "NA_VcHa", "PF_Gha", "PF_VcHa", "E_VcHa", "E_Gha"),
    name_OUT = c(
      "", "",
      "G passé à la futaie", "Vc passé à la futaie",
      "Vc prélevé", "G prélevé"
    ),
    stringsAsFactors = F
  )

names(t1)[2:dim(t1)[2]] <-
  names_DF$name_OUT[match(names(t1)[2:dim(t1)[2]], names_DF$name_IN)]



print(xtable(t1,
             # digits=rep(0,dim(t1)[2]+1),
             digits=c(0,0,1,0,1,0),
             align=c("M{0cm}|","M{1.2cm}",rep("|M{2cm}",dim(t1)[2]-1)),
             caption = "Répartition des volumes prélevés et passés à la futaie par catégories de diamètre",
             label   = "TabCat_Prelvt"),
      caption.placement = "bottom",
      hline.after=-1:dim(t1)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      size="\\footnotesize")
@
\FloatBarrier

<<TabCat_Prelvt, echo=F, warning=F, size='footnotesize', fig.height=4, fig.cap="Répartition du prélèvement en volume et en valeur par catégories de diamètre - toutes placettes confondues", fig.pos="H", results='asis',eval=Eval_Evol, include=Eval_Evol>>=
# alibi_DF <- data.frame(Cat=rep(c("PER","PB","BM","GB","TGB"),3),
#                        Coupe=c(rep(NA,5),rep("PF",5),rep("E",5)),
#                        # Mark=rep(1,15),
#                        stringsAsFactors=F)
#
# df_E <- filter(gfForetFpied_CatCoupe,
#             NumForet==Choix) %>%
#   mutate(VcHa=round(VcHa,0),
#          Gha=round(Gha,1),
#          Coupe=ifelse(Coupe=="PF/E","E",Coupe)) %>%
#   select(Cat,Gha,Coupe,VcHa) %>%
#   full_join(alibi_DF) %>%
#   mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
#   melt(id=c("Cat","Coupe")) %>%
#   dcast(Cat ~ Coupe + variable,value.var="value") %>%
#   select(-one_of("NA_Gha","NA_VcHa")) %>%
#   rename_("catégories de diamètre"="Cat")
#
# names_DF <- data.frame(name_IN=c("NA_Gha","NA_VcHa","PF_Gha",
#                                  "PF_VcHa","E_VcHa","E_Gha"),
#                        name_OUT=c("","",
#                                   "G passé à la futaie",
#                                   "Vc passé à la futaie",
#                                   "Vc prélevé","G prélevé"),
#                        stringsAsFactors=F)
#
# names(t1)[2:dim(t1)[2]] <- names_DF$name_OUT[match(names(t1)[2:dim(t1)[2]],
#                                                    names_DF$name_IN)]

# Prelvt_ALIBI0 <- data.frame(Cycle=rep(1:(DernierCycle-1),2),
#                       Cat=rep("Total",(DernierCycle-1)*2),
#                       Coupe=sort(rep(c("C","E"),(DernierCycle-1)*2)),
#                       stringsAsFactors=F)# %>%
Prelvt_ALIBI0 <-  # changer ? Utiliser dplyr::combine ?
  expand.grid(
    Cycle = c(1:(DernierCycle - 1)),
    Cat = c("Total"),
    Coupe = c("C","E")
  ) %>%
  data.frame() %>%
  mutate(
    Coupe = as.character(Coupe),
    Cat = as.character(Cat)
  )

# --- Table Total (distinction sur Coupe)
t_Tot1 <-
  gfForetDen_Coupe %>%
  filter(
    NumForet==Choix & Cycle == DernierCycle - 1 &
      is.element(Coupe,c("E", "PF/E", "C"))
    ) %>%
  # mutate(Cat="Total",
  #        Cycle=paste0("\\textbf{",Cycle,"}"),
  #        Coupe=paste0("\\textbf{",Coupe,"}"),
  #        Cat=paste0("\\textbf{",Cat,"}"),
  #        Gha=paste0("\\textbf{",Gha,"}"),
  #        VcHa=paste0("\\textbf{",VcHa,"}")) %>%
  mutate(
    Coupe = as.character(Coupe),
    Cat = "Total"
  ) %>%
  full_join(Prelvt_ALIBI0) %>%
  select(Cycle, Cat, Coupe, Gha, Vha, VcHa)

# Prelvt_ALIBI <- data.frame(Cycle=rep(1:(DernierCycle-1),12),
#                       Cat=sort(rep(c("PB","BM","GB","TGB"),(DernierCycle-1)*3)),
#                       Coupe=sort(rep(c("C","E"),(DernierCycle-1)*3)),
#                       stringsAsFactors=F)# %>%
Prelvt_ALIBI <-
  expand.grid(
    Cycle = c(1:(DernierCycle - 1)),
    Cat = c("PB", "BM", "GB", "TGB"),
    Coupe = c("C", "E")
  ) %>%
  data.frame() %>%
  mutate(
    Coupe = as.character(Coupe),
    Cat = as.character(Cat)
  )
  # mutate(Cat=factor(Cat,levels=c("PB","BM","GB","TGB"))) %>%
  # arrange(Cycle,Cat)

t0 <-
  gfForetDen_CatCoupe %>%
  filter(
    NumForet == Choix & Cycle == DernierCycle - 1 &
      is.element(Coupe, c("E", "PF/E", "C"))
  ) %>%
  select(Cycle, Cat, Coupe, Gha, Vha, VcHa) %>%
  mutate(Coupe = as.character(Coupe)) %>%
  # mutate(Cycle=as.character(Cycle),
  #        Coupe=as.character(Coupe),
  #        Cat=as.character(Cat),
  #        Gha=as.character(Gha),
  #        VcHa=as.character(VcHa)) %>%
  full_join(t_Tot1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(
    Coupe=gsub("PF/", "", Coupe),
    # Cycle=paste0("Cycle",Cycle),
    Cat = factor(Cat, levels = c("PB", "BM", "GB", "TGB", "Total"))
  ) %>%
  group_by(Cycle, Cat, Coupe) %>%
  summarise(
    VcHa = sum(VcHa, na.rm = T),
    Gha = sum(Gha, na.rm = T),
    Vha = sum(Vha, na.rm = T),
    PU = VcHa/Vha
  ) %>%
  ungroup() %>%
  melt(id = c("Cycle", "Cat", "Coupe")) %>%
  mutate(
    value = ifelse(variable == "Gha", round(value, 1), round(value, 0)),
    value = ifelse(value == 0 | is.na(value), "", value),
    value =
      ifelse(
        Cat == "Total",
        ifelse(
          value != 0 & !is.na(value),
          paste0("\\cellcolor{LightGray}{", value, "}"),
          "\\cellcolor{LightGray}{}"
        ),
        value
      ),
    # value=ifelse(Cat=="Total",
    #              paste0("\\textbf{",value,"}"),
    #              value),
    variable = factor(variable, levels = c("Gha", "Vha", "VcHa", "PU")),
    Coupe = ifelse(Coupe == "E", "Exploité", "Chablis"),
    Coupe = factor(Coupe, levels = c("Exploité", "Chablis"))
  ) %>%
  dcast(Cycle + variable ~ Coupe + Cat, value.var = "value") %>%
  # mutate(Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
  #        Coupe=factor(Coupe,levels=c("Exploité","Chablis"))) %>%
  # Coupe=ifelse(Cat=="Total",
  #              paste0("\\textbf{",Coupe,"}"),Coupe),
  # Cat=ifelse(Cat=="Total",
  #            "\\rowcolor{LightGray} \\textbf{Total}",Cat),
  # Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB",
  #                         "\\rowcolor{LightGray} \\textbf{Total}")),
  # Coupe=factor(Coupe,levels=c("Exploité","\\textbf{Exploité}",
  #                             "Chablis","\\textbf{Chablis}"))) %>%
  arrange(Cycle, variable)# %>%
  # mutate(Coupe=ifelse(Cat=="Total",
  #                     paste0("\\textbf{",Coupe,"}"),Coupe),
  #        Cat=ifelse(Cat=="Total",
  #                   "\\rowcolor{LightGray} Total",Cat)) %>%
  # MultiRow(1)





# %%%%%%%%%%%%%%%%%%%%%%%%% TOTAUX


# Prelvt_ALIBI2 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Total",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI2 <- expand.grid(Cycle=c(1:(DernierCycle-1)),
                            Coupe=c("Total")) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe))

# -- Total (tous prélèvements confondus)
t_Tot <-
  gfForetDen_Coupe %>%
  filter(
    NumForet==Choix & Cycle == DernierCycle - 1 &
      is.element(Coupe, c("E", "PF/E", "C"))
  ) %>%
  mutate(Coupe = "Total") %>%
  select(Cycle, Coupe, Gha, Vha, VcHa) %>%
  full_join(Prelvt_ALIBI2) %>%
  group_by(Cycle, Coupe) %>%
  summarise(Gha = round(sum(Gha, na.rm = T), 1),
            Vha = round(sum(Vha, na.rm = T)),
            VcHa = round(sum(VcHa, na.rm = T))) %>%
  ungroup() %>%
  mutate(PU = VcHa / Vha,
         PU = ifelse(is.na(PU), 0, round(PU, 0)),
         VcHa =
           ifelse(
             VcHa != 0,
             paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{", VcHa, "}}"),
             "\\cellcolor{DimGray}"
           ),
         Gha =
           ifelse(
             Gha != 0,
             paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{", Gha, "}}"),
             "\\cellcolor{DimGray}"
           ),
         Vha =
           ifelse(
             Vha != 0,
             paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{", Vha, "}}"),
             "\\cellcolor{DimGray}"
           ),
         PU =
           ifelse(
             PU != 0,
             paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{", PU, "}}"),
             "\\cellcolor{DimGray}"
           )
  ) %>%
  melt(id = c("Cycle", "Coupe")) %>%
  # mutate(value=ifelse(Cat=="Total",
  #                     paste0("\\textbf{\\textcolor{White}{",value,"}}"),
  #                     value),
  #        variable=factor(variable,levels=c("Gha","VcHa"))) %>%
  mutate(variable = factor(variable, levels = c("Gha", "Vha", "VcHa", "PU"))) %>%
  dcast(Cycle + variable ~ Coupe, value.var = "value")

# command_Total1 <- unlist(unname(t_Tot[1,]))
# command_Total1 <- command_Total1[which(!duplicated(command_Total1))]
# command_Total1 <- paste0(command_Total1,
#                          collapse=" & ")

# %%%%%%%%%% %%%%%%%%%% #
# Prelvt_ALIBI3 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Taux",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI3 <-
  expand.grid(
    Cycle = c(1:(DernierCycle - 1)),
    Coupe = c("Taux")
  ) %>%
  data.frame() %>%
  mutate(Coupe = as.character(Coupe))

# -- Taux de prélèvement (tous prélèvements confondus)
t_Prelvt <-
  gfForetDen_Coupe %>%
  filter(NumForet == Choix & Cycle == DernierCycle - 1) %>%
  select(Cycle, Coupe, Gha, Vha, VcHa) %>%
  mutate(
    Coupe = gsub("PF/", "", Coupe),
    Coupe = gsub("PF", "", Coupe),
    Coupe = gsub("C", "E", Coupe),
    Coupe = ifelse(Coupe=="E", "Taux", Coupe),
    Coupe = ifelse(Coupe == "", NA, Coupe),
    Coupe = as.character(Coupe)) %>%
  full_join(Prelvt_ALIBI3) %>%
  group_by(Cycle, Coupe) %>%
  summarise(VcHa = sum(VcHa, na.rm = T),
            Gha = sum(Gha, na.rm = T),
            Vha = sum(Vha, na.rm = T)) %>%
  # ungroup() %>%
  group_by(Cycle) %>%
  mutate(
    Gha_Tot = sum(Gha),
    Vha_Tot = sum(Vha),
    VcHa_Tot = sum(VcHa)
  ) %>%
  ungroup() %>%
  filter(Coupe == "Taux") %>%
  mutate(Gha_Part = round(Gha / Gha_Tot * 100, 0),
         Vha_Part = round(Vha / Vha_Tot * 100, 0),
         VcHa_Part = round(VcHa / VcHa_Tot * 100, 0),
         PU = "",

         Gha_Part =
           ifelse(Gha_Part != 0, paste0("\\scriptsize{",Gha_Part," \\%}"), ""),
         Gha_Part = paste0("\\multicolumn{1}{c|}{", Gha_Part, "}"),
         Vha_Part =
           ifelse(Vha_Part != 0, paste0("\\scriptsize{", Vha_Part, " \\%}"), ""),
         Vha_Part = paste0("\\multicolumn{1}{c|}{", Vha_Part, "}"),
         VcHa_Part =
           ifelse(VcHa_Part != 0, paste0("\\scriptsize{", VcHa_Part, " \\%}"), ""),
         VcHa_Part = paste0("\\multicolumn{1}{c|}{", VcHa_Part, "}")
  ) %>%
  select(Cycle, Coupe, Gha_Part, Vha_Part, VcHa_Part, PU) %>%
  rename(
    Gha = Gha_Part,
    Vha = Vha_Part,
    VcHa = VcHa_Part
  ) %>%
  melt(id = c("Cycle", "Coupe")) %>%
  mutate(variable = factor(variable, levels = c("Gha", "Vha", "VcHa", "PU"))) %>%
  dcast(Cycle + variable ~ Coupe, value.var = "value")

# command_Total2 <- unlist(unname(t_Prelvt[1,]))
# command_Total2 <- command_Total2[which(!duplicated(command_Total2))]
# # command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\cellcolor{DimGray} \\textbf{\\textcolor{White}{Taux de prélèvement total}}}"
# command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\textbf{Taux de prélèvement total}}"
# command_Total2 <- paste0(command_Total2,
#                          collapse=" & ")
#
# command_Total <- paste0("\\hline\\hline\n",command_Total1,
#                         "\\\\\n\\hline\n",
#                         command_Total2,
#                         "\\\\")

# ListPos[length(ListPos)+1]=dim(t0)[1]
# command=c(command,command_Total)

# remplacement des Cycles par les année + ajout de multicolumn
CyclesPrelvt_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))

t0 <- left_join(t0,t_Tot) %>%
  left_join(t_Prelvt) %>%
  left_join(CyclesPrelvt_DF[,c("Cycle_Ante","Periodes")],
            by=c("Cycle"="Cycle_Ante")) %>%
  mutate(variable=as.character(variable),
         variable=ifelse(variable=="Gha",
                         "G",variable),
         variable=ifelse(variable=="Vha",
                         "V",variable),
         variable=ifelse(variable=="VcHa",
                         "Vc",variable)) %>%
  select(one_of("Periodes",
                names(t0)[which(!names(t0) %in% c("Cycle","Periodes"))],
                "Total","Taux")) %>%
  MultiRow(1)

# %%%%%%%%%% %%%%%%%%%% #
# -- 0.Position Total
# pos_Total <- which(t0$Cat=="\\rowcolor{LightGray} \\textbf{Total}")-1
ListPos <- list()
command=c()
# for (i in 1:length(pos_Total)) {
#   ListPos[length(ListPos)+1] <- pos_Total[i]
#   command <- c(command,"\\hline\n")
# }


# %%%%%%%%%% %%%%%%%%%% #
ListPos <- list()
command=c()
# -- 1.Position changement Cycle.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
pos_Cycle <- which(!is.na(t0$Periodes))[-1]

if (DernierCycle > 2) {
  for (i in 1:length(pos_Cycle)) {
    ListPos[length(ListPos) + 1] <- pos_Cycle[i] - 1
    command <- c(command, "\\midrule[0.5pt]\n")
  }
} else {
  pos_Cycle <- dim(t0)[1] + 1
}


t0 <-
  t0 %>%
  rename_(
    "\\multirow{2}{*}{\\parbox{1.4cm}{\\centering \\textbf{Périodes}}}" =
      "Periodes",
    " & \\multirow{2}{*}{\\parbox{1cm}{\\centering \\textbf{Variable}}}" =
      "variable",
    " & \\multirow{2}{*}{\\parbox{1.9cm}{\\centering \\textbf{Total des prélèvements}}}" =
      "Total",
    " & \\multicolumn{1}{c|}{\\multirow{2}{*}{\\parbox{1.7cm}{\\centering \\textbf{Taux de prélèvement}}}}" =
      "Taux"
  )

# %%%%%%%%%% %%%%%%%%%% #
# -- 2.Construction entête :
Ligne1 <-
  str_sub(
    names(t0)[3:(dim(t0)[2] - 2)],
    str_locate( names(t0)[3:(dim(t0)[2] - 2)], "_" )[, 1] + 1,
    - 1
  )
# Ligne1 <- gsub("VcHa","Vc",Ligne1)
# Ligne1 <- gsub("Gha","G",Ligne1)
# Ligne1 <- paste0("& & ",paste0(Ligne1,collapse=" & "))

names(t0)[3:(dim(t0)[2] - 2)] <-
  str_sub(
    names(t0)[3:(dim(t0)[2] - 2)],
    1,
    str_locate( names(t0)[3:(dim(t0)[2] - 2)], "_" )[, 1] - 1
  )



# Entete_Annees <- paste0(CyclesPrelvt_DF$Annee_Ante,
#                         " - ",
#                         CyclesPrelvt_DF$Annee_Courant)
# names(t0)[3:dim(t0)[2]] <- Entete_Annees

# ajout de multicolumn
pos_Dupl <- which(duplicated(names(t0)))
names(t0)[pos_Dupl - 1] <-
  paste0(" & \\multicolumn{5}{c|}{\\textbf{", names(t0)[pos_Dupl - 1], "}}")
names(t0)[pos_Dupl] <- ""
Entete <-
  paste0(
    paste0(names(t0), collapse = ""),
    paste0("\\\\ \n\\cline{3-", dim(t0)[2] - 2, "}")
    )

names(t0) <- c("", "", Ligne1, "", "")
names(t0)[which(names(t0) == "Total")] <-
  paste0("\\cellcolor{LightGray}{", names(t0)[which(names(t0) == "Total")], "}")
names(t0)[dim(t0)[2]] <-
  paste0("\\multicolumn{1}{c|}{", names(t0)[dim(t0)[2]], "}")
# %%%%%%%%%% %%%%%%%%%% #
# -- 3.Position pour rajout \\cline{1-1}\\cline{3-dim(t0)[2]} : séparation pour un même mode de prélèvement
pos <- -1
ListPos <- c(ListPos, list(pos))
command = c(command, paste0("\\hline\n", Entete, "\n"))
# command=paste0("\\cline{3-",dim(t0)[2],"}\\\\\n",
#                # paste0(rep("&",dim(t0)[2]-1),collapse=" "),
#                Ligne1,
#                "\n\\\\ \\cline{1-1}\\cline{3-",dim(t0)[2],"}\n")

for (i in (1:(dim(t0)[1]))[-c(pos_Cycle)]) {
  ListPos[length(ListPos) + 1] <- i - 1
  command <- c(command, paste0("\\cline{2-", dim(t0)[2], "}\n"))
}

# %%%%%%%%%% %%%%%%%%%% #

ListPos[length(ListPos) + 1] <- dim(t0)[1]
command <- c(command, paste0("\\cline{1-", dim(t0)[2] - 1, "}"))



print(
  xtable(
    t0,
    # digits=rep(0,dim(t1)[2]+1),
    digits = rep(0,dim(t0)[2] + 1),
    align = c(
      "M{0cm}|", "|M{1.4cm}", "|M{1cm}", rep("|M{0.5cm}", dim(t0)[2] - 4),
      "|M{1.9cm}|", "M{1.7cm}"
    ),
    caption = "Prélèvements constatés sur la période (toutes placettes confondues)",
    label   = "TabCat_Prelvt"
  ),
  caption.placement = "bottom",
  hline.after = F,
  sanitize.text.function = function(x) {return(x)},
  include.rownames = F,
  add.to.row = list(
    pos = ListPos,
    command = command
  ),
  size="\\footnotesize")

@
\FloatBarrier

<<TabCat_Prelvt_PlacAssiette, echo=F, warning=F, size='footnotesize', fig.height=4, fig.cap="Répartition du prélèvement en volume et en valeur par catégories de diamètre (placettes d'inventaire passées en coupe)", fig.pos="H", results='asis',eval=Eval_Geneve, include=Eval_Geneve>>=

# --- Détection des placettes passées en coupe :
Plac_COUPE <- filter(gfPlaDen_Coupe,
                     NumForet==Choix &
                       is.element(Coupe,c("E","PF/E","C"))) %>%
  select(NumPlac) %>%
  distinct() %>%
  unlist() %>%
  unname()

Prelvt_ALIBI0 <- expand.grid(Cycle=c(1:(DernierCycle-1)),
                            Cat=c("Total"),
                            Coupe=c("C","E")) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Cat=as.character(Cat))

# --- Table Total (distinction sur Coupe)
t_Tot1 <- filter(gfForetGroupe2Den_Coupe,
            NumForet==Choix &
              is.element(Coupe,c("E","PF/E","C")) &
              Groupe2=="Coupe") %>%
  # mutate(Cat="Total",
  #        Cycle=paste0("\\textbf{",Cycle,"}"),
  #        Coupe=paste0("\\textbf{",Coupe,"}"),
  #        Cat=paste0("\\textbf{",Cat,"}"),
  #        Gha=paste0("\\textbf{",Gha,"}"),
  #        VcHa=paste0("\\textbf{",VcHa,"}")) %>%
  mutate(Coupe=as.character(Coupe),
         Cat="Total") %>%
  full_join(Prelvt_ALIBI0) %>%
  select(Cycle,Cat,Coupe,Gha,Vha,VcHa)

# Prelvt_ALIBI <- data.frame(Cycle=rep(1:(DernierCycle-1),12),
#                       Cat=sort(rep(c("PB","BM","GB","TGB"),(DernierCycle-1)*3)),
#                       Coupe=sort(rep(c("C","E"),(DernierCycle-1)*3)),
#                       stringsAsFactors=F)# %>%
Prelvt_ALIBI <- expand.grid(Cycle=c(1:(DernierCycle-1)),
                            Cat=c("PB","BM","GB","TGB"),
                            Coupe=c("C","E")) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Cat=as.character(Cat))
  # mutate(Cat=factor(Cat,levels=c("PB","BM","GB","TGB"))) %>%
  # arrange(Cycle,Cat)

t0 <- filter(gfForetGroupe2Den_CatCoupe,
            NumForet==Choix &
              is.element(Coupe,c("E","PF/E","C")) &
              Groupe2=="Coupe") %>%
  select(Cycle,Cat,Coupe,Gha,Vha,VcHa) %>%
  mutate(Coupe=as.character(Coupe)) %>%
  # mutate(Cycle=as.character(Cycle),
  #        Coupe=as.character(Coupe),
  #        Cat=as.character(Cat),
  #        Gha=as.character(Gha),
  #        VcHa=as.character(VcHa)) %>%
  full_join(t_Tot1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         # Cycle=paste0("Cycle",Cycle),
         Cat=factor(Cat,levels=c("PB","BM","GB","TGB","Total"))) %>%
  group_by(Cycle,Cat,Coupe) %>%
  summarise(VcHa=sum(VcHa,na.rm=T),
            Gha=sum(Gha,na.rm=T),
            Vha=sum(Vha,na.rm=T),
            PU=VcHa/Vha) %>%
  ungroup() %>%
  melt(id=c("Cycle","Cat","Coupe")) %>%
  mutate(value=ifelse(variable=="Gha",
                      round(value,1),
                      round(value,0)),
         value=ifelse(value==0 | is.na(value),
                      "",value),
         value=ifelse(Cat=="Total",
                      ifelse(value!=0 & !is.na(value),
                             paste0("\\cellcolor{LightGray}{",
                                               value,
                                               "}"),
                             "\\cellcolor{LightGray}{}"),
                      value),
         # value=ifelse(Cat=="Total",
         #              paste0("\\textbf{",value,"}"),
         #              value),
         variable=factor(variable,levels=c("Gha","Vha","VcHa","PU")),
         Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
         Coupe=factor(Coupe,levels=c("Exploité","Chablis"))) %>%
  dcast(Cycle + variable ~ Coupe + Cat,
        value.var="value") %>%
  # mutate(Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
  #        Coupe=factor(Coupe,levels=c("Exploité","Chablis"))) %>%
         # Coupe=ifelse(Cat=="Total",
         #              paste0("\\textbf{",Coupe,"}"),Coupe),
         # Cat=ifelse(Cat=="Total",
         #            "\\rowcolor{LightGray} \\textbf{Total}",Cat),
         # Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB",
         #                         "\\rowcolor{LightGray} \\textbf{Total}")),
         # Coupe=factor(Coupe,levels=c("Exploité","\\textbf{Exploité}",
         #                             "Chablis","\\textbf{Chablis}"))) %>%
  arrange(Cycle,variable)# %>%
  # mutate(Coupe=ifelse(Cat=="Total",
  #                     paste0("\\textbf{",Coupe,"}"),Coupe),
  #        Cat=ifelse(Cat=="Total",
  #                   "\\rowcolor{LightGray} Total",Cat)) %>%
  # MultiRow(1)





# %%%%%%%%%%%%%%%%%%%%%%%%% TOTAUX


# Prelvt_ALIBI2 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Total",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI2 <- expand.grid(Cycle=c(1:(DernierCycle-1)),
                            Coupe=c("Total")) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe))

# -- Total (tous prélèvements confondus)
t_Tot <- filter(gfForetGroupe2Den_Coupe,
                NumForet==Choix &
                  is.element(Coupe,c("E","PF/E","C")) &
              Groupe2=="Coupe") %>%
  mutate(Coupe="Total") %>%
  select(Cycle,Coupe,Gha,Vha,VcHa) %>%
  full_join(Prelvt_ALIBI2) %>%
  group_by(Cycle,Coupe) %>%
  summarise(Gha=round(sum(Gha,na.rm=T),1),
            Vha=round(sum(Vha,na.rm=T)),
            VcHa=round(sum(VcHa,na.rm=T))) %>%
  ungroup() %>%
  mutate(PU=VcHa/Vha,
         PU=ifelse(is.na(PU),0,round(PU,0)),
         VcHa=ifelse(VcHa!=0,
                     paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                            VcHa,
                            "}}"),
                     "\\cellcolor{DimGray}"),
         Gha=ifelse(Gha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                           Gha,
                           "}}"),
                    "\\cellcolor{DimGray}"),
         Vha=ifelse(Vha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                           Vha,
                           "}}"),
                    "\\cellcolor{DimGray}"),
         PU=ifelse(PU!=0,
                   paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                          PU,
                          "}}"),
                   "\\cellcolor{DimGray}")) %>%
  melt(id=c("Cycle","Coupe")) %>%
  # mutate(value=ifelse(Cat=="Total",
  #                     paste0("\\textbf{\\textcolor{White}{",value,"}}"),
  #                     value),
  #        variable=factor(variable,levels=c("Gha","VcHa"))) %>%
  mutate(variable=factor(variable,levels=c("Gha","Vha","VcHa","PU"))) %>%
  dcast(Cycle + variable ~ Coupe,
        value.var="value")

# command_Total1 <- unlist(unname(t_Tot[1,]))
# command_Total1 <- command_Total1[which(!duplicated(command_Total1))]
# command_Total1 <- paste0(command_Total1,
#                          collapse=" & ")

# %%%%%%%%%% %%%%%%%%%% #
# Prelvt_ALIBI3 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Taux",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI3 <- expand.grid(Cycle=c(1:(DernierCycle-1)),
                            Coupe=c("Taux")) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe))

# -- Taux de prélèvement (tous prélèvements confondus)
t_Prelvt <- filter(gfForetGroupe2Den_Coupe,
            NumForet==Choix &
              Groupe2=="Coupe") %>%
  select(Cycle,Coupe,Gha,Vha,VcHa) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=gsub("C","E",Coupe),
         Coupe=ifelse(Coupe=="E","Taux",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Coupe=as.character(Coupe)) %>%
  full_join(Prelvt_ALIBI3) %>%
  group_by(Cycle,Coupe) %>%
  summarise(VcHa=sum(VcHa,na.rm=T),
            Gha=sum(Gha,na.rm=T),
            Vha=sum(Vha,na.rm=T)) %>%
  # ungroup() %>%
  group_by(Cycle) %>%
  mutate(Gha_Tot=sum(Gha),
         Vha_Tot=sum(Vha),
         VcHa_Tot=sum(VcHa)) %>%
  ungroup() %>%
  filter(Coupe=="Taux") %>%
  mutate(Gha_Part=round(Gha/Gha_Tot*100,0),
         Vha_Part=round(Vha/Vha_Tot*100,0),
         VcHa_Part=round(VcHa/VcHa_Tot*100,0),
         PU="",

         Gha_Part=ifelse(Gha_Part!=0,
                         paste0("\\scriptsize{",Gha_Part," \\%}"),
                         ""),
         Gha_Part=paste0("\\multicolumn{1}{c|}{",Gha_Part,"}"),
         Vha_Part=ifelse(Vha_Part!=0,
                         paste0("\\scriptsize{",Vha_Part," \\%}"),
                         ""),
         Vha_Part=paste0("\\multicolumn{1}{c|}{",Vha_Part,"}"),
         VcHa_Part=ifelse(VcHa_Part!=0,
                         paste0("\\scriptsize{",VcHa_Part," \\%}"),
                         ""),
         VcHa_Part=paste0("\\multicolumn{1}{c|}{",VcHa_Part,"}")) %>%
  select(Cycle,Coupe,Gha_Part,Vha_Part,VcHa_Part,PU) %>%
  rename(Gha=Gha_Part,
         Vha=Vha_Part,
         VcHa=VcHa_Part) %>%
  melt(id=c("Cycle","Coupe")) %>%
  mutate(variable=factor(variable,levels=c("Gha","Vha","VcHa","PU"))) %>%
  dcast(Cycle + variable ~ Coupe,
        value.var="value")

# command_Total2 <- unlist(unname(t_Prelvt[1,]))
# command_Total2 <- command_Total2[which(!duplicated(command_Total2))]
# # command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\cellcolor{DimGray} \\textbf{\\textcolor{White}{Taux de prélèvement total}}}"
# command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\textbf{Taux de prélèvement total}}"
# command_Total2 <- paste0(command_Total2,
#                          collapse=" & ")
#
# command_Total <- paste0("\\hline\\hline\n",command_Total1,
#                         "\\\\\n\\hline\n",
#                         command_Total2,
#                         "\\\\")

# ListPos[length(ListPos)+1]=dim(t0)[1]
# command=c(command,command_Total)

# remplacement des Cycles par les année + ajout de multicolumn
CyclesPrelvt_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))

t0 <- left_join(t0,t_Tot) %>%
  left_join(t_Prelvt) %>%
  left_join(CyclesPrelvt_DF[,c("Cycle_Ante","Periodes")],
            by=c("Cycle"="Cycle_Ante")) %>%
  mutate(variable=as.character(variable),
         variable=ifelse(variable=="Gha",
                         "G",variable),
         variable=ifelse(variable=="Vha",
                         "V",variable),
         variable=ifelse(variable=="VcHa",
                         "Vc",variable)) %>%
  select(one_of("Periodes",
                names(t0)[which(!names(t0) %in% c("Cycle","Periodes"))],
                "Total","Taux")) %>%
  MultiRow(1)

# %%%%%%%%%% %%%%%%%%%% #
# -- 0.Position Total
# pos_Total <- which(t0$Cat=="\\rowcolor{LightGray} \\textbf{Total}")-1
ListPos <- list()
command=c()
# for (i in 1:length(pos_Total)) {
#   ListPos[length(ListPos)+1] <- pos_Total[i]
#   command <- c(command,"\\hline\n")
# }


# %%%%%%%%%% %%%%%%%%%% #
ListPos <- list()
command=c()
# -- 1.Position changement Cycle.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
pos_Cycle <- which(!is.na(t0$Periodes))[-1]

if (DernierCycle > 2) {
  for (i in 1:length(pos_Cycle)) {
    ListPos[length(ListPos)+1] <- pos_Cycle[i]-1
    command <- c(command,"\\midrule[0.5pt]\n")
  }
} else {
  pos_Cycle <- dim(t0)[1]+1
}


t0 <- rename_(t0,
              "\\multirow{2}{*}{\\parbox{1.4cm}{\\centering \\textbf{Périodes}}}"="Periodes",
              " & \\multirow{2}{*}{\\parbox{1cm}{\\centering \\textbf{Variable}}}"="variable",
              " & \\multirow{2}{*}{\\parbox{1.9cm}{\\centering \\textbf{Total des prélèvements}}}"="Total",
              " & \\multicolumn{1}{c|}{\\multirow{2}{*}{\\parbox{1.7cm}{\\centering \\textbf{Taux de prélèvement}}}}"="Taux")

# %%%%%%%%%% %%%%%%%%%% #
# -- 2.Construction entête :
Ligne1 <- str_sub(names(t0)[3:(dim(t0)[2]-2)],
                  str_locate(names(t0)[3:(dim(t0)[2]-2)],"_")[,1]+1,-1)
# Ligne1 <- gsub("VcHa","Vc",Ligne1)
# Ligne1 <- gsub("Gha","G",Ligne1)
# Ligne1 <- paste0("& & ",paste0(Ligne1,collapse=" & "))

names(t0)[3:(dim(t0)[2]-2)] <- str_sub(names(t0)[3:(dim(t0)[2]-2)],
                                   1,
                                   str_locate(names(t0)[3:(dim(t0)[2]-2)],"_")[,1]-1)



# Entete_Annees <- paste0(CyclesPrelvt_DF$Annee_Ante,
#                         " - ",
#                         CyclesPrelvt_DF$Annee_Courant)
# names(t0)[3:dim(t0)[2]] <- Entete_Annees

# ajout de multicolumn
pos_Dupl <- which(duplicated(names(t0)))
names(t0)[pos_Dupl-1] <- paste0(" & \\multicolumn{5}{c|}{\\textbf{",
                                names(t0)[pos_Dupl-1],"}}")
names(t0)[pos_Dupl] <- ""
Entete <- paste0(paste0(names(t0),collapse=""),
                 paste0("\\\\ \n\\cline{3-",dim(t0)[2]-2,"}"))

names(t0) <- c("","",Ligne1,"","")
names(t0)[which(names(t0)=="Total")] <- paste0("\\cellcolor{LightGray}{",
                                               names(t0)[which(names(t0)=="Total")],
                                               "}")
names(t0)[dim(t0)[2]] <- paste0("\\multicolumn{1}{c|}{",
                                names(t0)[dim(t0)[2]],"}")
# %%%%%%%%%% %%%%%%%%%% #
# -- 3.Position pour rajout \\cline{1-1}\\cline{3-dim(t0)[2]} : séparation pour un même mode de prélèvement
pos <- -1
ListPos <- c(ListPos,list(pos))
command=c(command,paste0("\\hline\n",Entete,"\n"))
# command=paste0("\\cline{3-",dim(t0)[2],"}\\\\\n",
#                # paste0(rep("&",dim(t0)[2]-1),collapse=" "),
#                Ligne1,
#                "\n\\\\ \\cline{1-1}\\cline{3-",dim(t0)[2],"}\n")

for (i in (1:(dim(t0)[1]))[-c(pos_Cycle)]) {
  ListPos[length(ListPos)+1] <- i-1
  command <- c(command,paste0("\\cline{2-",dim(t0)[2],"}\n"))
}

# %%%%%%%%%% %%%%%%%%%% #

ListPos[length(ListPos)+1] <- dim(t0)[1]
command <- c(command,paste0("\\cline{1-",dim(t0)[2]-1,"}"))



print(xtable(t0,
             # digits=rep(0,dim(t1)[2]+1),
             digits=rep(0,dim(t0)[2]+1),
             align=c("M{0cm}|","|M{1.4cm}","|M{1cm}",
                     rep("|M{0.5cm}",dim(t0)[2]-4),"|M{1.9cm}|","M{1.7cm}"),
             caption = "Prélèvements constatés sur la période (placettes d'inventaire passées en coupe)",
             label   = "TabCat_Prelvt_Plac_Assiette"),
      caption.placement = "bottom",
      hline.after=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      add.to.row=list(
            pos=ListPos,
            command=command),
      size="\\footnotesize")

@
\FloatBarrier


% \textcolor{red}{Attention valeur pour Exploité ci-dessous est fausse -> test pour figure}\\
% \textcolor{red}{+ A modifier : il s'agit de l'accroissement ici et pas de la valeur totale}

<<HistoCat_Prelvt_Ancien, echo=F, warning=F, size='footnotesize', fig.height=3, fig.cap="Répartition du prélèvement en volume et en valeur", fig.pos="H", results='asis', eval=F, include=F>>=
alibi_DF <- data.frame(Coupe=c(NA,"PF","E"),
                       # Mark=rep(1,15),
                       stringsAsFactors=F)
factor_DF <- data.frame(variable_IN=c("Gha","VcHa"),
                        variable_OUT=c(1,2),
                        stringsAsFactors=F)
t1 <- filter(gfForetFpied_Coupe,
            NumForet==Choix & Cycle==DernierCycle) %>%
  mutate(VcHa=round(VcHa,0),
         Gha=round(Gha,1),
         Coupe=ifelse(Coupe=="PF/E","E",Coupe)) %>%
  select(Gha,Coupe,VcHa) %>%
  full_join(alibi_DF) %>%
  # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  melt(id=c("Coupe")) %>%
  group_by(variable) %>%
  mutate(Tot=sum(value,na.rm=T),
         Part_Tot=value/Tot) %>%
  ungroup() %>%
  filter(!is.na(Coupe)) %>%
  # mutate(variable=factor_DF$variable_OUT[match(variable,
  #                                              factor_DF$variable_IN)]) %>%
    mutate(variable=factor(variable,levels=c("Gha","VcHa"))) %>%
  arrange(Coupe,variable)
t1$Part_Tot[2] <- 0.14827586

ggplot() +
  geom_bar(t1,
           mapping=aes(factor(variable),Part_Tot,fill=Coupe),
           stat="identity",position="dodge") +
  geom_label(data.frame(x=c(0.77,1.77,1.23,2.23),
                        y=t1$Part_Tot,
                        label=t1$Part_Tot,
                        stringsAsFactors=F),
             mapping=aes(x,y,label=paste0(round(label*100,0)," %")),
             # position=position_dodge(width=1),
             label.padding = unit(0.15, "lines"),
             fill="white",
             # hjust=4,
                     size=1.7, alpha=1) +
  scale_y_continuous(limits=c(0,1),
                     breaks=seq(0,1,0.1),
                     labels=percent) +
  # scale_x_continuous(label=factor) +
  theme_bw() + MyTheme
@

% Dans la figure \ref{fig:Histo_PrelvtTot}, on considère les prélèvements sur l'ensemble des années de suivi. En calculant les accroissements moyens de cette période, on a représenté les taux de prélèvement des accroissements en volume et en valeur. Cette figure est complétée par le tableau \ref{Tab_PrelvtTot}.
Le tableau \ref{Tab_PrelvtTot} présente les prélèvements mis en regard avec les niveaux d'accroissement.\\
La figure \ref{fig:Histo_PrelvtTot} représente la part de l'accroissement prélevé en termes de surface terrière et de valeur.

<<Tab_PrelvtTot, echo=F, warning=F, fig.height=3, fig.cap=paste0("Répartition du prélèvement en volume et en valeur (période ",Cycles_Disp$Annee[Cycles_Disp$Cycle==1],"-",Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle],")"), results='asis',eval=Eval_Evol, include=Eval_Evol>>=
# t0 <- filter(gfForetFpied_,
#             NumForet==Choix & is.element(Cycle,c(1,DernierCycle))) %>%
#   select(NumForet,Cycle,Gha,VcHa) %>%
#   melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ variable + Cycle)
#
# # %%%%%%%%%%%%%%% Pourquoi des E ou C avec des AcctGper/Gainper négatifs ?
#
#
#
# df1 <- filter(Cycles,
#              NumForet==Choix) %>%
#   select(Cycle,Annee)
# df2 <- filter(Cycles,
#              NumForet==Choix & Cycle!=1) %>%
#   select(Cycle,Annee) %>%
#   mutate(Cycle=Cycle-1) %>%
#   rename(Annee_Post=Annee)
# df3 <- full_join(df1,df2) %>%
#   filter(Cycle!=DernierCycle) %>%
#   mutate(Annee_Post=ifelse(is.na(Annee_Post),
#                           0,Annee_Post),
#          Ecart=Annee_Post-Annee) %>%
#   select(Cycle,Ecart)

  df_E <-
  gfForetDen_Coupe %>%
  filter(NumForet == Choix & Cycle == DernierCycle - 1) %>%
  mutate(
    Coupe = gsub("PF/", "", Coupe),
    Coupe = gsub("PF", "", Coupe),
    Coupe = ifelse(Coupe == "", NA, Coupe),
    Cycle = ifelse(Cycle != DernierCycle, 1, DernierCycle)
  ) %>%
  group_by(NumForet, Cycle, Coupe) %>%
    summarise(
      Gha = sum(Gha, na.rm = T),
      Vha = sum(Vha, na.rm = T),
      VcHa = sum(VcHa, na.rm = T)
    ) %>%
    ungroup() %>%
    filter(!is.na(Coupe)) %>%
    select(NumForet, Cycle, Coupe, Gha, Vha, VcHa)


# ----- Sécurités au cas où prélèvement(s) serai(en)t manquants
if (dim(df_E)[1]==0) {
  df_temp <-
    data.frame(
      NumForet = Choix,
      Coupe = "C",
      Gha = 0,
      Vha = 0,
      VcHa = 0,
      stringsAsFactors = F
    )
  df_E <- df_E %>% rbind(df_temp)
}

if (length(which(df_E$Coupe == "C")) == 0) {
  df_temp <-
    df_E %>%
    mutate(
      Coupe = "C",
      Gha = 0,
      Vha = 0,
      VcHa = 0
    )
  df_E <- df_E %>% rbind(df_temp)
}

df_E1 <- df_E %>% select(NumForet, Cycle, Coupe, Gha)
df_E2 <- df_E %>% select(NumForet, Cycle, Coupe, Vha)
df_E3 <- df_E %>% select(NumForet, Cycle, Coupe, VcHa)

# --- Ecart (temps en années)
Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle == DernierCycle]
Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle == 1]
Annee_Ecart <- Annee_Fin - Annee_Debut

# ---
if ((protoc_CHG | plac_CHG) & DernierCycle == 2) {
df1 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle == 2) %>%
  # rename(
  #   AcctGper_Tot = AcctGper,
  #   AcctVper_Tot = AcctVper,
  #   Gainper_Tot = Gainper
  # ) %>%
  mutate(Cycle = 1) %>%
  select(NumForet, Cycle, AcctGper, AcctVper, Gainper)

df2 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle == 1) %>%
  select(NumForet, Cycle, Gha, Vha, VcHa) %>%
  left_join(df1) %>%
  rename(
    Gha_Tot = Gha,
    Vha_Tot = Vha,
    VcHa_Tot = VcHa#,

    # AcctGper_Tot = AcctGper,
    # AcctVper_Tot = AcctVper,
    # Gainper_Tot = Gainper
  ) %>%
  left_join(df_E) %>%
  select(
    NumForet, Cycle,
    Gha_Tot, Vha_Tot, VcHa_Tot,
    AcctGper, AcctVper, Gainper,
    # AcctGper_Tot, AcctVper_Tot, Gainper_Tot,
    Coupe, Gha, Vha, VcHa
  )

# ---
df_Fin1 <-
  df2 %>%
  group_by(NumForet,Cycle) %>%
  mutate(Coupe_Tot = sum(Gha)) %>%
  ungroup() %>%
  mutate(
    AcctGper_Tot = AcctGper * Annee_Ecart,
    Part_AcctGper_Tot =  paste0(round(Gha / AcctGper_Tot * 100, 0), " \\%"),
    PartTot_AcctGper_Tot =  paste0(round(Coupe_Tot / AcctGper_Tot * 100, 0), " \\%"),

    Coupe_Tot = round(Coupe_Tot / Annee_Ecart, 2),
    Gha = round(Gha / Annee_Ecart, 2),
    AcctGper_Tot = round(AcctGper_Tot / Annee_Ecart, 2),

    Taux_Acct = paste0(round(AcctGper_Tot / Gha_Tot * 100, 1), " \\%")
  ) %>%
  select(
    NumForet, Coupe, Gha,
    Coupe_Tot, AcctGper_Tot,
    Part_AcctGper_Tot, PartTot_AcctGper_Tot, Taux_Acct
  ) %>%
  filter(Coupe == "C") %>%
  melt(id = c("NumForet")) %>%
  filter(!is.element(variable, c("Coupe", "Gha"))) %>%
  select(-NumForet) %>%
  mutate(Population = "AcctG")

df_Fin2 <-
  df2 %>%
  group_by(NumForet,Cycle) %>%
  mutate(Coupe_Tot = sum(Vha)) %>%
  ungroup() %>%
  mutate(
    AcctVper_Tot = AcctVper * Annee_Ecart,
    Part_AcctVper_Tot =  paste0(round(Vha / AcctVper_Tot * 100, 0), " \\%"),
    PartTot_AcctVper_Tot =  paste0(round(Coupe_Tot / AcctVper_Tot * 100, 0), " \\%"),

    Coupe_Tot = round(Coupe_Tot / Annee_Ecart, 2),
    Vha = round(Vha / Annee_Ecart, 2),
    AcctVper_Tot = round(AcctVper_Tot / Annee_Ecart, 2),

    Taux_Acct = paste0(round(AcctVper_Tot / Vha_Tot * 100, 1), " \\%")
  ) %>%
  select(
    NumForet, Coupe, Vha,
    Coupe_Tot, AcctVper_Tot,
    Part_AcctVper_Tot, PartTot_AcctVper_Tot, Taux_Acct
  ) %>%
  filter(Coupe == "C") %>%
  melt(id = c("NumForet")) %>%
  filter(!is.element(variable, c("Coupe", "Vha"))) %>%
  select(-NumForet) %>%
  mutate(Population = "AcctV")

df_Fin3 <-
  df2 %>%
  group_by(NumForet,Cycle) %>%
  mutate(Coupe_Tot = sum(VcHa)) %>%
  ungroup() %>%
  mutate(
    Gainper_Tot = Gainper * Annee_Ecart,
    Part_Gainper_Tot =  paste0(round(VcHa / Gainper_Tot * 100, 0), " \\%"),
    PartTot_Gainper_Tot =  paste0(round(Coupe_Tot / Gainper_Tot * 100, 0), " \\%"),

    Coupe_Tot = round(Coupe_Tot / Annee_Ecart, 2),
    VcHa = round(VcHa / Annee_Ecart, 2),
    Gainper_Tot = round(Gainper_Tot / Annee_Ecart, 2),

    Taux_Acct = paste0(round(Gainper_Tot / VcHa_Tot * 100, 1), " \\%")
  ) %>%
  select(
    NumForet, Coupe, VcHa,
    Coupe_Tot, Gainper_Tot,
    Part_Gainper_Tot, PartTot_Gainper_Tot, Taux_Acct
  ) %>%
  filter(Coupe == "C") %>%
  melt(id = c("NumForet")) %>%
  filter(!is.element(variable, c("Coupe", "VcHa"))) %>%
  select(-NumForet) %>%
  mutate(Population = "Gain")
} else {
df4 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & is.element(Cycle, c(1, DernierCycle))) %>%
  # mutate(Coupe=gsub("PF/","",Coupe),
  #        Coupe=gsub("PF","",Coupe),
  #        Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  # group_by(NumForet,Cycle,Coupe) %>%
  # summarise(Gha=sum(Gha,na.rm=T),
  #           Vha=sum(Vha,na.rm=T),
  #           VcHa=sum(VcHa,na.rm=T)) %>%
  # ungroup() %>%
  rename(
    Gha_Tot = Gha,
    Vha_Tot = Vha,
    VcHa_Tot = VcHa
  ) %>%
  select(NumForet, Cycle, Gha_Tot, Vha_Tot, VcHa_Tot) %>%
  mutate(Cycle = ifelse(Cycle == 1, "Debut", "Fin"))

df_Bilan1 <-
  df4 %>%
  select(NumForet, Cycle, Gha_Tot) %>%
  # melt(id=c("NumForet","Cycle")) %>%
  dcast(NumForet ~ Cycle, value.var = "Gha_Tot")
  # mutate(Coupe=Total)

df_Bilan2 <-
  df4 %>%
  select(NumForet, Cycle, Vha_Tot) %>%
  # melt(id=c("NumForet","Cycle")) %>%
  dcast(NumForet ~ Cycle, value.var = "Vha_Tot")

df_Bilan3 <-
  df4 %>%
  select(NumForet, Cycle, VcHa_Tot) %>%
  # melt(id=c("NumForet","Cycle")) %>%
  dcast(NumForet ~ Cycle, value.var = "VcHa_Tot")

df_Fin1 <-
  df_E1 %>%
  left_join(df_Bilan1) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot = sum(Gha)) %>%
  ungroup() %>%
  mutate(
    AcctGper_Tot = Fin - Debut + Coupe_Tot,
    Part_AcctGper_Tot =  paste0(round(Gha / AcctGper_Tot * 100, 0), " \\%"),
    PartTot_AcctGper_Tot =  paste0(round(Coupe_Tot / AcctGper_Tot * 100, 0), " \\%"),

    Coupe_Tot = round(Coupe_Tot / Annee_Ecart, 2),
    Gha = round(Gha / Annee_Ecart, 2),
    AcctGper_Tot = round(AcctGper_Tot / Annee_Ecart, 2),

    Taux_Acct = paste0(round(AcctGper_Tot / Debut * 100, 1), " \\%")
  ) %>%
  select(
    NumForet, Coupe, Gha,
    Coupe_Tot, AcctGper_Tot,
    Part_AcctGper_Tot, PartTot_AcctGper_Tot, Taux_Acct
  ) %>%
  filter(Coupe == "C") %>%
  melt(id = c("NumForet")) %>%
  filter(!is.element(variable, c("Coupe", "Gha"))) %>%
  select(-NumForet) %>%
  mutate(Population = "AcctG")


df_Fin2 <-
  df_E2 %>%
  left_join(df_Bilan2) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot=sum(Vha)) %>%
  ungroup() %>%
  mutate(AcctVper_Tot=Fin-Debut+Coupe_Tot,
         Part_AcctVper_Tot=paste0(round(Vha/AcctVper_Tot*100,0)," \\%"),
         PartTot_AcctVper_Tot=paste0(round(Coupe_Tot/AcctVper_Tot*100,0)," \\%"),

         Coupe_Tot=round(Coupe_Tot/Annee_Ecart,1),
         Vha=round(Vha/Annee_Ecart,1),
         AcctVper_Tot=round(AcctVper_Tot/Annee_Ecart,1),

         Taux_Acct=paste0(round(AcctVper_Tot/Debut*100,1)," \\%")) %>%
  select(NumForet,Coupe,Vha,Coupe_Tot,AcctVper_Tot,
         Part_AcctVper_Tot,PartTot_AcctVper_Tot,Taux_Acct) %>%
  filter(Coupe=="C") %>%
  melt(id=c("NumForet")) %>%
  filter(!is.element(variable,c("Coupe","Vha"))) %>%
  select(-NumForet) %>%
  mutate(Population="AcctV")


df_Fin3 <- left_join(df_E3,df_Bilan3) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot=sum(VcHa)) %>%
  ungroup() %>%
  mutate(Gainper_Tot=Fin-Debut+Coupe_Tot,
         Part_Gainper_Tot=paste0(round(VcHa/Gainper_Tot*100,0)," \\%"),
         PartTot_Gainper_Tot=paste0(round(Coupe_Tot/Gainper_Tot*100,0)," \\%"),

         Coupe_Tot=round(Coupe_Tot/Annee_Ecart,0),
         VcHa=round(VcHa/Annee_Ecart,0),
         Gainper_Tot=round(Gainper_Tot/Annee_Ecart,1),

         Taux_Acct=paste0(round(Gainper_Tot/Debut*100,1)," \\%")) %>%
  select(NumForet,Coupe,VcHa,Coupe_Tot,Gainper_Tot,
         Part_Gainper_Tot,PartTot_Gainper_Tot,Taux_Acct) %>%
  filter(Coupe=="C") %>%
  melt(id=c("NumForet")) %>%
  filter(!is.element(variable,c("Coupe","VcHa"))) %>%
  select(-NumForet) %>%
  mutate(Population="Gain")
}

df_Fin <- rbind(df_Fin1, df_Fin2, df_Fin3) %>%
  mutate(
    variable = as.character(variable),
    variable =  ifelse(variable == "Coupe_Tot", "Prélèvement", variable),

    variable =
      ifelse(
        variable == "AcctGper_Tot" | variable == "AcctVper_Tot",
        "Accroissement", variable
      ),
    variable =
      ifelse(
        variable == "PartTot_AcctGper_Tot" | variable == "PartTot_AcctVper_Tot",
        # "\\rowcolor{LightGray} \\% Acct prélevé",variable),
        "\\% Acct prélevé", variable
      ),
    variable =
      ifelse(
        variable == "Part_AcctGper_Tot" | variable == "Part_AcctVper_Tot",
        # "\\rowcolor{LightGray} dont chablis",variable),
        "dont chablis", variable
      ),
    variable =
      ifelse(variable == "Taux_Acct",
             # "\\rowcolor{LightGray} Taux d'accroissement",variable),
             "Taux d'accroissement", variable
      ),

    variable = ifelse(variable == "Gainper_Tot", "Accroissement", variable),
    variable =
      ifelse(variable == "PartTot_Gainper_Tot", "\\% Acct prélevé", variable),
    # "\\rowcolor{LightGray} \\% Acct prélevé",variable),
    variable =
      ifelse(variable == "Part_Gainper_Tot", "dont chablis", variable),
    # "\\rowcolor{LightGray} dont chablis",variable),

    variable =
      factor(variable,
             levels = c("Accroissement", "Taux d'accroissement",
                        "Prélèvement", "\\% Acct prélevé", "dont chablis"))
  ) %>%
  # "\\rowcolor{LightGray} Taux d'accroissement",
  # "Prélèvement",
  # "\\rowcolor{LightGray} \\% Acct prélevé",
  # "\\rowcolor{LightGray} dont chablis"))) %>%
  dcast(variable ~ Population, value.var = "value") %>%
  rename_(
    " " = "variable",
    "\\textbf{Surface terrière (m2/ha/an)}" = "AcctG",
    "\\textbf{Volume (m3/ha/an)}" = "AcctV",
    "\\textbf{Valeur (\\euro/ha/an)}" = "Gain"
  )




print(
  xtable(
    df_Fin,
    digits = rep(0, dim(df_Fin)[2] + 1),
    align = c("M{0cm}|", "|M{3.5cm}", "|M{2.5cm}", "|M{2.5cm}", "|M{2.5cm}|"),
    caption.placement = "bottom",
    caption =
      paste0(
        "Accroissements et prélèvements en surface terrière, volume et valeur sur la période ",
        Annee_Debut, "-", Annee_Fin
      ),
    label = "Tab_PrelvtTot"
  ),
  # floating=F,
  hline.after = -1:dim(df_Fin)[1],
  sanitize.text.function = function(x){return(x)},
  include.rownames = FALSE,
  # add.to.row=list(
  #   pos=ListPos3,
  #   command=rep("\\cmidrule[0.8pt]{1-2}",length(ListPos3))
  #   ),
  size = "\\footnotesize"
)


@

<<Histo_PrelvtTot, echo=F, warning=F, fig.height=3, fig.cap=paste0("Répartition du prélèvement en surface terrière et en valeur (période ",Cycles_Disp$Annee[Cycles_Disp$Cycle==1],"-",Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle],")"), fig.pos="H", results='asis', eval=Eval_Evol, include=Eval_Evol>>=
# t0 <- filter(gfForetFpied_,
#             NumForet==Choix & is.element(Cycle,c(1,DernierCycle))) %>%
#   select(NumForet,Cycle,Gha,VcHa) %>%
#   melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ variable + Cycle)
#
# # %%%%%%%%%%%%%%% Pourquoi des E ou C avec des AcctGper/Gainper négatifs ?
#
#
#
# df1 <- filter(Cycles,
#              NumForet==Choix) %>%
#   select(Cycle,Annee)
# df2 <- filter(Cycles,
#              NumForet==Choix & Cycle!=1) %>%
#   select(Cycle,Annee) %>%
#   mutate(Cycle=Cycle-1) %>%
#   rename(Annee_Post=Annee)
# df3 <- full_join(df1,df2) %>%
#   filter(Cycle!=DernierCycle) %>%
#   mutate(Annee_Post=ifelse(is.na(Annee_Post),
#                           0,Annee_Post),
#          Ecart=Annee_Post-Annee) %>%
#   select(Cycle,Ecart)



df_E <- filter(gfForetDen_Coupe,
             NumForet==Choix) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Cycle=ifelse(Cycle!=DernierCycle,
                      1,DernierCycle)) %>%
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Gha=sum(Gha,na.rm=T),
            VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  filter(!is.na(Coupe) & Cycle < DernierCycle) %>%
  select(NumForet,Coupe,Gha,VcHa)

# ----- Sécurités au cas où prélèvement(s) serai(en)t manquants
if (dim(df_E)[1]==0) {
  df_temp <- data.frame(NumForet=Choix,
                        Coupe="C",
                        Gha=0,
                        VcHa=0,
                        stringsAsFactors=F)
  df_E <- rbind(df_E,
                df_temp)
}

if (length(which(df_E$Coupe=="C"))==0) {
  df_temp <- mutate(df_E,
                    Coupe="C",
                    Gha=0,
                    VcHa=0)
  df_E <- rbind(df_E,
                df_temp)
}

df_E1 <- select(df_E,
                NumForet,Coupe,Gha)
df_E2 <- select(df_E,
                NumForet,Coupe,VcHa)






if ((protoc_CHG | plac_CHG) & DernierCycle == 2) {
  df1 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle == 2) %>%
  # rename(
  #   AcctGper_Tot = AcctGper,
  #   AcctVper_Tot = AcctVper,
  #   Gainper_Tot = Gainper
  # ) %>%
  mutate(Cycle = 1) %>%
  select(NumForet, Cycle, AcctGper, Gainper)

df2 <-
  gfForetDen_ %>%
  filter(NumForet == Choix & Cycle == 1) %>%
  select(NumForet, Cycle, Gha, Vha, VcHa) %>%
  left_join(df1) %>%
  rename(
    Gha_Tot = Gha,
    VcHa_Tot = VcHa#,

    # AcctGper_Tot = AcctGper,
    # AcctVper_Tot = AcctVper,
    # Gainper_Tot = Gainper
  ) %>%
  left_join(df_E) %>%
  select(
    NumForet, Cycle,
    Gha_Tot, VcHa_Tot,
    AcctGper, Gainper,
    # AcctGper_Tot, AcctVper_Tot, Gainper_Tot,
    Coupe, Gha, VcHa
  )

# ---
df_Fin1 <-
  df2 %>%
  group_by(NumForet,Cycle) %>%
  mutate(Coupe_Tot = sum(Gha)) %>%
  ungroup() %>%
  mutate(
    AcctGper_Tot = AcctGper * Annee_Ecart,
    Part_AcctGper_Tot=round(Gha / AcctGper_Tot, 2)
  ) %>%
  select(NumForet, Coupe, Part_AcctGper_Tot)

df_Fin2 <-
  df2 %>%
  group_by(NumForet,Cycle) %>%
  mutate(Coupe_Tot = sum(VcHa)) %>%
  ungroup() %>%
  mutate(
    Gainper_Tot = Gainper * Annee_Ecart,
    Part_Gainper_Tot = round(VcHa / Gainper_Tot, 2)
  ) %>%
  select(NumForet,Coupe,Part_Gainper_Tot)
} else {
df4 <- filter(gfForetDen_,
             NumForet==Choix & is.element(Cycle,c(1,DernierCycle))) %>%
  # mutate(Coupe=gsub("PF/","",Coupe),
  #        Coupe=gsub("PF","",Coupe),
  #        Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  # group_by(NumForet,Cycle,Coupe) %>%
  # summarise(Gha=sum(Gha,na.rm=T),
  #           VcHa=sum(VcHa,na.rm=T)) %>%
  # ungroup() %>%
  rename(Gha_Tot=Gha,
         VcHa_Tot=VcHa) %>%
  select(NumForet,Cycle,Gha_Tot,VcHa_Tot) %>%
  mutate(Cycle=ifelse(Cycle==1,"Debut","Fin"))

df_Bilan1 <- select(df4,
                    NumForet,Cycle,Gha_Tot) %>%
  # melt(id=c("NumForet","Cycle")) %>%
  dcast(NumForet ~ Cycle, value.var="Gha_Tot")
  # mutate(Coupe=Total)

df_Bilan2 <- select(df4,
                    NumForet,Cycle,VcHa_Tot) %>%
  # melt(id=c("NumForet","Cycle")) %>%
  dcast(NumForet ~ Cycle, value.var="VcHa_Tot")

df_Fin1 <- left_join(df_E1,df_Bilan1) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot=sum(Gha)) %>%
  ungroup() %>%
  mutate(AcctGper_Tot=Fin-Debut+Coupe_Tot,
         Part_AcctGper_Tot=round(Gha/AcctGper_Tot,2)) %>%
  select(NumForet,Coupe,Part_AcctGper_Tot)

df_Fin2 <- left_join(df_E2,df_Bilan2) %>%
  group_by(NumForet) %>%
  mutate(Coupe_Tot=sum(VcHa)) %>%
  ungroup() %>%
  mutate(Gainper_Tot=Fin-Debut+Coupe_Tot,
         Part_Gainper_Tot=round(VcHa/Gainper_Tot,2)) %>%
  select(NumForet,Coupe,Part_Gainper_Tot)
}

# N.B : pas besoin de diviser par la période puisqu'elle est la même pour toutes les variables et que je m'intéresse au relatif !
df_Fin <- left_join(df_Fin1,df_Fin2) %>%
  melt(id=c("NumForet","Coupe")) %>%
  mutate(Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
         Coupe=factor(Coupe,levels=c("Exploité","Chablis")),

         variable=ifelse(variable=="Part_AcctGper_Tot",
                         "Surface terrière","Valeur"),
         variable=factor(variable,levels=c("Surface terrière","Valeur")))

Palette_Prelvt <- c("darkgoldenrod","dodgerblue2")
names(Palette_Prelvt) <- c("Exploité","Chablis")

Y_MAX <-
  df_Fin %>%
  group_by(NumForet, variable) %>%
  summarise(value_MAX = sum(value, na.rm = T)) %>%
  ungroup() %>%
  select(value_MAX) %>%
  unlist()
Y_MAX = max(Y_MAX)

# Y <- ifelse(max(df_Fin$value,na.rm=T) > 1.5,
#             max(df_Fin$value,na.rm=T),
#             1.5)
Y <- ifelse(Y_MAX > 1.5, Y_MAX, 1.5)
by_VALUE <- ifelse(Y > 1.3, 0.25, 0.1)

ggplot() +
  geom_bar(df_Fin,
           mapping=aes(variable,value,fill=Coupe),
           stat="identity",position="stack",
           width=.5,colour="gray50") +
  geom_hline(yintercept=1,
             colour="gray30",
             linetype=2,
             size=0.5) +
  scale_y_continuous(name="Part de l'accroissement prélevé",
                     limits=c(0,Y),
                     breaks=seq(0,Y*1.3,by_VALUE),
                     labels=percent) +
  scale_fill_manual(name="", #Mode de\nprélèvement
                    values=Palette_Prelvt) +
  # labs(x="") +
  # guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(axis.title.x=element_blank())
@

<<Tab_Prelvt, echo=F, warning=F, size='footnotesize', results='asis', eval=Eval_Evol, include=Eval_Evol>>=

CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))

# -- Ordre des essences
# order_DF <- filter(gfForetDen_Essence,
#                    NumForet==Choix & Cycle==DernierCycle) %>%
#   arrange(desc(Gha))
# Essence_ORDER <- order_DF$Essence
# Palette_Essence <- Palette_Essence[c(which(is.element(names(Palette_Essence),Essence_ORDER)),
#                                      which(!is.element(names(Palette_Essence),Essence_ORDER)))]

# Palette_Essence <- Palette_Essence[c(Essence_ORDER,
#                                      names(Palette_Essence)[which(!is.element(names(Palette_Essence),Essence_ORDER))])]

# %%%%%%%%%% Taux par essences
df1 <- filter(gfForetDen_EssRegCoupe,
              NumForet==Choix & Cycle == DernierCycle-1)

Prelvt_ALIBI <- expand.grid(NumForet=Choix,
                             Cycle=DernierCycle-1,
                             EssReg=unique(df1$EssReg),
                             Coupe=c("C","E"),
                             stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         EssReg=as.character(EssReg)) %>%
  arrange(Cycle,NumForet)

df1 <- filter(gfForetDen_EssRegCoupe,
              NumForet==Choix & Cycle==DernierCycle-1) %>%
  full_join(Prelvt_ALIBI) %>%
  rename(Essence=EssReg) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Essence,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
  # Rassemble les E (si trace de "PF/E" et "E" en même temps)
  group_by(NumForet,Cycle,Essence,Coupe) %>%
  summarise(Gha=sum(Gha,na.rm=T),
         Vha=sum(Vha,na.rm=T),
         VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  #
  group_by(NumForet,Cycle,Essence) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  group_by(NumForet,Cycle,Essence) %>%
  mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
         VhaCoupe_Tot=sum(Vha,na.rm=T),
         VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Essence) %>%
  mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
         VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
         VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
  ungroup() %>%
  mutate(Cycle=Cycle+1,

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
                              round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
                              round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
                               round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),

         Gha=ifelse(Gha > 0.1,
                    round(Gha,1),round(Gha,2)),
         Vha=ifelse(Vha > 0.1,
                    round(Vha,1),round(Vha,2)),
         VcHa=ifelse(VcHa > 0.1,
                     round(VcHa,0),round(VcHa,0))) %>%
  dplyr::select(NumForet,Essence,Cycle,Coupe,
                Gha,Vha,VcHa,
                GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
  melt(id=c("NumForet","Essence","Cycle","Coupe",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  dcast(NumForet + Essence + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
  mutate(C_Gha=ifelse(is.na(C_Gha),
                            0,C_Gha),
         C_Vha=ifelse(is.na(C_Vha),
                            0,C_Vha),
         C_VcHa=ifelse(is.na(C_VcHa),
                             0,C_VcHa),

         E_Gha=ifelse(is.na(E_Gha),
                            0,E_Gha),
         E_Vha=ifelse(is.na(E_Vha),
                            0,E_Vha),
         E_VcHa=ifelse(is.na(E_VcHa),
                             0,E_VcHa),

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
                              paste0(GhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
                              paste0(VhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
                               paste0(VcHaCoupe_Taux,
                                      "\\%"),
                               NA)) %>%
  melt(id=c("NumForet","Essence","Cycle",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  group_by(NumForet,Cycle,variable) %>%
  mutate(Tot=sum(value),
         Part=ifelse(Tot > 0,
                     value/Tot,NA),
         Part=round(Part*100,0),

         value=ifelse(value > 0,
                      paste0(value,
                             " \\scriptsize{\\textcolor{CornflowerBlue}{(",
                             Part,
                             "\\%)}}"),
                      NA),

         Part=NULL,
         Tot=NULL) %>%
  ungroup() %>%
  dcast(NumForet + Essence + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
  mutate(Essence=factor(Essence,
                        levels=names(Palette_Essence))) %>%
  arrange(Essence) %>%
  mutate(Essence=as.character(Essence)) %>%
  # rename_("Gha"="E_Gha_Coupe",
  #         "Vha"="E_Vha_Coupe",
  #         "VcHa"="E_VcHa_Coupe",
  #         "Taux_Gha"="E_GhaCoupe_Taux",
  #         "Taux_Vha"="E_VhaCoupe_Taux",
  #         "Taux_VcHa"="E_VcHaCoupe_Taux",
  #         "Variable"="Essence") %>%
  rename_("Variable"="Essence") %>%
  dplyr::select(Variable,
                E_Gha,C_Gha,GhaCoupe_Taux,
                E_Vha,C_Vha,VhaCoupe_Taux,
                E_VcHa,C_VcHa,VcHaCoupe_Taux)

#   rename(Essence=EssReg) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
#   dplyr::select(NumForet,Essence,Cycle,
#                 Coupe,Gha,Vha,VcHa) %>%
#   group_by(NumForet,Cycle,Essence) %>%
#   mutate(Gha_Tot=sum(Gha,na.rm=T),
#          Vha_Tot=sum(Vha,na.rm=T),
#          VcHa_Tot=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(is.element(Coupe,c("E","C"))) %>%
#   group_by(NumForet,Cycle,Essence) %>%
#   mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
#          VhaCoupe_Tot=sum(Vha,na.rm=T),
#          VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
#   group_by(NumForet,Cycle,Essence) %>%
#   mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
#          VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
#          VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
#   ungroup() %>%
#   mutate(Cycle=Cycle+1,
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
#                               round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
#                               round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
#                                round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),
#
#          Gha=ifelse(Gha > 0.1,
#                     round(Gha,1),round(Gha,2)),
#          Vha=ifelse(Vha > 0.1,
#                     round(Vha,1),round(Vha,2)),
#          VcHa=ifelse(VcHa > 0.1,
#                      round(VcHa,0),round(VcHa,0))) %>%
#   dplyr::select(NumForet,Essence,Cycle,Coupe,
#                 Gha,Vha,VcHa,
#                 GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
#   melt(id=c("NumForet","Essence","Cycle","Coupe",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   dcast(NumForet + Essence + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
#   mutate(C_Gha=ifelse(is.na(C_Gha),
#                             0,C_Gha),
#          C_Vha=ifelse(is.na(C_Vha),
#                             0,C_Vha),
#          C_VcHa=ifelse(is.na(C_VcHa),
#                              0,C_VcHa),
#
#          E_Gha=ifelse(is.na(E_Gha),
#                             0,E_Gha),
#          E_Vha=ifelse(is.na(E_Vha),
#                             0,E_Vha),
#          E_VcHa=ifelse(is.na(E_VcHa),
#                              0,E_VcHa),
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
#                               paste0(GhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
#                               paste0(VhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
#                                paste0(VcHaCoupe_Taux,
#                                       "\\%"),
#                                NA)) %>%
#   melt(id=c("NumForet","Essence","Cycle",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   group_by(NumForet,Cycle,variable) %>%
#   mutate(Tot=sum(value),
#          Part=ifelse(Tot > 0,
#                      value/Tot,NA),
#          Part=round(Part*100,0),
#
#          value=ifelse(value > 0,
#                       paste0(value,
#                              " \\scriptsize{\\textcolor{CornflowerBlue}{(",
#                              Part,
#                              "\\%)}}"),
#                       NA),
#
#          Part=NULL,
#          Tot=NULL) %>%
#   ungroup() %>%
#   dcast(NumForet + Essence + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
#   mutate(Essence=factor(Essence,levels=names(Palette_Essence))) %>%
#   arrange(Essence) %>%
#   mutate(Essence=as.character(Essence)) %>%
#   # rename_("Gha"="E_Gha_Coupe",
#   #         "Vha"="E_Vha_Coupe",
#   #         "VcHa"="E_VcHa_Coupe",
#   #         "Taux_Gha"="E_GhaCoupe_Taux",
#   #         "Taux_Vha"="E_VhaCoupe_Taux",
#   #         "Taux_VcHa"="E_VcHaCoupe_Taux",
#   #         "Variable"="Essence") %>%
#   rename_("Variable"="Essence") %>%
#   dplyr::select(Variable,
#                 E_Gha,C_Gha,GhaCoupe_Taux,
#                 E_Vha,C_Vha,VhaCoupe_Taux,
#                 E_VcHa,C_VcHa,VcHaCoupe_Taux)
#
# pos1 <- dim(df1)[1]

pos1 <- dim(df1)[1]



# %%%%%%%%%% Taux par catégories de diamètre
# Alibi pour les types de prélèvement (Cat):
df2 <- filter(gfForetDen_CatCoupe,
              NumForet==Choix & Cycle==DernierCycle-1)

Prelvt_ALIBI <- expand.grid(NumForet=Choix,
                             Cycle=DernierCycle-1,
                             Cat=unique(df2$Cat),
                             Coupe=c("C","E"),
                             stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Cat=as.character(Cat)) %>%
  arrange(Cycle,NumForet)


df2 <- filter(gfForetDen_CatCoupe,
              NumForet==Choix & Cycle==DernierCycle-1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Cat,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
    # Rassemble les E (si trace de "PF/E" et "E" en même temps)
  group_by(NumForet,Cycle,Cat,Coupe) %>%
  summarise(Gha=sum(Gha,na.rm=T),
         Vha=sum(Vha,na.rm=T),
         VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  #


  group_by(NumForet,Cycle,Cat) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  group_by(NumForet,Cycle,Cat) %>%
  mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
         VhaCoupe_Tot=sum(Vha,na.rm=T),
         VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Cat) %>%
  mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
         VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
         VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
  ungroup() %>%
  mutate(Cycle=Cycle+1,

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
                              round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
                              round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
                               round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),

         Gha=ifelse(Gha > 0.1,
                    round(Gha,1),round(Gha,2)),
         Vha=ifelse(Vha > 0.1,
                    round(Vha,1),round(Vha,2)),
         VcHa=ifelse(VcHa > 0.1,
                     round(VcHa,0),round(VcHa,0))) %>%
  dplyr::select(NumForet,Cat,Cycle,Coupe,
                Gha,Vha,VcHa,
                GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
  melt(id=c("NumForet","Cat","Cycle","Coupe",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  dcast(NumForet + Cat + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
  mutate(C_Gha=ifelse(is.na(C_Gha),
                            0,C_Gha),
         C_Vha=ifelse(is.na(C_Vha),
                            0,C_Vha),
         C_VcHa=ifelse(is.na(C_VcHa),
                             0,C_VcHa),

         E_Gha=ifelse(is.na(E_Gha),
                            0,E_Gha),
         E_Vha=ifelse(is.na(E_Vha),
                            0,E_Vha),
         E_VcHa=ifelse(is.na(E_VcHa),
                             0,E_VcHa),

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
                              paste0(GhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
                              paste0(VhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
                               paste0(VcHaCoupe_Taux,
                                      "\\%"),
                               NA)) %>%
  melt(id=c("NumForet","Cat","Cycle",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  group_by(NumForet,Cycle,variable) %>%
  mutate(Tot=sum(value),
         Part=ifelse(Tot > 0,
                     value/Tot,NA),
         Part=round(Part*100,0),

         value=ifelse(value > 0,
                      paste0(value,
                             " \\scriptsize{\\textcolor{CornflowerBlue}{(",
                             Part,
                             "\\%)}}"),
                      NA),

         Part=NULL,
         Tot=NULL) %>%
  ungroup() %>%
  dcast(NumForet + Cat + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(Cat) %>%
  mutate(Cat=as.character(Cat)) %>%
  # rename_("Gha"="E_Gha_Coupe",
  #         "Vha"="E_Vha_Coupe",
  #         "VcHa"="E_VcHa_Coupe",
  #         "Taux_Gha"="E_GhaCoupe_Taux",
  #         "Taux_Vha"="E_VhaCoupe_Taux",
  #         "Taux_VcHa"="E_VcHaCoupe_Taux",
  #         "Variable"="Cat") %>%
  rename_("Variable"="Cat") %>%
  dplyr::select(Variable,
                E_Gha,C_Gha,GhaCoupe_Taux,
                E_Vha,C_Vha,VhaCoupe_Taux,
                E_VcHa,C_VcHa,VcHaCoupe_Taux)


  # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  # arrange(Cat) %>%
  # rename(Variable=Cat) %>%
  # mutate(Variable=as.character(Variable))

pos2 <- dim(df2)[1]

# %%%%%%%%%% Taux par qualités regroupée
# Alibi pour les types de prélèvement (Essences) :
df3 <- filter(gfForetDen_Reg2Coupe,
              NumForet==Choix & Cycle==DernierCycle-1)

Prelvt_ALIBI <- expand.grid(NumForet=Choix,
                             Cycle=DernierCycle-1,
                             Reg2=unique(df3$Reg2),
                             Coupe=c("C","E"),
                             stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Reg2=as.character(Reg2)) %>%
  arrange(Cycle,NumForet)

df3 <- filter(gfForetDen_Reg2Coupe,
              NumForet==Choix & Cycle==DernierCycle-1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Reg2,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
    # Rassemble les E (si trace de "PF/E" et "E" en même temps)
  group_by(NumForet,Cycle,Reg2,Coupe) %>%
  summarise(Gha=sum(Gha,na.rm=T),
         Vha=sum(Vha,na.rm=T),
         VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  #


  group_by(NumForet,Cycle,Reg2) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  group_by(NumForet,Cycle,Reg2) %>%
  mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
         VhaCoupe_Tot=sum(Vha,na.rm=T),
         VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Reg2) %>%
  mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
         VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
         VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
  ungroup() %>%
  mutate(Cycle=Cycle+1,

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
                              round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
                              round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
                               round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),

         Gha=ifelse(Gha > 0.1,
                    round(Gha,1),round(Gha,2)),
         Vha=ifelse(Vha > 0.1,
                    round(Vha,1),round(Vha,2)),
         VcHa=ifelse(VcHa > 0.1,
                     round(VcHa,0),round(VcHa,0))) %>%
  dplyr::select(NumForet,Reg2,Cycle,Coupe,
                Gha,Vha,VcHa,
                GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
  melt(id=c("NumForet","Reg2","Cycle","Coupe",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  dcast(NumForet + Reg2 + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
  mutate(C_Gha=ifelse(is.na(C_Gha),
                            0,C_Gha),
         C_Vha=ifelse(is.na(C_Vha),
                            0,C_Vha),
         C_VcHa=ifelse(is.na(C_VcHa),
                             0,C_VcHa),

         E_Gha=ifelse(is.na(E_Gha),
                            0,E_Gha),
         E_Vha=ifelse(is.na(E_Vha),
                            0,E_Vha),
         E_VcHa=ifelse(is.na(E_VcHa),
                             0,E_VcHa),

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
                              paste0(GhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
                              paste0(VhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
                               paste0(VcHaCoupe_Taux,
                                      "\\%"),
                               NA)) %>%
  melt(id=c("NumForet","Reg2","Cycle",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  group_by(NumForet,Cycle,variable) %>%
  mutate(Tot=sum(value),
         Part=ifelse(Tot > 0,
                     value/Tot,NA),
         Part=round(Part*100,0),

         value=ifelse(value > 0,
                      paste0(value,
                             " \\scriptsize{\\textcolor{CornflowerBlue}{(",
                             Part,
                             "\\%)}}"),
                      NA),

         Part=NULL,
         Tot=NULL) %>%
  ungroup() %>%
  dcast(NumForet + Reg2 + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
  mutate(Reg2=factor(Reg2,levels=c("A+B","C+D"))) %>%
  arrange(Reg2) %>%
  mutate(Reg2=as.character(Reg2)) %>%
  # rename_("Gha"="E_Gha_Coupe",
  #         "Vha"="E_Vha_Coupe",
  #         "VcHa"="E_VcHa_Coupe",
  #         "Taux_Gha"="E_GhaCoupe_Taux",
  #         "Taux_Vha"="E_VhaCoupe_Taux",
  #         "Taux_VcHa"="E_VcHaCoupe_Taux",
  #         "Variable"="Reg2") %>%
  rename_("Variable"="Reg2") %>%
  dplyr::select(Variable,
                E_Gha,C_Gha,GhaCoupe_Taux,
                E_Vha,C_Vha,VhaCoupe_Taux,
                E_VcHa,C_VcHa,VcHaCoupe_Taux)


  # dplyr::select(Reg2,
  #               Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa) %>%
  # mutate(Reg2=factor(Reg2,levels=c("A+B","C+D"))) %>%
  # arrange(Reg2) %>%
  # rename(Variable=Reg2) %>%
  # mutate(Variable=as.character(Variable))

pos3 <- dim(df3)[1]

# %%%%%%%%%% Taux par années
# Alibi pour les types de prélèvement (Essences) :
df4 <- filter(gfForetDen_Coupe,
              NumForet==Choix & Cycle==DernierCycle-1)

Prelvt_ALIBI <- expand.grid(NumForet=Choix,
                             Cycle=DernierCycle-1,
                             Coupe=c("C","E"),
                             stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe)) %>%
  arrange(Cycle,NumForet)

df4 <- filter(gfForetDen_Coupe,
              NumForet==Choix & Cycle==DernierCycle-1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
    # Rassemble les E (si trace de "PF/E" et "E" en même temps)
  group_by(NumForet,Cycle,Coupe) %>%
  summarise(Gha=sum(Gha,na.rm=T),
         Vha=sum(Vha,na.rm=T),
         VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  #


  group_by(NumForet,Cycle) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  group_by(NumForet,Cycle) %>%
  mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
         VhaCoupe_Tot=sum(Vha,na.rm=T),
         VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle) %>%
  mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
         VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
         VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
  ungroup() %>%
  mutate(Cycle=Cycle+1,

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
                              round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
                              round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
                               round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),

         Gha=ifelse(Gha > 0.1,
                    round(Gha,1),round(Gha,2)),
         Vha=ifelse(Vha > 0.1,
                    round(Vha,1),round(Vha,2)),
         VcHa=ifelse(VcHa > 0.1,
                     round(VcHa,0),round(VcHa,0))) %>%
  dplyr::select(NumForet,Cycle,Coupe,
                Gha,Vha,VcHa,
                GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
  melt(id=c("NumForet","Cycle","Coupe",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  dcast(NumForet + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
  mutate(C_Gha=ifelse(is.na(C_Gha),
                      0,C_Gha),
         C_Vha=ifelse(is.na(C_Vha),
                      0,C_Vha),
         C_VcHa=ifelse(is.na(C_VcHa),
                       0,C_VcHa),

         E_Gha=ifelse(is.na(E_Gha),
                      0,E_Gha),
         E_Vha=ifelse(is.na(E_Vha),
                      0,E_Vha),
         E_VcHa=ifelse(is.na(E_VcHa),
                       0,E_VcHa),

         # E_Gha=ifelse(E_Gha > 0,
         #              paste0("\\textbf{\\textcolor{white}{",
         #                     E_Gha,
         #                     "}}"),NA),
         # E_Vha=ifelse(E_Vha > 0,
         #              paste0("\\textbf{\\textcolor{white}{",
         #                     E_Vha,
         #                     "}}"),NA),
         # E_VcHa=ifelse(E_VcHa > 0,
         #               paste0("\\textbf{\\textcolor{white}{",
         #                      E_VcHa,
         #                      "}}"),NA),
         #
         # C_Gha=ifelse(C_Gha > 0,
         #              paste0("\\textbf{\\textcolor{white}{",
         #                     C_Gha,
         #                     "}}"),NA),
         # C_Vha=ifelse(C_Vha > 0,
         #              paste0("\\textbf{\\textcolor{white}{",
         #                     C_Vha,
         #                     "}}"),NA),
         # C_VcHa=ifelse(C_VcHa > 0,
         #               paste0("\\textbf{\\textcolor{white}{",
         #                      C_VcHa,
         #                      "}}"),NA),

         GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
                              paste0(GhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
                              paste0(VhaCoupe_Taux,
                                     "\\%"),
                              NA),
         VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
                               paste0(VcHaCoupe_Taux,
                                      "\\%"),
                               NA)) %>%
  melt(id=c("NumForet","Cycle",
            "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
  mutate(value=ifelse(value > 0,
                      value,
                      NA)) %>%
  # group_by(NumForet,Cycle,variable) %>%
  # mutate(Tot=sum(value),
  #        Part=ifelse(Tot > 0,
  #                    value/Tot,NA),
  #        Part=round(Part*100,0),
  #
  #        value=ifelse(value > 0,
  #                     paste0(value,
  #                            " \\textcolor{CornflowerBlue}{(",
  #                            Part,
  #                            "\\%}"),
  #                     NA),
  #
  #        Part=NULL,
  #        Tot=NULL) %>%
  dcast(NumForet + Cycle +
          GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  rename_("Variable"="Periodes") %>%
  dplyr::select(Variable,
                E_Gha,C_Gha,GhaCoupe_Taux,
                E_Vha,C_Vha,VhaCoupe_Taux,
                E_VcHa,C_VcHa,VcHaCoupe_Taux)


pos4 <- dim(df4)[1]

Periode <- paste0("\\textbf{",df4$Variable,"}")


df4[pos4,1] <- "Total"
pos <- which(!is.na(df4[pos4,]))
if (length(pos) > 0) {
  df4[pos4, pos] <- paste0("\\textbf{\\textcolor{white}{",df4[pos4, pos],"}}")
}
df4[pos4,1] <- paste0("\\rowcolor{DimGray} ",df4[pos4,1])
















# Question : si on veut avoir le prélèvement sur une plus grande période, quelles valeurs considérer ? le prélèvement moyen par an ? sur toute la période ?














































# %%%%%%%%%%%%%% Total
# --- Ecart (temps en années)
# Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle]
# Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle==1]
# Annee_Ecart <- Annee_Fin-Annee_Debut
#
# df_E <- filter(gfForetDen_Coupe,
#              NumForet==Choix) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe),
#          Cycle=ifelse(Cycle!=DernierCycle,
#                       1,DernierCycle)) %>%
#   group_by(NumForet,Cycle,Coupe) %>%
#   summarise(Gha=sum(Gha,na.rm=T),
#             Vha=sum(Vha,na.rm=T),
#             VcHa=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(!is.na(Coupe)) %>%
#   select(NumForet,Coupe,Gha,Vha,VcHa)
#
# # ----- Sécurités au cas où prélèvement(s) serai(en)t manquants
# if (dim(df_E)[1]==0) {
#   df_temp <- data.frame(NumForet=Choix,
#                         Coupe="C",
#                         Gha=0,
#                         Vha=0,
#                         VcHa=0,
#                         stringsAsFactors=F)
#   df_E <- rbind(df_E,
#                 df_temp)
# }
#
# if (length(which(df_E$Coupe=="C"))==0) {
#   df_temp <- mutate(df_E,
#                     Coupe="C",
#                     Gha=0,
#                     Vha=0,
#                     VcHa=0)
#   df_E <- rbind(df_E,
#                 df_temp)
# }
#
# df_E1 <- select(df_E,
#                 NumForet,Coupe,Gha)
# df_E2 <- select(df_E,
#                 NumForet,Coupe,Vha)
# df_E3 <- select(df_E,
#                 NumForet,Coupe,VcHa)
#
# df5 <- filter(gfForetDen_,
#              NumForet==Choix & is.element(Cycle,c(1,DernierCycle))) %>%
#   rename(Gha_Tot=Gha,
#          Vha_Tot=Vha,
#          VcHa_Tot=VcHa) %>%
#   select(NumForet,Cycle,Gha_Tot,Vha_Tot,VcHa_Tot) %>%
#   mutate(Cycle=ifelse(Cycle==1,"Debut","Fin"))
#
# df_Bilan1 <- select(df5,
#                     NumForet,Cycle,Gha_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="Gha_Tot")
#   # mutate(Coupe=Total)
#
# df_Bilan2 <- select(df5,
#                     NumForet,Cycle,Vha_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="Vha_Tot")
#
# df_Bilan3 <- select(df5,
#                     NumForet,Cycle,VcHa_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="VcHa_Tot")
#
# df_Fin1 <- left_join(df_E1,df_Bilan1) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(Gha)) %>%
#   ungroup() %>%
#   mutate(AcctGper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,AcctGper_Tot)
#
# df_Fin2 <- left_join(df_E2,df_Bilan2) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(Vha)) %>%
#   ungroup() %>%
#   mutate(AcctVper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,AcctVper_Tot)
#
# df_Fin3 <- left_join(df_E3,df_Bilan3) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(VcHa)) %>%
#   ungroup() %>%
#   mutate(Gainper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,Gainper_Tot)
#
# df_Fin <- filter(gfForetDen_,
#              NumForet==Choix & Cycle==1) %>%
#   select(Cycle,Gha,Vha,VcHa) %>%
#   left_join(df_Fin1) %>%
#   left_join(df_Fin2) %>%
#   left_join(df_Fin3) %>%
#   distinct() %>%
#   rename(AcctGper=AcctGper_Tot,
#          AcctVper=AcctVper_Tot,
#          Gainper=Gainper_Tot) %>%
#   mutate(Gha=ifelse(Gha < 0,
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#   mutate(AcctGper=round(AcctGper,digits=2),
#          AcctVper=round(AcctVper,digits=1),
#          Gainper=round(Gainper,digits=0),
#
#          Taux_G=round(AcctGper/Gha*100,1),
#          Taux_G=formatC(Taux_G, format="f", digits=1),
#          Taux_G=ifelse(AcctGper!=0,
#                        paste0(Taux_G," \\%"),
#                        ""),
#          Taux_V=round(AcctVper/Vha*100,1),
#          Taux_V=formatC(Taux_V, format="f", digits=1),
#          Taux_V=ifelse(AcctVper!=0,
#                        paste0(Taux_V," \\%"),
#                        ""),
#          Taux_Vc=round(Gainper/VcHa*100,1),
#          Taux_Vc=formatC(Taux_Vc, format="f", digits=1),
#          Taux_Vc=ifelse(Gainper!=0,
#                        paste0(Taux_Vc," \\%"),
#                        ""),
#
#          AcctGper=ifelse(AcctGper==0,
#                          NA,
#                          formatC(AcctGper, format="f", digits=2)),
#          AcctVper=ifelse(AcctVper==0,
#                          NA,
#                          formatC(AcctVper, format="f", digits=1)),
#          Gainper=ifelse(Gainper==0,
#                          NA,
#                         formatC(Gainper, format="f", digits=0))) %>%
#   dplyr::select(Periodes,AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc) %>%
#   arrange(Periodes) %>%
#   rename(Variable=Periodes) %>%
#   mutate(Variable=as.character(Variable))
#
# posFin <- dim(df_Fin)[1]
#   df_Fin[posFin,] <- paste0("\\textbf{\\textcolor{white}{",df_Fin[posFin,],"}}")
#   df_Fin[posFin,1] <- paste0("\\rowcolor{DimGray} ",df_Fin[posFin,1])


































  # if (DernierCycle > 2) {
  # df <- rbind(df1,df2,df3,df_Fin) %>%
  # rename_("\\textbf{}"="Variable",
  #         "\\textbf{Taux G}"="Taux_G",
  #         "\\textbf{Taux V}"="Taux_V",
  #         "\\textbf{Taux Vc}"="Taux_Vc",
  #
  #         "\\textbf{AcctG}"="AcctGper",
  #         "\\textbf{AcctV}"="AcctVper",
  #         "\\textbf{Gain}"="Gainper")
  # }
  #   if (DernierCycle == 2) {
  df <- rbind(df1,df2,df3,df4) %>%
  rename_(Periode="Variable",

          "\\textbf{Taux G prélevé (E+C)}"="GhaCoupe_Taux",
          "\\textbf{Taux V prélevé (E+C)}"="VhaCoupe_Taux",
          "\\textbf{Taux Vc prélevé (E+C)}"="VcHaCoupe_Taux",

          "\\textbf{G Exploité}"="E_Gha",
          "\\textbf{V Exploité}"="E_Vha",
          "\\textbf{Vc Exploité}"="E_VcHa",

          "\\textbf{G Chablis}"="C_Gha",
          "\\textbf{V Chablis}"="C_Vha",
          "\\textbf{Vc Chablis}"="C_VcHa")
  # }
names(df)[1] <- Periode

# %%%%%%%%%% Impression tableau
  if (DernierCycle > 2) {
    pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
  }
  if (DernierCycle == 2) {
pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
}
# cat("\\begin{table}[h]
#     \\centering")


print(xtable(df,
             digits=rep(1,dim(df)[2]+1),
             align=c("M{0cm}|","|M{2cm}","|M{1.3cm}","|M{1.2cm}","|M{1cm}|","|M{1.3cm}","|M{1.2cm}","|M{1cm}|","|M{1.4cm}","|M{1.2cm}","|M{1.1cm}|"),
             caption.placement = "bottom",
             caption = "Taux de prélèvements sur la période par essences, par catégories de diamètre, et par qualités\\\\\\footnotesize{Taux G prélevé : taux de prélèvement par rapport à la surface terrière initiale\\\\Taux V prélevé : taux de prélèvement par rapport au volume initial\\\\Taux Vc prélevé: taux de prélèvement par rapport à la valeur de consommation initiale}",
             label = "Tab_Prelvt"),
      floating=T,
      table.placement="H",
      hline.after=pos_LINES,
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")

# %%%%%%%%%% Taux par catégories de diamètre

# df2 <- filter(gfForetDen_CatCoupe,
#               NumForet==Choix & Cycle==DernierCycle-1) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
#   dplyr::select(NumForet,Cat,Cycle,
#                 Coupe,Gha,Vha,VcHa) %>%
#   group_by(NumForet,Cycle,Cat) %>%
#   mutate(Gha_Tot=sum(Gha,na.rm=T),
#          Vha_Tot=sum(Vha,na.rm=T),
#          VcHa_Tot=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(is.element(Coupe,c("E","C"))) %>%
#   group_by(NumForet,Cycle,Cat) %>%
#   mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
#          VhaCoupe_Tot=sum(Vha,na.rm=T),
#          VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
#   group_by(NumForet,Cycle,Cat) %>%
#   mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
#          VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
#          VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
#   ungroup() %>%
#   mutate(Cycle=Cycle+1,
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
#                               round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
#                               round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
#                                round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),
#
#          Gha=ifelse(Gha > 0.1,
#                     round(Gha,1),round(Gha,2)),
#          Vha=ifelse(Vha > 0.1,
#                     round(Vha,1),round(Vha,2)),
#          VcHa=ifelse(VcHa > 0.1,
#                      round(VcHa,0),round(VcHa,0))) %>%
#   dplyr::select(NumForet,Cat,Cycle,Coupe,
#                 Gha,Vha,VcHa,
#                 GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
#   melt(id=c("NumForet","Cat","Cycle","Coupe",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   dcast(NumForet + Cat + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
#   mutate(C_Gha=ifelse(is.na(C_Gha),
#                             0,C_Gha),
#          C_Vha=ifelse(is.na(C_Vha),
#                             0,C_Vha),
#          C_VcHa=ifelse(is.na(C_VcHa),
#                              0,C_VcHa),
#
#          E_Gha=ifelse(is.na(E_Gha),
#                             0,E_Gha),
#          E_Vha=ifelse(is.na(E_Vha),
#                             0,E_Vha),
#          E_VcHa=ifelse(is.na(E_VcHa),
#                              0,E_VcHa),
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
#                               paste0(GhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
#                               paste0(VhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
#                                paste0(VcHaCoupe_Taux,
#                                       "\\%"),
#                                NA)) %>%
#   melt(id=c("NumForet","Cat","Cycle",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   group_by(NumForet,Cycle,variable) %>%
#   mutate(Tot=sum(value),
#          Part=ifelse(Tot > 0,
#                      value/Tot,NA),
#          Part=round(Part*100,0),
#
#          value=ifelse(value > 0,
#                       paste0(value,
#                              " \\scriptsize{\\textcolor{CornflowerBlue}{(",
#                              Part,
#                              "\\%)}}"),
#                       NA),
#
#          Part=NULL,
#          Tot=NULL) %>%
#   ungroup() %>%
#   dcast(NumForet + Cat + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
#   mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
#   arrange(Cat) %>%
#   mutate(Cat=as.character(Cat)) %>%
#   # rename_("Gha"="E_Gha_Coupe",
#   #         "Vha"="E_Vha_Coupe",
#   #         "VcHa"="E_VcHa_Coupe",
#   #         "Taux_Gha"="E_GhaCoupe_Taux",
#   #         "Taux_Vha"="E_VhaCoupe_Taux",
#   #         "Taux_VcHa"="E_VcHaCoupe_Taux",
#   #         "Variable"="Cat") %>%
#   rename_("Variable"="Cat") %>%
#   dplyr::select(Variable,
#                 E_Gha,C_Gha,GhaCoupe_Taux,
#                 E_Vha,C_Vha,VhaCoupe_Taux,
#                 E_VcHa,C_VcHa,VcHaCoupe_Taux)
#
#
#   # mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
#   # arrange(Cat) %>%
#   # rename(Variable=Cat) %>%
#   # mutate(Variable=as.character(Variable))
#
# pos2 <- dim(df2)[1]
#
# # %%%%%%%%%% Taux par qualités regroupée
#
# df3 <- filter(gfForetDen_Reg2Coupe,
#               NumForet==Choix & Cycle==DernierCycle-1) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
#   dplyr::select(NumForet,Reg2,Cycle,
#                 Coupe,Gha,Vha,VcHa) %>%
#   group_by(NumForet,Cycle,Reg2) %>%
#   mutate(Gha_Tot=sum(Gha,na.rm=T),
#          Vha_Tot=sum(Vha,na.rm=T),
#          VcHa_Tot=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(is.element(Coupe,c("E","C"))) %>%
#   group_by(NumForet,Cycle,Reg2) %>%
#   mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
#          VhaCoupe_Tot=sum(Vha,na.rm=T),
#          VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
#   group_by(NumForet,Cycle,Reg2) %>%
#   mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
#          VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
#          VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
#   ungroup() %>%
#   mutate(Cycle=Cycle+1,
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
#                               round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
#                               round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
#                                round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),
#
#          Gha=ifelse(Gha > 0.1,
#                     round(Gha,1),round(Gha,2)),
#          Vha=ifelse(Vha > 0.1,
#                     round(Vha,1),round(Vha,2)),
#          VcHa=ifelse(VcHa > 0.1,
#                      round(VcHa,0),round(VcHa,0))) %>%
#   dplyr::select(NumForet,Reg2,Cycle,Coupe,
#                 Gha,Vha,VcHa,
#                 GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
#   melt(id=c("NumForet","Reg2","Cycle","Coupe",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   dcast(NumForet + Reg2 + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
#   mutate(C_Gha=ifelse(is.na(C_Gha),
#                             0,C_Gha),
#          C_Vha=ifelse(is.na(C_Vha),
#                             0,C_Vha),
#          C_VcHa=ifelse(is.na(C_VcHa),
#                              0,C_VcHa),
#
#          E_Gha=ifelse(is.na(E_Gha),
#                             0,E_Gha),
#          E_Vha=ifelse(is.na(E_Vha),
#                             0,E_Vha),
#          E_VcHa=ifelse(is.na(E_VcHa),
#                              0,E_VcHa),
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
#                               paste0(GhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
#                               paste0(VhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
#                                paste0(VcHaCoupe_Taux,
#                                       "\\%"),
#                                NA)) %>%
#   melt(id=c("NumForet","Reg2","Cycle",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   group_by(NumForet,Cycle,variable) %>%
#   mutate(Tot=sum(value),
#          Part=ifelse(Tot > 0,
#                      value/Tot,NA),
#          Part=round(Part*100,0),
#
#          value=ifelse(value > 0,
#                       paste0(value,
#                              " \\scriptsize{\\textcolor{CornflowerBlue}{(",
#                              Part,
#                              "\\%)}}"),
#                       NA),
#
#          Part=NULL,
#          Tot=NULL) %>%
#   ungroup() %>%
#   dcast(NumForet + Reg2 + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
#   mutate(Reg2=factor(Reg2,levels=c("A+B","C+D"))) %>%
#   arrange(Reg2) %>%
#   mutate(Reg2=as.character(Reg2)) %>%
#   # rename_("Gha"="E_Gha_Coupe",
#   #         "Vha"="E_Vha_Coupe",
#   #         "VcHa"="E_VcHa_Coupe",
#   #         "Taux_Gha"="E_GhaCoupe_Taux",
#   #         "Taux_Vha"="E_VhaCoupe_Taux",
#   #         "Taux_VcHa"="E_VcHaCoupe_Taux",
#   #         "Variable"="Reg2") %>%
#   rename_("Variable"="Reg2") %>%
#   dplyr::select(Variable,
#                 E_Gha,C_Gha,GhaCoupe_Taux,
#                 E_Vha,C_Vha,VhaCoupe_Taux,
#                 E_VcHa,C_VcHa,VcHaCoupe_Taux)
#
#
#   # dplyr::select(Reg2,
#   #               Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa) %>%
#   # mutate(Reg2=factor(Reg2,levels=c("A+B","C+D"))) %>%
#   # arrange(Reg2) %>%
#   # rename(Variable=Reg2) %>%
#   # mutate(Variable=as.character(Variable))
#
# pos3 <- dim(df3)[1]
#
# # %%%%%%%%%% Taux par années
#
# df4 <- filter(gfForetDen_Coupe,
#               NumForet==Choix & Cycle==DernierCycle-1) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
#   dplyr::select(NumForet,Cycle,
#                 Coupe,Gha,Vha,VcHa) %>%
#   group_by(NumForet,Cycle) %>%
#   mutate(Gha_Tot=sum(Gha,na.rm=T),
#          Vha_Tot=sum(Vha,na.rm=T),
#          VcHa_Tot=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(is.element(Coupe,c("E","C"))) %>%
#   group_by(NumForet,Cycle) %>%
#   mutate(GhaCoupe_Tot=sum(Gha,na.rm=T),
#          VhaCoupe_Tot=sum(Vha,na.rm=T),
#          VcHaCoupe_Tot=sum(VcHa,na.rm=T)) %>%
#   group_by(NumForet,Cycle) %>%
#   mutate(GhaCoupe_Taux=GhaCoupe_Tot/Gha_Tot*100,
#          VhaCoupe_Taux=VhaCoupe_Tot/Vha_Tot*100,
#          VcHaCoupe_Taux=VcHaCoupe_Tot/VcHa_Tot*100) %>%
#   ungroup() %>%
#   mutate(Cycle=Cycle+1,
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 1,
#                               round(GhaCoupe_Taux,0),round(GhaCoupe_Taux,1)),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 1,
#                               round(VhaCoupe_Taux,0),round(VhaCoupe_Taux,1)),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 1,
#                                round(VcHaCoupe_Taux,0),round(VcHaCoupe_Taux,1)),
#
#          Gha=ifelse(Gha > 0.1,
#                     round(Gha,1),round(Gha,2)),
#          Vha=ifelse(Vha > 0.1,
#                     round(Vha,1),round(Vha,2)),
#          VcHa=ifelse(VcHa > 0.1,
#                      round(VcHa,0),round(VcHa,0))) %>%
#   dplyr::select(NumForet,Cycle,Coupe,
#                 Gha,Vha,VcHa,
#                 GhaCoupe_Taux,VhaCoupe_Taux,VcHaCoupe_Taux) %>%
#   melt(id=c("NumForet","Cycle","Coupe",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   dcast(NumForet + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ Coupe + variable) %>%
#   mutate(C_Gha=ifelse(is.na(C_Gha),
#                       0,C_Gha),
#          C_Vha=ifelse(is.na(C_Vha),
#                       0,C_Vha),
#          C_VcHa=ifelse(is.na(C_VcHa),
#                        0,C_VcHa),
#
#          E_Gha=ifelse(is.na(E_Gha),
#                       0,E_Gha),
#          E_Vha=ifelse(is.na(E_Vha),
#                       0,E_Vha),
#          E_VcHa=ifelse(is.na(E_VcHa),
#                        0,E_VcHa),
#
#          # E_Gha=ifelse(E_Gha > 0,
#          #              paste0("\\textbf{\\textcolor{white}{",
#          #                     E_Gha,
#          #                     "}}"),NA),
#          # E_Vha=ifelse(E_Vha > 0,
#          #              paste0("\\textbf{\\textcolor{white}{",
#          #                     E_Vha,
#          #                     "}}"),NA),
#          # E_VcHa=ifelse(E_VcHa > 0,
#          #               paste0("\\textbf{\\textcolor{white}{",
#          #                      E_VcHa,
#          #                      "}}"),NA),
#          #
#          # C_Gha=ifelse(C_Gha > 0,
#          #              paste0("\\textbf{\\textcolor{white}{",
#          #                     C_Gha,
#          #                     "}}"),NA),
#          # C_Vha=ifelse(C_Vha > 0,
#          #              paste0("\\textbf{\\textcolor{white}{",
#          #                     C_Vha,
#          #                     "}}"),NA),
#          # C_VcHa=ifelse(C_VcHa > 0,
#          #               paste0("\\textbf{\\textcolor{white}{",
#          #                      C_VcHa,
#          #                      "}}"),NA),
#
#          GhaCoupe_Taux=ifelse(GhaCoupe_Taux > 0,
#                               paste0(GhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VhaCoupe_Taux=ifelse(VhaCoupe_Taux > 0,
#                               paste0(VhaCoupe_Taux,
#                                      "\\%"),
#                               NA),
#          VcHaCoupe_Taux=ifelse(VcHaCoupe_Taux > 0,
#                                paste0(VcHaCoupe_Taux,
#                                       "\\%"),
#                                NA)) %>%
#   melt(id=c("NumForet","Cycle",
#             "GhaCoupe_Taux","VhaCoupe_Taux","VcHaCoupe_Taux")) %>%
#   # group_by(NumForet,Cycle,variable) %>%
#   # mutate(Tot=sum(value),
#   #        Part=ifelse(Tot > 0,
#   #                    value/Tot,NA),
#   #        Part=round(Part*100,0),
#   #
#   #        value=ifelse(value > 0,
#   #                     paste0(value,
#   #                            " \\textcolor{CornflowerBlue}{(",
#   #                            Part,
#   #                            "\\%}"),
#   #                     NA),
#   #
#   #        Part=NULL,
#   #        Tot=NULL) %>%
#   dcast(NumForet + Cycle +
#           GhaCoupe_Taux + VhaCoupe_Taux + VcHaCoupe_Taux ~ variable) %>%
#   left_join(CyclesPeriodes_DF,
#             by=c("Cycle"="Cycle_Courant")) %>%
#   rename_("Variable"="Periodes") %>%
#   dplyr::select(Variable,
#                 E_Gha,C_Gha,GhaCoupe_Taux,
#                 E_Vha,C_Vha,VhaCoupe_Taux,
#                 E_VcHa,C_VcHa,VcHaCoupe_Taux)
#
#
# pos4 <- dim(df4)[1]
#
#
#
#
# df4[pos4,] <- paste0("\\textbf{\\textcolor{white}{",df4[pos4,],"}}")
# df4[pos4,1] <- paste0("\\rowcolor{DimGray} ",df4[pos4,1])
#
#
#   if (DernierCycle > 2) {
#   df <- rbind(df1,df2,df3,df_Fin) %>%
#   rename_("\\textbf{}"="Variable",
#           "\\textbf{Taux G}"="Taux_G",
#           "\\textbf{Taux V}"="Taux_V",
#           "\\textbf{Taux Vc}"="Taux_Vc",
#
#           "\\textbf{AcctG}"="AcctGper",
#           "\\textbf{AcctV}"="AcctVper",
#           "\\textbf{Gain}"="Gainper")
#   }
#     if (DernierCycle == 2) {
#   df <- rbind(df1,df2,df3,df4) %>%
#   rename_("\\textbf{}"="Variable",
#
#           "\\textbf{Taux G prélevé (E+C)}"="GhaCoupe_Taux",
#           "\\textbf{Taux V prélevé (E+C)}"="VhaCoupe_Taux",
#           "\\textbf{Taux Vc prélevé (E+C)}"="VcHaCoupe_Taux",
#
#           "\\textbf{G Exploité}"="E_Gha",
#           "\\textbf{V Exploité}"="E_Vha",
#           "\\textbf{Vc Exploité}"="E_VcHa",
#
#           "\\textbf{G Chablis}"="C_Gha",
#           "\\textbf{V Chablis}"="C_Vha",
#           "\\textbf{Vc Chablis}"="C_VcHa")
#   }
#
#
# # %%%%%%%%%% Impression tableau
#   if (DernierCycle > 2) {
#     pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
#   }
#   if (DernierCycle == 2) {
# pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
# }
# # cat("\\begin{table}[h]
# #     \\centering")
#
#
# print(xtable(df,
#              digits=rep(1,dim(df)[2]+1),
#              align=c("M{0cm}|","|M{2cm}","|M{1.3cm}","|M{1.2cm}","|M{1cm}|","|M{1.3cm}","|M{1.2cm}","|M{1cm}|","|M{1.3cm}","|M{1.2cm}","|M{1.1cm}|"),
#              caption.placement = "bottom",
#              caption = "Taux de prélèvements sur la période par essences, par catégories de diamètre, et par qualités\\\\\\footnotesize{Taux G prélevé : taux de prélèvement par rapport à la surface terrière initiale\\\\Taux V prélevé : taux de prélèvement par rapport au volume initial\\\\Taux Vc prélevé: taux de prélèvement par rapport à la valeur de consommation initiale}",
#              label = "Tab_Prelvt"),
#       floating=T,
#       table.placement="H",
#       hline.after=pos_LINES,
#       sanitize.text.function=function(x){return(x)},
#       include.rownames=FALSE,
#       size="\\footnotesize")
@

<<Tab_Prelvt_Ancien, echo=F, warning=F, size='footnotesize', results='asis', eval=F, include=F>>=

CyclesPeriodes_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))

# -- Ordre des essences
# order_DF <- filter(gfForetDen_Essence,
#                    NumForet==Choix & Cycle==DernierCycle) %>%
#   arrange(desc(Gha))
# Essence_ORDER <- order_DF$Essence
# Palette_Essence <- Palette_Essence[c(which(is.element(names(Palette_Essence),Essence_ORDER)),
#                                      which(!is.element(names(Palette_Essence),Essence_ORDER)))]

# %%%%%%%%%% Taux par essences
df1 <- filter(gfForetDen_EssRegCoupe,
                    NumForet==Choix & Cycle==DernierCycle-1) %>%
  rename(Essence=EssReg) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Essence,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
  group_by(NumForet,Cycle,Essence) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Essence,Coupe) %>%
  mutate(Gha_TauxCoupe=Gha/Gha_Tot,
         Vha_TauxCoupe=Vha/Vha_Tot,
         VcHa_TauxCoupe=VcHa/VcHa_Tot,

         Gha_Coupe=Gha,
         Vha_Coupe=Vha,
         VcHa_Coupe=VcHa) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  mutate(Cycle=Cycle+1,

         Gha_TauxCoupe=ifelse(Gha_TauxCoupe > 0.1,
                              round(Gha_TauxCoupe,1),round(Gha_TauxCoupe,2)),
         Vha_TauxCoupe=ifelse(Vha_TauxCoupe > 0.1,
                              round(Vha_TauxCoupe,1),round(Vha_TauxCoupe,2)),
         VcHa_TauxCoupe=ifelse(VcHa_TauxCoupe > 0.1,
                              round(VcHa_TauxCoupe,1),round(VcHa_TauxCoupe,2)),

         Gha_Coupe=ifelse(Gha_Coupe > 0.1,
                              round(Gha_Coupe,1),round(Gha_Coupe,2)),
         Vha_Coupe=ifelse(Vha_Coupe > 0.1,
                              round(Vha_Coupe,1),round(Vha_Coupe,2)),
         VcHa_Coupe=ifelse(VcHa_Coupe > 0.1,
                              round(VcHa_Coupe,1),round(VcHa_Coupe,2))) %>%
  dplyr::select(NumForet,Essence,Cycle,Coupe,
                Gha_Coupe,Vha_Coupe,VcHa_Coupe,
                Gha_TauxCoupe,Vha_TauxCoupe,VcHa_TauxCoupe) %>%
  melt(id=c("NumForet","Essence","Cycle","Coupe")) %>%
  dcast(NumForet + Essence + Cycle ~ Coupe + variable) %>%
  mutate(C_Gha_Coupe=ifelse(is.na(C_Gha_Coupe),
                            0,C_Gha_Coupe),
         C_Vha_Coupe=ifelse(is.na(C_Vha_Coupe),
                            0,C_Vha_Coupe),
         C_VcHa_Coupe=ifelse(is.na(C_VcHa_Coupe),
                             0,C_VcHa_Coupe),

         E_Gha_Coupe=ifelse(is.na(E_Gha_Coupe),
                            0,E_Gha_Coupe),
         E_Vha_Coupe=ifelse(is.na(E_Vha_Coupe),
                            0,E_Vha_Coupe),
         E_VcHa_Coupe=ifelse(is.na(E_VcHa_Coupe),
                             0,E_VcHa_Coupe),

         C_Gha_TauxCoupe=ifelse(is.na(C_Gha_TauxCoupe),
                                0,C_Gha_TauxCoupe),
         C_Vha_TauxCoupe=ifelse(is.na(C_Vha_TauxCoupe),
                                0,C_Vha_TauxCoupe),
         C_VcHa_TauxCoupe=ifelse(is.na(C_VcHa_TauxCoupe),
                                 0,C_VcHa_TauxCoupe),

         E_Gha_TauxCoupe=ifelse(is.na(E_Gha_TauxCoupe),
                                0,E_Gha_TauxCoupe),
         E_Vha_TauxCoupe=ifelse(is.na(E_Vha_TauxCoupe),
                                0,E_Vha_TauxCoupe),
         E_VcHa_TauxCoupe=ifelse(is.na(E_VcHa_TauxCoupe),
                                 0,E_VcHa_TauxCoupe),

         E_Gha_Coupe=ifelse(C_Gha_Coupe > 0,
                            paste0(E_Gha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Gha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_Vha_Coupe=ifelse(C_Vha_Coupe > 0,
                            paste0(E_Vha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Vha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_VcHa_Coupe=ifelse(C_VcHa_Coupe > 0,
                             paste0(E_VcHa_Coupe,
                                    " \\textcolor{CornflowerBlue}{+",
                                    C_VcHa_Coupe,
                                    "}"),
                             paste0(E_VcHa_Coupe,
                                       " \\%")),

         E_Gha_TauxCoupe=ifelse(C_Gha_Coupe > 0,
                                paste0(E_Gha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Gha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Gha_TauxCoupe,
                                       " \\%")),
         E_Vha_TauxCoupe=ifelse(C_Vha_Coupe > 0,
                                paste0(E_Vha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Vha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Vha_TauxCoupe,
                                       " \\%")),
         E_VcHa_TauxCoupe=ifelse(C_VcHa_Coupe > 0,
                                 paste0(E_VcHa_TauxCoupe,
                                        "\\% \\textcolor{CornflowerBlue}{+",
                                        C_VcHa_TauxCoupe,
                                        "\\%}"),
                                 paste0(E_VcHa_TauxCoupe,
                                       " \\%"))) %>%
  mutate(Essence=factor(Essence,levels=names(Palette_Essence))) %>%
  arrange(Essence) %>%
  mutate(Essence=as.character(Essence)) %>%
  rename_("Gha"="E_Gha_Coupe",
          "Vha"="E_Vha_Coupe",
          "VcHa"="E_VcHa_Coupe",
          "Taux_Gha"="E_Gha_TauxCoupe",
          "Taux_Vha"="E_Vha_TauxCoupe",
          "Taux_VcHa"="E_VcHa_TauxCoupe",
          "Variable"="Essence") %>%
  dplyr::select(Variable,Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa)

pos1 <- dim(df1)[1]



# %%%%%%%%%% Taux par catégories de diamètre

df2 <- filter(gfForetDen_CatCoupe,
                    NumForet==Choix & Cycle==DernierCycle-1) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Cat,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
  group_by(NumForet,Cycle,Cat) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Cat,Coupe) %>%
  mutate(Gha_TauxCoupe=Gha/Gha_Tot,
         Vha_TauxCoupe=Vha/Vha_Tot,
         VcHa_TauxCoupe=VcHa/VcHa_Tot,

         Gha_Coupe=Gha,
         Vha_Coupe=Vha,
         VcHa_Coupe=VcHa) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  mutate(Cycle=Cycle+1,

         Gha_TauxCoupe=ifelse(Gha_TauxCoupe > 0.1,
                              round(Gha_TauxCoupe,1),round(Gha_TauxCoupe,2)),
         Vha_TauxCoupe=ifelse(Vha_TauxCoupe > 0.1,
                              round(Vha_TauxCoupe,1),round(Vha_TauxCoupe,2)),
         VcHa_TauxCoupe=ifelse(VcHa_TauxCoupe > 0.1,
                              round(VcHa_TauxCoupe,1),round(VcHa_TauxCoupe,2)),

         Gha_Coupe=ifelse(Gha_Coupe > 0.1,
                              round(Gha_Coupe,1),round(Gha_Coupe,2)),
         Vha_Coupe=ifelse(Vha_Coupe > 0.1,
                              round(Vha_Coupe,1),round(Vha_Coupe,2)),
         VcHa_Coupe=ifelse(VcHa_Coupe > 0.1,
                              round(VcHa_Coupe,1),round(VcHa_Coupe,2))) %>%
  dplyr::select(NumForet,Cat,Cycle,Coupe,
                Gha_Coupe,Vha_Coupe,VcHa_Coupe,
                Gha_TauxCoupe,Vha_TauxCoupe,VcHa_TauxCoupe) %>%
  melt(id=c("NumForet","Cat","Cycle","Coupe")) %>%
  dcast(NumForet + Cat + Cycle ~ Coupe + variable) %>%
  mutate(C_Gha_Coupe=ifelse(is.na(C_Gha_Coupe),
                            0,C_Gha_Coupe),
         C_Vha_Coupe=ifelse(is.na(C_Vha_Coupe),
                            0,C_Vha_Coupe),
         C_VcHa_Coupe=ifelse(is.na(C_VcHa_Coupe),
                             0,C_VcHa_Coupe),

         E_Gha_Coupe=ifelse(is.na(E_Gha_Coupe),
                            0,E_Gha_Coupe),
         E_Vha_Coupe=ifelse(is.na(E_Vha_Coupe),
                            0,E_Vha_Coupe),
         E_VcHa_Coupe=ifelse(is.na(E_VcHa_Coupe),
                             0,E_VcHa_Coupe),

         C_Gha_TauxCoupe=ifelse(is.na(C_Gha_TauxCoupe),
                                0,C_Gha_TauxCoupe),
         C_Vha_TauxCoupe=ifelse(is.na(C_Vha_TauxCoupe),
                                0,C_Vha_TauxCoupe),
         C_VcHa_TauxCoupe=ifelse(is.na(C_VcHa_TauxCoupe),
                                 0,C_VcHa_TauxCoupe),

         E_Gha_TauxCoupe=ifelse(is.na(E_Gha_TauxCoupe),
                                0,E_Gha_TauxCoupe),
         E_Vha_TauxCoupe=ifelse(is.na(E_Vha_TauxCoupe),
                                0,E_Vha_TauxCoupe),
         E_VcHa_TauxCoupe=ifelse(is.na(E_VcHa_TauxCoupe),
                                 0,E_VcHa_TauxCoupe),

         E_Gha_Coupe=ifelse(C_Gha_Coupe > 0,
                            paste0(E_Gha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Gha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_Vha_Coupe=ifelse(C_Vha_Coupe > 0,
                            paste0(E_Vha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Vha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_VcHa_Coupe=ifelse(C_VcHa_Coupe > 0,
                             paste0(E_VcHa_Coupe,
                                    " \\textcolor{CornflowerBlue}{+",
                                    C_VcHa_Coupe,
                                    "}"),
                             paste0(E_VcHa_Coupe,
                                       " \\%")),

         E_Gha_TauxCoupe=ifelse(C_Gha_Coupe > 0,
                                paste0(E_Gha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Gha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Gha_TauxCoupe,
                                       " \\%")),
         E_Vha_TauxCoupe=ifelse(C_Vha_Coupe > 0,
                                paste0(E_Vha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Vha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Vha_TauxCoupe,
                                       " \\%")),
         E_VcHa_TauxCoupe=ifelse(C_VcHa_Coupe > 0,
                                 paste0(E_VcHa_TauxCoupe,
                                        "\\% \\textcolor{CornflowerBlue}{+",
                                        C_VcHa_TauxCoupe,
                                        "\\%}"),
                                 paste0(E_VcHa_TauxCoupe,
                                       " \\%"))) %>%
  rename_("Gha"="E_Gha_Coupe",
          "Vha"="E_Vha_Coupe",
          "VcHa"="E_VcHa_Coupe",
          "Taux_Gha"="E_Gha_TauxCoupe",
          "Taux_Vha"="E_Vha_TauxCoupe",
          "Taux_VcHa"="E_VcHa_TauxCoupe") %>%
  dplyr::select(Cat,
                Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa) %>%
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(Cat) %>%
  rename(Variable=Cat) %>%
  mutate(Variable=as.character(Variable))

pos2 <- dim(df2)[1]

# %%%%%%%%%% Taux par qualités regroupée

df3 <- filter(gfForetDen_Reg2Coupe,
                    NumForet==Choix & Cycle==DernierCycle-1) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Reg2,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
  group_by(NumForet,Cycle,Reg2) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Reg2,Coupe) %>%
  mutate(Gha_TauxCoupe=Gha/Gha_Tot,
         Vha_TauxCoupe=Vha/Vha_Tot,
         VcHa_TauxCoupe=VcHa/VcHa_Tot,

         Gha_Coupe=Gha,
         Vha_Coupe=Vha,
         VcHa_Coupe=VcHa) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  mutate(Cycle=Cycle+1,

         Gha_TauxCoupe=ifelse(Gha_TauxCoupe > 0.1,
                              round(Gha_TauxCoupe,1),round(Gha_TauxCoupe,2)),
         Vha_TauxCoupe=ifelse(Vha_TauxCoupe > 0.1,
                              round(Vha_TauxCoupe,1),round(Vha_TauxCoupe,2)),
         VcHa_TauxCoupe=ifelse(VcHa_TauxCoupe > 0.1,
                              round(VcHa_TauxCoupe,1),round(VcHa_TauxCoupe,2)),

         Gha_Coupe=ifelse(Gha_Coupe > 0.1,
                              round(Gha_Coupe,1),round(Gha_Coupe,2)),
         Vha_Coupe=ifelse(Vha_Coupe > 0.1,
                              round(Vha_Coupe,1),round(Vha_Coupe,2)),
         VcHa_Coupe=ifelse(VcHa_Coupe > 0.1,
                              round(VcHa_Coupe,1),round(VcHa_Coupe,2))) %>%
  dplyr::select(NumForet,Reg2,Cycle,Coupe,
                Gha_Coupe,Vha_Coupe,VcHa_Coupe,
                Gha_TauxCoupe,Vha_TauxCoupe,VcHa_TauxCoupe) %>%
  melt(id=c("NumForet","Reg2","Cycle","Coupe")) %>%
  dcast(NumForet + Reg2 + Cycle ~ Coupe + variable) %>%
  mutate(C_Gha_Coupe=ifelse(is.na(C_Gha_Coupe),
                            0,C_Gha_Coupe),
         C_Vha_Coupe=ifelse(is.na(C_Vha_Coupe),
                            0,C_Vha_Coupe),
         C_VcHa_Coupe=ifelse(is.na(C_VcHa_Coupe),
                             0,C_VcHa_Coupe),

         E_Gha_Coupe=ifelse(is.na(E_Gha_Coupe),
                            0,E_Gha_Coupe),
         E_Vha_Coupe=ifelse(is.na(E_Vha_Coupe),
                            0,E_Vha_Coupe),
         E_VcHa_Coupe=ifelse(is.na(E_VcHa_Coupe),
                             0,E_VcHa_Coupe),

         C_Gha_TauxCoupe=ifelse(is.na(C_Gha_TauxCoupe),
                                0,C_Gha_TauxCoupe),
         C_Vha_TauxCoupe=ifelse(is.na(C_Vha_TauxCoupe),
                                0,C_Vha_TauxCoupe),
         C_VcHa_TauxCoupe=ifelse(is.na(C_VcHa_TauxCoupe),
                                 0,C_VcHa_TauxCoupe),

         E_Gha_TauxCoupe=ifelse(is.na(E_Gha_TauxCoupe),
                                0,E_Gha_TauxCoupe),
         E_Vha_TauxCoupe=ifelse(is.na(E_Vha_TauxCoupe),
                                0,E_Vha_TauxCoupe),
         E_VcHa_TauxCoupe=ifelse(is.na(E_VcHa_TauxCoupe),
                                 0,E_VcHa_TauxCoupe),

         E_Gha_Coupe=ifelse(C_Gha_Coupe > 0,
                            paste0(E_Gha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Gha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_Vha_Coupe=ifelse(C_Vha_Coupe > 0,
                            paste0(E_Vha_Coupe,
                                   " \\textcolor{CornflowerBlue}{+",
                                   C_Vha_Coupe,
                                   "}"),
                            paste0(E_VcHa_Coupe,
                                       " \\%")),
         E_VcHa_Coupe=ifelse(C_VcHa_Coupe > 0,
                             paste0(E_VcHa_Coupe,
                                    " \\textcolor{CornflowerBlue}{+",
                                    C_VcHa_Coupe,
                                    "}"),
                             paste0(E_VcHa_Coupe,
                                       " \\%")),

         E_Gha_TauxCoupe=ifelse(C_Gha_Coupe > 0,
                                paste0(E_Gha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Gha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Gha_TauxCoupe,
                                       " \\%")),
         E_Vha_TauxCoupe=ifelse(C_Vha_Coupe > 0,
                                paste0(E_Vha_TauxCoupe,
                                       "\\% \\textcolor{CornflowerBlue}{+",
                                       C_Vha_TauxCoupe,
                                       "\\%}"),
                                paste0(E_Vha_TauxCoupe,
                                       " \\%")),
         E_VcHa_TauxCoupe=ifelse(C_VcHa_Coupe > 0,
                                 paste0(E_VcHa_TauxCoupe,
                                        "\\% \\textcolor{CornflowerBlue}{+",
                                        C_VcHa_TauxCoupe,
                                        "\\%}"),
                                 paste0(E_VcHa_TauxCoupe,
                                       " \\%"))) %>%
  rename_("Gha"="E_Gha_Coupe",
          "Vha"="E_Vha_Coupe",
          "VcHa"="E_VcHa_Coupe",
          "Taux_Gha"="E_Gha_TauxCoupe",
          "Taux_Vha"="E_Vha_TauxCoupe",
          "Taux_VcHa"="E_VcHa_TauxCoupe") %>%
  dplyr::select(Reg2,
                Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa) %>%
  mutate(Reg2=factor(Reg2,levels=c("A+B","C+D"))) %>%
  arrange(Reg2) %>%
  rename(Variable=Reg2) %>%
  mutate(Variable=as.character(Variable))

pos3 <- dim(df3)[1]

# %%%%%%%%%% Taux par années

df4 <- filter(gfForetDen_Coupe,
                    NumForet==Choix & Cycle==DernierCycle-1) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe)) %>%
  dplyr::select(NumForet,Cycle,
                Coupe,Gha,Vha,VcHa) %>%
  group_by(NumForet,Cycle) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T),
         Vha_Tot=sum(Vha,na.rm=T),
         VcHa_Tot=sum(VcHa,na.rm=T)) %>%
  group_by(NumForet,Cycle,Coupe) %>%
  mutate(Gha_TauxCoupe=Gha/Gha_Tot,
         Vha_TauxCoupe=Vha/Vha_Tot,
         VcHa_TauxCoupe=VcHa/VcHa_Tot,

         Gha_Coupe=Gha,
         Vha_Coupe=Vha,
         VcHa_Coupe=VcHa) %>%
  ungroup() %>%
  filter(is.element(Coupe,c("E","C"))) %>%
  mutate(Cycle=Cycle+1,

         Gha_TauxCoupe=ifelse(Gha_TauxCoupe > 0.1,
                              round(Gha_TauxCoupe,1),round(Gha_TauxCoupe,2)),
         Vha_TauxCoupe=ifelse(Vha_TauxCoupe > 0.1,
                              round(Vha_TauxCoupe,1),round(Vha_TauxCoupe,2)),
         VcHa_TauxCoupe=ifelse(VcHa_TauxCoupe > 0.1,
                              round(VcHa_TauxCoupe,1),round(VcHa_TauxCoupe,2)),

         Gha_Coupe=ifelse(Gha_Coupe > 0.1,
                              round(Gha_Coupe,1),round(Gha_Coupe,2)),
         Vha_Coupe=ifelse(Vha_Coupe > 0.1,
                              round(Vha_Coupe,1),round(Vha_Coupe,2)),
         VcHa_Coupe=ifelse(VcHa_Coupe > 0.1,
                              round(VcHa_Coupe,1),round(VcHa_Coupe,2))) %>%
  dplyr::select(NumForet,Cycle,Coupe,
                Gha_Coupe,Vha_Coupe,VcHa_Coupe,
                Gha_TauxCoupe,Vha_TauxCoupe,VcHa_TauxCoupe) %>%
  melt(id=c("NumForet","Cycle","Coupe")) %>%
  dcast(NumForet + Cycle ~ Coupe + variable) %>%
  mutate(C_Gha_Coupe=ifelse(is.na(C_Gha_Coupe),
                            0,C_Gha_Coupe),
         C_Vha_Coupe=ifelse(is.na(C_Vha_Coupe),
                            0,C_Vha_Coupe),
         C_VcHa_Coupe=ifelse(is.na(C_VcHa_Coupe),
                             0,C_VcHa_Coupe),

         E_Gha_Coupe=ifelse(is.na(E_Gha_Coupe),
                            0,E_Gha_Coupe),
         E_Vha_Coupe=ifelse(is.na(E_Vha_Coupe),
                            0,E_Vha_Coupe),
         E_VcHa_Coupe=ifelse(is.na(E_VcHa_Coupe),
                             0,E_VcHa_Coupe),

         C_Gha_TauxCoupe=ifelse(is.na(C_Gha_TauxCoupe),
                                0,C_Gha_TauxCoupe),
         C_Vha_TauxCoupe=ifelse(is.na(C_Vha_TauxCoupe),
                                0,C_Vha_TauxCoupe),
         C_VcHa_TauxCoupe=ifelse(is.na(C_VcHa_TauxCoupe),
                                 0,C_VcHa_TauxCoupe),

         E_Gha_TauxCoupe=ifelse(is.na(E_Gha_TauxCoupe),
                                0,E_Gha_TauxCoupe),
         E_Vha_TauxCoupe=ifelse(is.na(E_Vha_TauxCoupe),
                                0,E_Vha_TauxCoupe),
         E_VcHa_TauxCoupe=ifelse(is.na(E_VcHa_TauxCoupe),
                                 0,E_VcHa_TauxCoupe),

         E_Gha_Coupe=ifelse(C_Gha_Coupe > 0,
                            paste0("\\textbf{\\textcolor{white}{",
                                   E_Gha_Coupe,
                                   "} \\textcolor{Beige}{+",
                                   C_Gha_Coupe,
                                   "}}"),E_VcHa_Coupe),
         E_Vha_Coupe=ifelse(C_Vha_Coupe > 0,
                            paste0("\\textbf{\\textcolor{white}{",
                                   E_Vha_Coupe,
                                   "} \\textcolor{Beige}{+",
                                   C_Vha_Coupe,
                                   "}}"),E_VcHa_Coupe),
         E_VcHa_Coupe=ifelse(C_VcHa_Coupe > 0,
                             paste0("\\textbf{\\textcolor{white}{",
                                    E_VcHa_Coupe,
                                    "} \\textcolor{Beige}{+",
                                    C_VcHa_Coupe,
                                    "}}"),E_VcHa_Coupe),

         E_Gha_TauxCoupe=ifelse(C_Gha_Coupe > 0,
                                paste0("\\textbf{\\textcolor{white}{",
                                       E_Gha_TauxCoupe,
                                       "\\%} \\textcolor{Beige}{+",
                                       C_Gha_TauxCoupe,
                                       "\\%}}"),E_Gha_TauxCoupe),
         E_Vha_TauxCoupe=ifelse(C_Vha_Coupe > 0,
                                paste0("\\textbf{\\textcolor{white}{",
                                       E_Vha_TauxCoupe,
                                       "\\%} \\textcolor{Beige}{+",
                                       C_Vha_TauxCoupe,
                                       "\\%}}"),E_Vha_TauxCoupe),
         E_VcHa_TauxCoupe=ifelse(C_VcHa_Coupe > 0,
                                 paste0("\\textbf{\\textcolor{white}{",
                                        E_VcHa_TauxCoupe,
                                        "\\%} \\textcolor{Beige}{+",
                                        C_VcHa_TauxCoupe,
                                        "\\%}}"),E_VcHa_TauxCoupe)) %>%
  rename_("Gha"="E_Gha_Coupe",
          "Vha"="E_Vha_Coupe",
          "VcHa"="E_VcHa_Coupe",
          "Taux_Gha"="E_Gha_TauxCoupe",
          "Taux_Vha"="E_Vha_TauxCoupe",
          "Taux_VcHa"="E_VcHa_TauxCoupe") %>%
  left_join(CyclesPeriodes_DF,
            by=c("Cycle"="Cycle_Courant")) %>%
  dplyr::select(Periodes,
                Gha,Taux_Gha,Vha,Taux_Vha,VcHa,Taux_VcHa) %>%
  rename(Variable=Periodes) %>%
  mutate(Variable=as.character(Variable))

pos4 <- dim(df4)[1]

df4[pos4,] <- paste0("\\textbf{\\textcolor{white}{",df4[pos4,],"}}")
df4[pos4,1] <- paste0("\\rowcolor{DimGray} ",df4[pos4,1])


# %%%%%%%%%%%%%% Total
# --- Ecart (temps en années)
# Annee_Fin <- Cycles_Disp$Annee[Cycles_Disp$Cycle==DernierCycle]
# Annee_Debut <- Cycles_Disp$Annee[Cycles_Disp$Cycle==1]
# Annee_Ecart <- Annee_Fin-Annee_Debut
#
# df_E <- filter(gfForetDen_Coupe,
#              NumForet==Choix) %>%
#   mutate(Coupe=gsub("PF/","",Coupe),
#          Coupe=gsub("PF","",Coupe),
#          Coupe=ifelse(Coupe=="",NA,Coupe),
#          Cycle=ifelse(Cycle!=DernierCycle,
#                       1,DernierCycle)) %>%
#   group_by(NumForet,Cycle,Coupe) %>%
#   summarise(Gha=sum(Gha,na.rm=T),
#             Vha=sum(Vha,na.rm=T),
#             VcHa=sum(VcHa,na.rm=T)) %>%
#   ungroup() %>%
#   filter(!is.na(Coupe)) %>%
#   select(NumForet,Coupe,Gha,Vha,VcHa)
#
# # ----- Sécurités au cas où prélèvement(s) serai(en)t manquants
# if (dim(df_E)[1]==0) {
#   df_temp <- data.frame(NumForet=Choix,
#                         Coupe="C",
#                         Gha=0,
#                         Vha=0,
#                         VcHa=0,
#                         stringsAsFactors=F)
#   df_E <- rbind(df_E,
#                 df_temp)
# }
#
# if (length(which(df_E$Coupe=="C"))==0) {
#   df_temp <- mutate(df_E,
#                     Coupe="C",
#                     Gha=0,
#                     Vha=0,
#                     VcHa=0)
#   df_E <- rbind(df_E,
#                 df_temp)
# }
#
# df_E1 <- select(df_E,
#                 NumForet,Coupe,Gha)
# df_E2 <- select(df_E,
#                 NumForet,Coupe,Vha)
# df_E3 <- select(df_E,
#                 NumForet,Coupe,VcHa)
#
# df4 <- filter(gfForetDen_,
#              NumForet==Choix & is.element(Cycle,c(1,DernierCycle))) %>%
#   rename(Gha_Tot=Gha,
#          Vha_Tot=Vha,
#          VcHa_Tot=VcHa) %>%
#   select(NumForet,Cycle,Gha_Tot,Vha_Tot,VcHa_Tot) %>%
#   mutate(Cycle=ifelse(Cycle==1,"Debut","Fin"))
#
# df_Bilan1 <- select(df4,
#                     NumForet,Cycle,Gha_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="Gha_Tot")
#   # mutate(Coupe=Total)
#
# df_Bilan2 <- select(df4,
#                     NumForet,Cycle,Vha_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="Vha_Tot")
#
# df_Bilan3 <- select(df4,
#                     NumForet,Cycle,VcHa_Tot) %>%
#   # melt(id=c("NumForet","Cycle")) %>%
#   dcast(NumForet ~ Cycle, value.var="VcHa_Tot")
#
# df_Fin1 <- left_join(df_E1,df_Bilan1) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(Gha)) %>%
#   ungroup() %>%
#   mutate(AcctGper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,AcctGper_Tot)
#
# df_Fin2 <- left_join(df_E2,df_Bilan2) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(Vha)) %>%
#   ungroup() %>%
#   mutate(AcctVper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,AcctVper_Tot)
#
# df_Fin3 <- left_join(df_E3,df_Bilan3) %>%
#   group_by(NumForet) %>%
#   mutate(Coupe_Tot=sum(VcHa)) %>%
#   ungroup() %>%
#   mutate(Gainper_Tot=(Fin-Debut+Coupe_Tot)/Annee_Ecart,
#          Periodes=paste0(Annee_Debut," - ",Annee_Fin),
#          Cycle=1) %>%
#   select(Periodes,Cycle,Gainper_Tot)
#
# df_Fin <- filter(gfForetDen_,
#              NumForet==Choix & Cycle==1) %>%
#   select(Cycle,Gha,Vha,VcHa) %>%
#   left_join(df_Fin1) %>%
#   left_join(df_Fin2) %>%
#   left_join(df_Fin3) %>%
#   distinct() %>%
#   rename(AcctGper=AcctGper_Tot,
#          AcctVper=AcctVper_Tot,
#          Gainper=Gainper_Tot) %>%
#   mutate(Gha=ifelse(Gha < 0,
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#   mutate(AcctGper=round(AcctGper,digits=2),
#          AcctVper=round(AcctVper,digits=1),
#          Gainper=round(Gainper,digits=0),
#
#          Taux_G=round(AcctGper/Gha*100,1),
#          Taux_G=formatC(Taux_G, format="f", digits=1),
#          Taux_G=ifelse(AcctGper!=0,
#                        paste0(Taux_G," \\%"),
#                        ""),
#          Taux_V=round(AcctVper/Vha*100,1),
#          Taux_V=formatC(Taux_V, format="f", digits=1),
#          Taux_V=ifelse(AcctVper!=0,
#                        paste0(Taux_V," \\%"),
#                        ""),
#          Taux_Vc=round(Gainper/VcHa*100,1),
#          Taux_Vc=formatC(Taux_Vc, format="f", digits=1),
#          Taux_Vc=ifelse(Gainper!=0,
#                        paste0(Taux_Vc," \\%"),
#                        ""),
#
#          AcctGper=ifelse(AcctGper==0,
#                          NA,
#                          formatC(AcctGper, format="f", digits=2)),
#          AcctVper=ifelse(AcctVper==0,
#                          NA,
#                          formatC(AcctVper, format="f", digits=1)),
#          Gainper=ifelse(Gainper==0,
#                          NA,
#                         formatC(Gainper, format="f", digits=0))) %>%
#   dplyr::select(Periodes,AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc) %>%
#   arrange(Periodes) %>%
#   rename(Variable=Periodes) %>%
#   mutate(Variable=as.character(Variable))
#
# posFin <- dim(df_Fin)[1]
#   df_Fin[posFin,] <- paste0("\\textbf{\\textcolor{white}{",df_Fin[posFin,],"}}")
#   df_Fin[posFin,1] <- paste0("\\rowcolor{DimGray} ",df_Fin[posFin,1])

  if (DernierCycle > 2) {
  df <- rbind(df1,df2,df3,df_Fin) %>%
  rename_("\\textbf{}"="Variable",
          "\\textbf{Taux G}"="Taux_G",
          "\\textbf{Taux V}"="Taux_V",
          "\\textbf{Taux Vc}"="Taux_Vc",

          "\\textbf{AcctG}"="AcctGper",
          "\\textbf{AcctV}"="AcctVper",
          "\\textbf{Gain}"="Gainper")
  }
    if (DernierCycle == 2) {
  df <- rbind(df1,df2,df3,df4) %>%
  rename_("\\textbf{}"="Variable",
          "\\textbf{Taux G prélevé}"="Taux_Gha",
          "\\textbf{Taux V prélevé}"="Taux_Vha",
          "\\textbf{Taux Vc prélevé}"="Taux_VcHa",

          "\\textbf{G Prélevé}"="Gha",
          "\\textbf{V Prélevé}"="Vha",
          "\\textbf{VC Prélevé}"="VcHa")
  }

# # ----- Total
# df1_TOT <- filter(gfForetDen_,
#             NumForet==Choix & Cycle==DernierCycle) %>%
#   dplyr::select(NumForet,Cycle,
#          Gha,Vha,VcHa,AcctGper,AcctVper,Gainper) %>%
#   mutate(Gha=ifelse(Gha < 0,d
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#
#   mutate(Essence="\\rowcolor{LightGray} \\textbf{Total}",
#          Taux_G=paste0("\\textbf{",round(AcctGper/Gha*100,1)," \\%}"),
#          Taux_V=paste0("\\textbf{",round(AcctVper/Vha*100,1)," \\%}"),
#          Taux_Vc=paste0("\\textbf{",round(Gainper/VcHa*100,1)," \\%}"),
#
#          AcctGper=round(AcctGper,digits=ifelse(AcctGper < 0.1,
#                                                      2,1)),
#          AcctVper=round(AcctVper,digits=ifelse(AcctVper < 0.1,
#                                                      2,1)),
#          Gainper=round(Gainper,digits=ifelse(Gainper < 0.1,
#                                                      2,1)),
#          AcctGper=paste0("\\textbf{",AcctGper,"}"),
#          AcctVper=paste0("\\textbf{",AcctVper,"}"),
#          Gainper=paste0("\\textbf{",Gainper,"}")) %>%
#   dplyr::select(Essence,
#          AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc)
#
# df1 <- rbind(df1,df1_TOT) %>%
#   mutate(Essence=factor(Essence,
#                         levels=c(names(Palette_Essence),
#                                  "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
#   arrange(Essence) %>%
#   rename_("\\textbf{Essence}"="Essence",
#           "\\textbf{Taux G}"="Taux_G",
#           "\\textbf{Taux V}"="Taux_V",
#           "\\textbf{Taux Vc}"="Taux_Vc",
#
#           "\\textbf{AcctG}"="AcctGper",
#           "\\textbf{AcctV}"="AcctVper",
#           "\\textbf{Gain}"="Gainper")
#
#
#
#
#
#
#
#
#
#
# # ----- Total
# df2_TOT <- filter(gfForetDen_,
#             NumForet==Choix & Cycle==DernierCycle) %>%
#   dplyr::select(NumForet,Cycle,
#          Gha,Vha,VcHa,AcctGper,AcctVper,Gainper) %>%
#   mutate(Gha=ifelse(Gha < 0,
#                     0,Gha),
#          Vha=ifelse(Vha < 0,
#                     0,Vha),
#          VcHa=ifelse(VcHa < 0,
#                      0,VcHa),
#          AcctGper=ifelse(AcctGper < 0,
#                          0,AcctGper),
#          AcctVper=ifelse(AcctVper < 0,
#                          0,AcctVper),
#          Gainper=ifelse(Gainper < 0,
#                         0,Gainper)) %>%
#
#   mutate(Cat="\\rowcolor{LightGray} \\textbf{Total}",
#          Taux_G=paste0("\\textbf{",round(AcctGper/Gha*100,1)," \\%}"),
#          Taux_V=paste0("\\textbf{",round(AcctVper/Vha*100,1)," \\%}"),
#          Taux_Vc=paste0("\\textbf{",round(Gainper/VcHa*100,1)," \\%}"),
#
#          AcctGper=round(AcctGper,digits=ifelse(AcctGper < 0.1,
#                                                      2,1)),
#          AcctVper=round(AcctVper,digits=ifelse(AcctVper < 0.1,
#                                                      2,1)),
#          Gainper=round(Gainper,digits=ifelse(Gainper < 0.1,
#                                                      2,1)),
#          AcctGper=paste0("\\textbf{",AcctGper,"}"),
#          AcctVper=paste0("\\textbf{",AcctVper,"}"),
#          Gainper=paste0("\\textbf{",Gainper,"}")) %>%
#   dplyr::select(Cat,
#          AcctGper,Taux_G,AcctVper,Taux_V,Gainper,Taux_Vc)
#
# df2 <- rbind(df2,df2_TOT) %>%
#   mutate(Cat=factor(Cat,
#                         levels=c(Cat_ORDER,
#                                  "\\rowcolor{LightGray} \\textbf{Total}"))) %>%
#   rename_("\\textbf{Catégories de diamètre}"="Cat",
#           "\\textbf{Taux G}"="Taux_G",
#           "\\textbf{Taux V}"="Taux_V",
#           "\\textbf{Taux Vc}"="Taux_Vc",
#
#           "\\textbf{AcctG}"="AcctGper",
#           "\\textbf{AcctV}"="AcctVper",
#           "\\textbf{Gain}"="Gainper")


# %%%%%%%%%% Impression tableau
  if (DernierCycle > 2) {
    pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
  }
  if (DernierCycle == 2) {
pos_LINES <- c(-1:dim(df)[1],pos1,pos1+pos2,pos1+pos2+pos3)
}
# cat("\\begin{table}[h]
#     \\centering")
print(xtable(df,
             digits=rep(1,dim(df)[2]+1),
             align=c("M{0cm}|","|M{2.5cm}|",rep("M{2cm}|",dim(df)[2]-1)),
             caption.placement = "bottom",
             caption = "Taux de prélèvements sur la période par essences, par catégories de diamètre, et par qualités\\\\\\footnotesize{Taux G prélevé : taux de prélèvement par rapport à la surface terrière initiale\\\\Taux V prélevé : taux de prélèvement par rapport au volume initial\\\\Taux Vc prélevé: taux de prélèvement par rapport à la valeur de consommation initiale}",
             label = "Tab_Prelvt"),
      floating=F,
      hline.after=pos_LINES,
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      size="\\footnotesize")
@

% \begin{table}[H]
% \centering
% \begingroup\footnotesize
% \begin{tabular}{|M{2.5cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|M{1cm}|}
%   \hline
%  & \multicolumn{9}{c|}{\textbf{Taux de prélèvement en surface terrière}} & \\
%   \cline{2-11}
%    & <10\% & 10-15\% & \cellcolor{LimeGreen} 15-20\% & \cellcolor{LimeGreen} 20-25\% & 25-30\% & 30-40\% & 40-50\% & >50\% & \textbf{Total} & Pas de coupe\\
%   \hline
%   Nbre de placettes & 9 & 6 & 7 & 9 & 8 & 4 & 3 & 2 & \textbf{48} & 17\\
%   \hline
%   \% de placettes concernées & 19\% & 13\% & 15\% & 19\% & 17\% & 8\% & 6\% & 4\% & \textbf{100\%} & \\
%   \hline
% \end{tabular}
% \endgroup
% \caption{Fréquence des taux de prélèvement constatés sur la période}
% \label{Prelevt_JT}
% \end{table}

<<Prep_Sentence, echo=F, warning=F, results='asis', eval=F, include=F>>=
# -- Préparation phrases :
Depart <- InfosSuiviEco[which(InfosSuiviEco$NumForet==Choix),"DépartSuiviEco"]
@
\FloatBarrier

% \subsection{Recettes/Dépenses}
% % \textcolor{red}{Rajouter tableau suivi Recettes/Dépenses. Même problème que plus haut}
% \EditIf{\Sexpr{SuiviEcono}}{TRUE}{
% Dans le tableau \ref{Recettes_Depenses} figurent le suivi des recettes et dépenses disponibles pour ce dispositif.\\
%
% Le suivi a débuté en \Sexpr{Depart}.
%
% <<Recettes_Depenses, echo=FALSE, message=F, eval=T, include=T>>=
% CoefActu <- rename(CoefActu,Annee=Année)
% Surf <- Dispositifs$SurfParc[which(Dispositifs$NumForet==Choix)]
% pos <- which(InfosSuiviEco$NumForet==Choix)
% if (length(pos) > 0) {
%   Depart <- InfosSuiviEco[pos,"DépartSuiviEco"]
%   Fin <- max(CoefActu$Annee)
% } else {
%   Depart <- 0
%   Fin <- 0
% }
%
% t <- filter(Depenses,NumForet==Choix) %>%
%   rename(Annee=Année) %>%
%   select(Annee,TotalHT,Code) %>%
%   # merge(CoefActu,by.x="Annee",by.y="Année")
%   left_join(CoefActu) %>% # ,by=c("Année"="Annee")
%   mutate(Montant=TotalHT*CoefActu) %>%
%   group_by(Code) %>%
%   summarise(Montant=sum(Montant,na.rm=T)) %>%
%   ungroup() %>%
%   right_join(PlanComptable) %>%
%   rename(Categorie=Catégorie) %>%
%   data.frame()
%
% Cout <- filter(t,
%                Categorie %in% c("Exploitation","Entretien du capital",
%                                 "Soins aux peuplements","Martelage",
%                                 "Frais de gestion forestière","Frais généraux",
%                                 "Dotations aux comptes d'amortissement","Impôts") &
%                  !is.na("Montant")) %>%
%   select(Code,Montant,Categorie) %>%
%   group_by(Categorie) %>%
%   summarise(Montant=sum(Montant,na.rm=T),
%             Montant=Montant/(Fin-Depart+1)/Surf) %>%
%   ungroup() %>%
%   mutate(Group="Dépenses") %>%
%   data.frame()
%
%
%
% # ---------- %%%%%%%%%%%%%%%%%%%%
%
% Vente <- filter(Recettes,NumForet==Choix) %>%
%   rename(Annee=Année) %>%
%   select(Annee,Volume,PU) %>%
%   left_join(CoefActu) %>% #,by=c("Annee"="Année")
%   mutate(Montant=Volume*PU,
%          Montant=Montant*CoefActu)
%
% Recette <- filter(t,
%                   Categorie %in% c("Recettes bois","Recettes Chasse",
%                                    "Subvention","Autres recettes")) %>%
%   select(Code,Montant,Categorie) %>%
%   group_by(Categorie) %>%
%   summarise(Montant=sum(Montant,na.rm=T)) %>%
%   ungroup() %>%
%   mutate(Montant=ifelse(Categorie=="Recettes bois",
%                         Montant+sum(Vente$Montant,na.rm=T),
%                         Montant))
% if (Depart > 0 & !is.na(Depart)) {
%   Recette <- mutate(Recette,
%                     Montant=Montant/(Fin-Depart+1)/Surf,
%                     Group="Recettes") %>%
%     data.frame()
% } else {
%   Recette <- mutate(Recette,
%                     Group="Recettes") %>%
%     data.frame()
% }
%
% df <- rbind(Cout,Recette)
% @
%
% % Pour ce dispositif, \Sexpr{depart} correspond à l'année de début de suivi économique. Les montants indiqués dans le tableau ci-dessous sont exprimés en euros \Sexpr{fin}. \\
% %
% %
% \begin{table}[H]
% \centering
% \begin{tabular}{|p{6cm}|r|p{6cm}|r|}
% \hline
% \multicolumn{2}{|c|}{Recettes (\euro /ha/an)} & \multicolumn{2}{c|}{Dépenses (\euro /ha/an)} \\
% \hline
% Catégorie & Montant  & Catégorie & Montant \\
% \hline
% Autres recettes & \Sexpr{round(Recette[1,2],2)} & Dotations aux comptes d'amortissement & \Sexpr{round(Cout[1,2],2)} \\
% Recettes bois & \Sexpr{round(Recette[2,2],2)} & Entretien du capital & \Sexpr{round(Cout$Montant[which(Cout$Categorie=="Dotations aux comptes d'amortissement")],2)} \\
% Recettes Chasse & \Sexpr{round(Recette[3,2],2)} & Exploitation & \Sexpr{round(Cout[3,2],2)} \\
% Subvention & \Sexpr{round(Recette[4,2],2)} & Frais de gestion forestière & \Sexpr{round(Cout[4,2],2)} \\
%  &  & Frais généraux & \Sexpr{round(Cout[5,2],2)} \\
%  &  & Impôts & \Sexpr{round(Cout[6,2],2)} \\
%  &  & Martelage & \Sexpr{round(Cout[7,2],2)} \\
%  &  & Soins aux peuplements & \Sexpr{round(Cout[8,2],2)} \\
% \hline
% Total & \Sexpr{round(sum(Recette[,2]),2)} & Total & \Sexpr{round(sum(Cout[,2]),2)} \\
% \hline
% \end{tabular}
% \caption{Suivi des dépenses et des recettes}
% \label{Recettes_Depenses}
% \end{table}
%
% }{
% Le suivi des flux financiers (Recettes/Dépenses) n'est pas encore disponible pour ce dispositif
% }
%
}{}


\newpage
\chapter{Suivi écologique}

<<Comment_3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3")
cat(Comment$Texte)
@

\EditIf{\Sexpr{Eval_Codes}}{TRUE}{
\section{Dendromicrohabitats}

<<Comment_3.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.1")
cat(Comment$Texte)
@

% \textcolor{red}{A revoir : Le protocole AFI prévoit d'inventorier les dendromicrohabitats présents sur les arbres du dispositif. Il s'agit d'éléments permettant d'évaluer le degré de naturalité des forêts (coir codification dans le protocole AFI). Il existe d'autres codification (EFI, ProSilva).}

\subsection{Répartition des dendromicrohabitats}

Le protocole d'inventaire prévoit d'inventorier les dendromicrohabitats présents sur les arbres vivants et morts. Il s'agit de relever tous les éléments (trous de pic, cavités, présence de mousse, ...) permettant d'évaluer le degré de naturalité des forêts.\\

La figure \ref{fig:NotesEco_AFI3} illustre la répartition, par classe de diamètre de ces dendromicrohabitats (DMH) inventoriés dans le cadre de ce suivi.

<<NotesEco_AFI3, echo=F, include=Eval_Codes, eval=Eval_Codes, fig.pos="H", fig.height=6.5, fig.cap= "Répartition des arbres porteurs de dendromicrohabitats (DMH)", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetDen_ClasseCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Classe,CodeEcolo,Nha,Gha) %>%
  mutate(Mark=NA,
         Mark=ifelse(is.na(CodeEcolo),
                     0,1),
         Mark=factor(Mark,levels=c(0,1))) %>%
  group_by(NumForet,Classe,Mark) %>%
  summarise(Nha=sum(Nha),
            Gha=sum(Gha)) %>%
  ungroup() %>%
  arrange(Classe,Mark)

df0_text <- group_by(df0,
                     NumForet,Mark) %>%
  summarise(Nha=sum(Nha),
            Gha=sum(Gha)) %>%
  ungroup() %>%
  mutate(Part_Nha=round(Nha/sum(Nha,na.rm=T)*100,0),
         Part_Gha=round(Gha/sum(Gha,na.rm=T)*100,0)) %>%
  filter(Mark==1)
  # arrange(Mark)


Y=group_by(df0,Classe) %>%
  summarise(Nha=sum(Nha)) %>%
  ungroup() %>%
  filter(Nha==max(Nha)) %>%
  select(Nha) %>%
  unlist()

X=max(df0$Classe)
Xmin=min(df0$Classe)

# by_VALUE <- ifelse(Y > 200,
#                    20,10)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

p1 <- ggplot() +
  geom_bar(df0,
           mapping=aes(Classe,Nha,fill=Mark),
           stat="identity",position="stack",
           col="black") +
  scale_fill_manual(name="",
                    values=c("snow","dodgerblue"),
                    label=c("arbres sans DMH",
                            "arbre porteur de DMH")) +
    scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(name="N (tiges/ha)",
                     limits=c(0,Y*1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  annotate("text",
           label=paste("Part des arbres porteurs de DMH = ",df0_text$Part_Nha," %"),
           x=0.7*(max(df0$Classe,na.rm=T)+5), #3
           y=Y*0.8,
           # vjust=c(-1.5,
           #         # -0.7,
           #         0),
           size=2.5,
           fontface='plain',
           color="navyblue") +
  theme_bw() + MyTheme +
  theme(legend.position="bottom",
        legend.direction="horizontal")

Y=group_by(df0,Classe) %>%
  summarise(Gha=sum(Gha)) %>%
  ungroup() %>%
  filter(Gha==max(Gha)) %>%
  select(Gha) %>%
  distinct() %>%
  unlist()
p2 <- ggplot() +
  geom_bar(df0,
           mapping=aes(Classe,Gha,fill=Mark),
           stat="identity",position="stack",
           col="black") +
  scale_fill_manual(name="",
                    values=c("snow","dodgerblue"),
                    label=c("arbres sans DMH",
                            "arbre porteur de DMH")) +
    scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(name="G (m2/ha)",
                     limits=c(0,Y*1),
                     breaks=seq(0,Y*1.3,0.5)) +
  annotate("text",
           label=paste("Part des arbres porteurs de DMH = ",df0_text$Part_Gha," %"),
           x=0.7*(max(df0$Classe,na.rm=T)+5), #3
           y=Y*0.8,
           # vjust=c(-1.5,
           #         # -0.7,
           #         0),
           size=2.5,
           fontface='plain',
           color="navyblue") +
  theme_bw() + MyTheme


mylegend1 <- g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=2),
             mylegend1,nrow=2,heights=c(9, 1))
@
\FloatBarrier


<<Comment_3.1.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.1.1")
cat(Comment$Texte)
@

<<Prepa_CodesEco_New, echo=F, include=Eval_Codes, eval=Eval_Codes, fig.pos="H", fig.height=4, fig.cap="Dendromicrohabitats par catégories de diamètre.\\\\\\scriptsize{PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}", comment=NA, message=F, warning=FALSE>>=
# -- Palette
Palette_Code <- CodeEcolos$Couleur
names(Palette_Code) <- CodeEcolos$Descriptif

# -- Seuil
Seuil <- 0.01 #(seuil pour filtrer valeurs trop faible)

# -- Construction table
t <- filter(gfForetCodes_CodeEcolo,
            NumForet==Choix &
              Cycle==DernierCycle) %>%
  select(NumForet,Cycle,CodeEcolo,Nha,NbrePlacettes) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  mutate(Note=CodeEcolos$Descriptif[match(CodeEcolo,toupper(CodeEcolos$Code))]) %>%
  group_by(NumForet,Cycle,Note,NbrePlacettes) %>%
  dplyr::summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup()

# -- Séparation en 2 tables : DMH rares ou non
# - DMH rares
df_DMH1 <- filter(t,
                  Nha <= sum(t$Nha,na.rm=T)*Seuil) %>%
  arrange(Nha) %>%
  mutate(Note=str_wrap(Note,
                       width=50,indent=0,exdent=0),
         Note=factor(Note,
                     levels=Note))
# - DMH fréquents
df_DMH2 <- filter(t,
                  Nha > sum(t$Nha,na.rm=T)*Seuil) %>%
  arrange(Nha) %>%
  mutate(Note=str_wrap(Note,
                       width=50,indent=0,exdent=0),
         Note=factor(Note,
                     levels=Note))

Levels1 <- sort(unique(df_DMH1$Note))
Levels2 <- sort(unique(df_DMH2$Note))

df_DMH_Cat <- filter(gfForetCodes_CatCodeEcolo,
                   NumForet==Choix &
                     Cycle==DernierCycle) %>%
  mutate(CodeEcolo=toupper(CodeEcolo),
         Note=CodeEcolos$Descriptif[match(CodeEcolo,toupper(CodeEcolos$Code))])
# Levels_Cat <- sort(unique(df_DMH1$Note))
Levels_Cat <- sort(unique(df_DMH_Cat$Note))

# -- Paramètres pour équilibrer le paramètre fig.height en fonction du nombre de DMH dans les figures qui suivent
df_Scales <- data.frame(Nb_CodesEco=seq(0,40),
                        Classe_CodesEco=sort(c(rep(c(1,seq(5,35,5)),5),35)),
                        Height_CodesEco=c(sort(rep(seq(1,8),5)),8)) %>%
  mutate(Height_CodesEco=ifelse(Height_CodesEco==1 |
                                  Height_CodesEco==2 |
                                  Height_CodesEco==3,
                                2.5,Height_CodesEco))
Param_CodesEcoRare <- df_Scales$Height_CodesEco[match(length(Levels1),
                                                      df_Scales$Nb_CodesEco)]
Param_CodesEco <- df_Scales$Height_CodesEco[match(length(Levels2),
                                                  df_Scales$Nb_CodesEco)]
Param_CodesEcoCat <- df_Scales$Height_CodesEco[match(length(Levels_Cat),
                                                     df_Scales$Nb_CodesEco)]

if (length(Levels1) == 0) {
  Sentence <- "La figure \\ref{fig:CodesEcoFrequents} illustre la diversité des différents dendromicrohabitats (DMH) inventoriés."
} else {
  Sentence <- "Les figures \\ref{fig:CodesEcoFrequents} et \\ref{fig:CodesEcoRare_bis} illustrent la diversité des différents dendromicrohabitats (DMH) inventoriés.\\
La figure \\ref{fig:CodesEcoFrequents} présente les DMH les plus fréquents, la figure \\ref{fig:CodesEcoRare_bis} les DMH les plus rares."
}


@

\Sexpr{Sentence}
% Les figures \ref{fig:CodesEcoFrequents} et \ref{fig:CodesEcoRare_bis} illustrent la diversité des différents dendromicrohabitats (DMH) inventoriés.\\
% La figure \ref{fig:CodesEcoFrequents} présente les DMH les plus fréquents, la figure \ref{fig:CodesEcoRare_bis} les DMH les plus rares.

<<CodesEcoFrequents, echo=F, fig.pos='H', fig.height=Param_CodesEco, fig.cap="Densité à l'hectare des dendromicrohabitats les plus représentés", comment=NA, message=F, warning=FALSE, eval=Eval_Codes, include=Eval_Codes>>=

# -- Plot
# DMH2 (codes écolo fréquents)
ggplot() +
  geom_bar(df_DMH2, mapping=aes(Note,Nha),
                 position="identity", stat="identity", fill="skyblue3",
           width=0.5) +
  ggplot2::geom_text(df_DMH2, mapping=aes(Note,Nha,label=round(Nha,1)),
            hjust=-0.5, size=2, col="grey40") +
  coord_flip() +
  theme_bw() +
  labs(y=paste0("Densit\u00E9 \u00E0 l'hectare \n(Seuil : N/ha > ",Seuil*100,"% de la densit\u00E9 totale)"),
       x="Dendromicrohabitats") +
  scale_y_continuous(limits=c(0,max(df_DMH2$Nha)*1.1)) +
  MyTheme + theme(axis.text.x = element_text(size=6),
                    axis.text.y = element_text(size=6))
@

<<CodesEcoRare_bis, echo=F, eval=Eval_Codes, include=Eval_Codes, fig.pos='H', fig.cap="Densité à l'hectare des dendromicrohabitats les plus rares", comment=NA, message=F, warning=FALSE, fig.height=Param_CodesEcoRare>>=

# -- Plot
# DMH1 (codes écolo rares)
if (dim(df_DMH1)[1] > 0) {
ggplot() +
  geom_bar(df_DMH1, mapping=aes(Note,
                              Nha),
                 position="identity", stat="identity", fill="lightskyblue3",width=0.5) +
  ggplot2::geom_text(df_DMH1, mapping=aes(Note,Nha,label=round(Nha,2)),
            hjust=-0.5, size=2, col="grey40") +
  coord_flip() +
  theme_bw() +
  labs(y=paste0("Densit\u00E9 \u00E0 l'hectare \n(Seuil : N/ha inf\u00E9rieur ou \u00E9gal \u00E0\n ",Seuil*100,"% de la densit\u00E9 totale)"),
       x="Dendromicrohabitats") +
  scale_y_continuous(limits=c(0,max(df_DMH1$Nha)*1.1)) +
    MyTheme + theme(axis.text.x = element_text(size=6),
                    axis.text.y = element_text(size=6))

}
@


% Dans la figure \ref{fig:CodesEcoCat}, on a représenté, dans la partie haute de la figure, la densité de DMH inventoriés, que l'on rapporte ensuite dans la partie basse à la surface terrière des arbres de chaque catégorie de diamètre. Ainsi on s'offre un aperçu du nombre de DMH moyen par arbre dans chacune des catégories de diamètre.
La partie haute de la figure \ref{fig:CodesEcoCat} présente la répartition des DMH en nombre de tiges par catégories de diamètre.\\
La partie basse présente le nombre moyen de DMH par catégories de diamètre.
<<CodesEcoCat, echo=F, eval=Eval_Codes, include=Eval_Codes, fig.pos="H", fig.height=Param_CodesEcoCat, fig.cap="Dendromicrohabitats par cat\u00E9gories de diam\u00E8tre", comment=NA, message=F, warning=FALSE>>=
# -- Seuil 2
Seuil2 <- 0

# -- Table
t1 <- filter(gfForetCodes_CatCodeEcolo,
                   NumForet==Choix &
                     Cycle==DernierCycle) %>%
  select(NumForet,Cycle,CodeEcolo,Cat,Nha,NbrePlacettes) %>%
  mutate(CodeEcolo=toupper(CodeEcolo),
         Note=CodeEcolos$Descriptif[match(CodeEcolo,toupper(CodeEcolos$Code))]) %>%
  group_by(NumForet,Cycle,Cat,NbrePlacettes) %>%
  mutate(Tot=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  filter(Nha > sum(unique(Tot))*Seuil2) %>%
  arrange(Nha) %>%
  mutate(Note=str_wrap(Note,
                       width=50,indent=0,exdent=0),
         Note=factor(Note,
                     levels=unique(names(Palette_Code))),
         Cat=factor(Cat,
                    levels=c("PER","PB","BM","GB","TGB"))) %>%
  arrange(Cat,Note)

# -- Plot 1
p1 <- ggplot() +
  # geom_histogram(t.m, mapping=aes(Cat, Nha, fill=variable), position="stack", stat="identity")
  geom_bar(t1, mapping=aes(Cat, Nha, fill=Note),
           position="stack", stat="identity", width=0.5) +
  #   scale_fill_colorblind() +
  scale_fill_manual(name="Dendromicrohabitats :",
                    values=Palette_Code) +
  labs(x="", y="Densité de DMH\n(N/ha)") +
  guides(fill=guide_legend(reverse=T,
                           ncol=ifelse(Param_CodesEcoCat <=4 |Param_CodesEcoCat > 12,
                                       2,1))) +
    # guides(fill=guide_legend(reverse=T)) +
  MyTheme + theme(legend.position="right",
                  legend.direction="vertical",
                  legend.text=element_text(size=5))


# -- Plot 2
t2 <- filter(gfForetDen_CatCodeEcolo,
                   NumForet==Choix &
                     Cycle==DernierCycle) %>%
  select(NumForet,Cycle,CodeEcolo,Cat,Nha,NbrePlacettes) %>%
  group_by(NumForet,Cycle,Cat) %>%
  summarise(Nha_Tot=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Cat=factor(Cat,
                    levels=c("PER","PB","BM","GB","TGB"))) %>%
  right_join(t1) %>%
  mutate(Nha_Relatif=Nha/Nha_Tot) %>%
  arrange(Note)



p2 <- ggplot() +
  geom_bar(t2, mapping=aes(Cat, Nha_Relatif, fill=Note),
           position="stack", stat="identity", width=0.5) +
#   scale_fill_colorblind() +
  scale_fill_manual(values=Palette_Code) +
  labs(x="", y="Nbre de DMH\npar arbres porteurs") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme

mylegend <- g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                         p2 + theme(legend.position="none"),
                         nrow=2),
             mylegend, nrow=1,widths=c(5, 5))

@
\FloatBarrier

% \subsection{Dendromicrohabitats}
<<CodesEco, echo=F, include=F, eval=F, fig.pos="H", fig.height=6, fig.cap= "Densité à l'hectare des dendromicrohabitats", comment=NA, message=F, warning=FALSE>>=
Seuil <- 0.01
t <- filter(gfForetCodes_CodeEcolo, NumForet==Choix) %>%
  select(NumForet,Cycle,CodeEcolo,Nha) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  separate(CodeEcolo,c("Code","Localisation"),sep=1) %>%
  left_join(NbPlac) %>%
  left_join(CodeEcolos,by=c("Code"="CodeEcolo"))

tLoc1 <- filter(t,is.element(Code,c("S","X","Y","Z","K","T","D"))) %>%
  mutate(Descriptif=str_wrap(Descriptif, width = 30, indent = 0, exdent = 0))
tLoc2 <- filter(t,!is.element(Code,c("S","X","Y","Z","K","T","D"))) %>%
  mutate(Descriptif=ifelse(Localisation==1,
                           paste0(Descriptif," au pied"),
                                  Descriptif),
         Descriptif=ifelse(Localisation==2,
                           paste0(Descriptif," sur le fût"),
                                  Descriptif),
         Descriptif=ifelse(Localisation==3,
                           paste0(Descriptif," dans le pied"),
                                  Descriptif),
         Descriptif=str_wrap(Descriptif, width = 30, indent = 0, exdent = 0))
t <- rbind(tLoc1,tLoc2) %>%
  group_by(NumForet,Cycle,Descriptif) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  arrange(Descriptif) %>%
  mutate(Titre=paste0("Cycle ",Cycle))

ggplot() +
  geom_bar(t, mapping=aes(Descriptif,Nha),
                 position="identity", stat="identity", fill="grey60",
           width=0.5) +
    # str_wrap(as.factor(Descriptif), width = 50, indent = 0, exdent = 0),
                                  # value),
  ggplot2::geom_text(t, mapping=aes(Descriptif,Nha,label=round(Nha,0)),
            hjust=-0.5, size=2, col="grey40") +
  coord_flip() +
  theme_bw() +
  labs(y=paste0("Densité à l'hectare"), # \n(Seuil : N/ha > ",Seuil*100,"% de la densité totale)"
       x="Dendromicrohabitats") +
  scale_y_continuous(limits=c(0,max(t$Nha)*1.1)) +
  facet_wrap(~ Titre) + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                    strip.background = element_rect(fill=NA, colour=NA))
@

<<CodesEco3, echo=F, include=F, eval=F, fig.pos="H", fig.height=6, fig.cap= "Dendromicrohabitats par catégories de diamètre.\\\\ \\vspace{0.2cm}\\footnotesize{PER (Perches) = diamètre compris entre 7.5 cm et 17.5 cm\\\\PB (Petits Bois) = diamètre compris entre 17.5 cm et 27.5 cm\\\\BM (Bois Moyens) = diamètre compris entre 27.5 cm et 47.5 cm\\\\GB (Gros Bois) = diamètre compris entre 47.5 cm et 67.5 cm\\\\TGB (Très Gros Bois) = diamètre supérieur à 67.5cm.}", comment=NA, message=F, warning=FALSE>>=
Seuil <- 0.01
t <- filter(gfForetCodes_CatCodeEcolo,
            NumForet==Choix) %>%
  select(NumForet,Cycle,CodeEcolo,Cat,Nha) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  separate(CodeEcolo,c("Code","Localisation"),sep=1) %>%
  left_join(NbPlac) %>%
  left_join(CodeEcolos,by=c("Code"="CodeEcolo"))

tLoc1 <- filter(t,is.element(Code,c("S","X","Y","Z","K","T","D"))) %>%
  mutate(Descriptif=str_wrap(Descriptif, width = 30, indent = 0, exdent = 0))
tLoc2 <- filter(t,!is.element(Code,c("S","X","Y","Z","K","T","D"))) %>%
  mutate(Descriptif=ifelse(Localisation==1,
                           paste0(Descriptif," au pied"),
                                  Descriptif),
         Descriptif=ifelse(Localisation==2,
                           paste0(Descriptif," sur le fût"),
                                  Descriptif),
         Descriptif=ifelse(Localisation==3,
                           paste0(Descriptif," dans le pied"),
                                  Descriptif),
         Descriptif=str_wrap(Descriptif, width = 30, indent = 0, exdent = 0))

t <- rbind(tLoc1,tLoc2) %>%
  group_by(NumForet,Cycle,Descriptif,Cat) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  # arrange(Descriptif)
#   group_by(NumForet,Cycle) %>%
#   mutate(Tot=sum(Nha,na.rm=T)) %>%
#   ungroup() %>%
#   filter(Nha > Tot*Seuil2) %>%
  filter(!is.na(Nha)) %>%
  arrange(Cat,Descriptif)
# t.m <- t.m[t.m$Nha > t.m$Tot*Seuil2,]
# t.m <- t.m[order(t.m$Nha),]

p1 <-
  ggplot() +
  # geom_histogram(t.m, mapping=aes(Cat, Nha, fill=variable), position="stack", stat="identity")
geom_bar(t, mapping=aes(Cat, Nha, fill=Descriptif),
         position="stack", stat="identity") +
  # scale_fill_colorblind() +
  labs(x="", y="Cumul dendromicrohabitats (N/ha)") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme + theme(legend.position="right",
                     legend.direction="vertical")

# Comparaison cumul Nha Note Ecolo par rapport à Nha Note Ecolo (Nbre µHabitats portés par chaque arbre porteur)
t2 <- left_join(t,gfForetDen_Cat,
                  by=c("NumForet"="NumForet","Cycle"="Cycle","Cat"="Cat")) %>%
  rename_("Nha"="Nha.x",
          "NhaTot"="Nha.y") %>%
  mutate(Relatif2=Nha/NhaTot) %>%
  arrange(Cat,Descriptif)
# temp <- merge(psdrfCodesNGVDispCat[,c("NumForet","Cycle","Cat","Nha")],
#               psdrfCodesTaillisDispCat[,c("NumForet","Cycle","Cat","Nha")],
#               all=T)
# temp <- summaryBy(Nha ~ NumForet + Cycle + Cat, data=temp, FUN=sum, keep.names=T, na.rm=T)
# names(temp)[names(temp) %in% "Nha"] <- "NhaTot"
# t3 <- merge(t.m,temp,all.x=T)
# t3$Relatif2 <- t3$Nha/t3$NhaTot
# t3 <- t3[order(t3$Note),]

p2 <-
  ggplot() +
  geom_bar(t2, mapping=aes(Cat, Relatif2, fill=Descriptif),
           position="stack", stat="identity") +
  # scale_fill_colorblind() +
  labs(x="", y="Nbre dendromicrohabitats/Arbres porteurs") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme

mylegend <- g_legend(p1)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                               p2 + theme(legend.position="none"),
                               nrow=2),
                   mylegend, nrow=1,widths=c(6.5, 3.5))
@
\FloatBarrier

\EditIf{\Sexpr{Eval_Codes_AFI}}{TRUE}{
\subsection{Notes écologiques}

<<Comment_3.1.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.1.2")
cat(Comment$Texte)
@

<<NotesEco_AFI, echo=F, eval=Eval_Codes_AFI, include=Eval_Codes_AFI, fig.pos="H", fig.height=3, fig.cap= "Densité à l'hectare des dendromicrohabitats", comment=NA, message=F, warning=FALSE>>=

# # --- Version 1
# df <- filter(gfForetCodes_CodeEcolo,
#              NumForet==Choix & Cycle==DernierCycle) %>%
#   select(NumForet,CodeEcolo,Nha,Gha,Vha)
#
# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))
#
# df <- left_join(df,df_Codes,
#             by=c("CodeEcolo"="Code")) %>%
#   mutate(Note_Tot=Note_AFI*Nha)
#
# Note_Totale <- round(sum(df$Note_Tot),0)



# --- Version 2
df <- filter(gfForetDen_CodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,CodeEcolo,Nha,Gha,Vha) %>%
  mutate(CodeEcolo=str_replace(CodeEcolo,"0",""),
         CodeEcolo=toupper(CodeEcolo))

Niveaux <- unique(CodeEcolos$Code)
      Niveaux <- c(Niveaux,toupper(Niveaux))
      # ---- Decomposition
      NbCodes <-length(Niveaux)
      # df$CodeEcolo <- str_replace(df$CodeEcolo,"0","")
      # List <- c()
      df2 <- data.frame()
      for (i in 1:dim(df)[1]) {
        # List <- c(List,
        #           list(str_extract(df$CodeEcolo[i], Niveaux)[!is.na(str_extract(df$CodeEcolo[i], Niveaux))]))
                List <- list(str_extract(df$CodeEcolo[i], Niveaux)[!is.na(str_extract(df$CodeEcolo[i], Niveaux))])

                df_temp <- data.frame(Id=rep.int(df$CodeEcolo[i],
                                                 sapply(List, length)),
                                  CodeEcolo=unlist(List),
                                  # Note_Naturaliste=rep.int(NA,
                                  #                          sapply(List, length)),
                                  # Note_Chiroptere=rep.int(NA,
                                  #                         sapply(List, length)),
                                  # Note_Avifaune=rep.int(NA,
                                  #                       sapply(List, length)),
                                  # Note_Entomo=rep.int(NA,
                                  #                     sapply(List, length)),
                                  stringsAsFactors = F)
                df2 <- rbind(df2,df_temp)
      }
      df2 <- distinct(df2)
CodeEcolos <- mutate(CodeEcolos,
                     Code=toupper(Code))


Group_CodeEcolo_DF <- data.frame(Group_CodeEcolo=c("S","X",
                                                   "B","G","H","F","A",
                                                   "P","I","C","E","L",
                                                   "R","T","M","Y"),
                                 Group_CodeEcolo2=c("X","X",
                                                   "B","G","H","F","A",
                                                   "P","I","C","E","L",
                                                   "R","T","M","Y"),
                                 stringsAsFactors=F)
# df3 <- left_join(df2,CodeEcolos,
#                  by=c("CodeEcolo"="Code")) %>%
  # mutate(Mark_Branche=ifelse(str_sub(CodeEcolo,1,1) %in% c("S","X"),
  #                            1,0),
  #        Mark_Mousse=ifelse(str_sub(CodeEcolo,1,1) %in% c("B"),
  #                            1,0),
  #        Mark_Cavite=ifelse(str_sub(CodeEcolo,1,1) %in% c("G"),
  #                            1,0),
  #        Mark_Loge=ifelse(str_sub(CodeEcolo,1,1) %in% c("H"),
  #                            1,0),
  #        Mark_Fente=ifelse(str_sub(CodeEcolo,1,1) %in% c("F"),
  #                            1,0),
  #        Mark_Pic=ifelse(str_sub(CodeEcolo,1,1) %in% c("A"),
#                            1,0),
#        Mark_Pourriture=ifelse(str_sub(CodeEcolo,1,1) %in% c("P"),
#                            1,0),
#        Mark_Blessure=ifelse(str_sub(CodeEcolo,1,1) %in% c("I"),
#                            1,0),
#        Mark_Champi=ifelse(str_sub(CodeEcolo,1,1) %in% c("C"),
#                            1,0),
#        Mark_Ecorce=ifelse(str_sub(CodeEcolo,1,1) %in% c("E"),
#                            1,0),
#        Mark_Lichen=ifelse(str_sub(CodeEcolo,1,1) %in% c("L"),
#                            1,0),
#        Mark_Lierre=ifelse(str_sub(CodeEcolo,1,1) %in% c("R"),
#                            1,0),
#        Mark_Tete=ifelse(str_sub(CodeEcolo,1,1) %in% c("T"),
#                            1,0),
#        Mark_Mort=ifelse(str_sub(CodeEcolo,1,1) %in% c("M"),
#                            1,0),
#        Mark_BigBranche=ifelse(str_sub(CodeEcolo,1,1) %in% c("Y"),
#                               1,0)) %>%
df3 <-
  df2 %>%
  mutate(
    Group_CodeEcolo = str_sub(CodeEcolo, 1, 1),
    Attrbt_CodeEcolo = str_sub(CodeEcolo, 2, 2),
    # Attrbt_CodeEcolo=ifelse(is.na(Attrbt_CodeEcolo),"",Attrbt_CodeEcolo),
    CountGroup_CodeEcolo = 1
  ) %>%
  left_join(Group_CodeEcolo_DF) %>%
  # group_by(Id) %>%
  # mutate(Note_Naturaliste=sum(Naturaliste),
  #        Note_Chiroptere=sum(Chiroptere),
  #        Note_Avifaune=sum(Avifaune),
  #        Note_Entomo=sum(Entomo)) %>%

  # Mark_Mousse=sum(Mark_Mousse),
  # Mark_Branche=sum(Mark_Branche),
  # Mark_Cavite=sum(Mark_Cavite),
  # Mark_Loge=sum(Mark_Loge),
  # Mark_Fente=sum(Mark_Fente),
# Mark_Pic=sum(Mark_Pic),
# Mark_Pourriture=sum(Mark_Pourriture),
# Mark_Blessure=sum(Mark_Blessure),
# Mark_Champi=sum(Mark_Champi),
# Mark_Ecorce=sum(Mark_Ecorce),
# Mark_Lichen=sum(Mark_Lichen),
# Mark_Lierre=sum(Mark_Lierre),
# Mark_Tete=sum(Mark_Tete),
# Mark_Mort=sum(Mark_Mort),
# Mark_BigBranche=sum(Mark_BigBranche)) %>%
group_by(Id,Group_CodeEcolo2) %>%
  mutate(
    CountGroup_CodeEcolo = sum(CountGroup_CodeEcolo),
    Attrbt_CodeEcolo2 =
      ifelse( CountGroup_CodeEcolo > 1 & !is.na(Group_CodeEcolo2),
              max(Attrbt_CodeEcolo), Attrbt_CodeEcolo )
  ) %>%
  ungroup() %>%
  mutate(
    CodeEcolo2 =
      ifelse( CountGroup_CodeEcolo > 1 & !is.na(Group_CodeEcolo2),
              paste0(Group_CodeEcolo2, Attrbt_CodeEcolo2), CodeEcolo )
  ) %>%
  select(Id, CodeEcolo2) %>%
  distinct() %>%
  left_join(CodeEcolos, by = c("CodeEcolo2" = "Code")) %>%
  group_by(Id) %>%
  mutate(
    Note_Naturaliste = sum(Naturaliste),
    Note_Chiroptere = sum(Chiroptere),
    Note_Avifaune = sum(Avifaune),
    Note_Entomo = sum(Entomo),


    Note_AFI = max(Note_Naturaliste, Note_Chiroptere, Note_Avifaune, Note_Entomo)
  ) %>%
  ungroup() %>%
  select(Id, Note_AFI) %>%
  distinct()

NotesAFI_DF <- df3

      df4 <- left_join(df,df3,
                      by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=ifelse(is.na(Note_AFI),
                         0,Note_AFI*Nha))

Note_Totale <- round(sum(df4$Note_Tot),0)

NoteForte_Totale <- filter(gfForetDen_CodeEcolo,
                  NumForet==Choix & Cycle==DernierCycle) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  select(NumForet,CodeEcolo,Nha) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(Note_AFI > 3) %>%
  mutate(Nha=Nha*Note_AFI)
NoteForte_Totale <- round(sum(NoteForte_Totale$Nha))


df <- filter(gfForetDen_Reg2CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
    select(Cycle,Reg2,Gha,Note_AFI) %>%
  # filter(!is.na(Note_AFI)) %>%
  mutate(Population=ifelse(is.na(Note_AFI),
                           "Sans_Valeur",
                           ifelse(Note_AFI > 3,
                           "Valeur_Forte","Valeur")),
         Tot1_Gha=sum(Gha,na.rm=T)) %>%
  group_by(Population) %>%
  mutate(TotPopulation_Gha=sum(Gha,na.rm=T)) %>%
    group_by(Population,Reg2) %>%
    mutate(TotPopulationReg2_Gha=sum(Gha,na.rm=T)) %>%
  ungroup() %>%
    select(Population,Reg2,Tot1_Gha,TotPopulation_Gha,TotPopulationReg2_Gha) %>%
    distinct() %>%
    arrange(Population)


  # ----- Indices :
  # G Total :
G_Tot <- round(unique(df$Tot1_Gha),1)

# G arbres porteurs :
  Porteurs_DF <- filter(df,
                         Population!="Sans_Valeur") %>%
    # select(-one_of("Population","TotPopulationReg2_Gha")) %>%
    select(Reg2,TotPopulationReg2_Gha) %>%
    distinct()
G_Porteurs_Tot <- round(sum(Porteurs_DF$TotPopulationReg2_Gha),1)

# G arbres porteurs avec forte valeur écologique :
PorteursFort_DF <- filter(df,
                         Population=="Valeur_Forte") %>%
    # select(-one_of("Population","TotPopulationReg2_Gha")) %>%
    select(Reg2,TotPopulationReg2_Gha) %>%
    distinct()
G_PorteursFort_Tot <- round(sum(PorteursFort_DF$TotPopulationReg2_Gha),1)

# G arbres porteurs avec forte valeur écologique et bonne qualité :
PorteursFortQual_DF <- filter(df,
                         Population=="Valeur_Forte" &
                           Reg2=="A+B") %>%
    # select(-one_of("Population","TotPopulationReg2_Gha")) %>%
    select(Reg2,TotPopulationReg2_Gha) %>%
    distinct()
G_PorteursFortQual_Tot <- round(sum(PorteursFortQual_DF$TotPopulationReg2_Gha),1)


Indice1=round(Note_Totale/G_Tot,0)
Indice2=round(NoteForte_Totale/G_Tot,0)
Indice3=round(G_Porteurs_Tot*100/G_Tot,0)
Indice4=round(G_PorteursFort_Tot/G_Tot*100,0)
Indice5=round(G_PorteursFortQual_Tot/G_Tot*100,0)
@

La figure ci-dessous illustre la répartition des notes écologiques AFI, tirées de l'analyse de l'inventaire des dendromicrohabitats, entre les différentes essences.

\begin{figure}[H]
 \vspace{-3\baselineskip}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<Tab CompoNotesAFI, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", comment=NA, message=F, warning=FALSE, results='asis'>>=
# --- Répartition des valeurs écologiques par essences
df3 <-
  gfForetDen_EssenceCodeEcolo %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo = toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF, by = c("CodeEcolo" = "Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha = Nha * Note_AFI) %>%
  group_by(Essence) %>%
  summarise(Nha = sum(Nha, na.rm = T)) %>%
  ungroup() %>%
  select(Essence, Nha) %>%
  arrange(desc(Nha))

# --- Total 3
df_Tot3 <- filter(gfForetDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  mutate(Essence="\\rowcolor{LightGray} Total") %>%
  select(Essence,Nha)

pos3 <- dim(df3)[1]
ListPos3 <- list(pos3)

t3 <- rbind(df3,df_Tot3) %>%
  rename_("\\textbf{Essences}"="Essence",
          "\\textbf{Points/ha}"="Nha")


# ----- Impression -----
Digits=rep(0,dim(t3)[2]+1)

print(xtable(t3,
             digits=rep(0,dim(t3)[2]+1),
             align=c("M{0cm}|","|M{2.4cm}|",rep("M{2cm}|",dim(t3)[2]-1)),
             caption.placement = "bottom",
             caption = NULL,
             label = NULL),
      floating=F,
      hline.after=c(-1,0,c(1:dim(t3)[1])[-pos3]),
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      add.to.row=list(
        pos=ListPos3,
        command=rep("\\cmidrule[0.8pt]{1-2}",length(ListPos3))
        ),
      size="\\footnotesize")
@
\end{subfigure}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<CompoNote_Radar, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", fig.cap=NA, results='asis', comment=NA, message=F, warning=FALSE, out.width="6cm", fig.width=4>>=
df0 <- filter(gfForetDen_EssenceCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Essence,CodeEcolo,Nha,Gha,Vha) %>%
  mutate(CodeEcolo=toupper(CodeEcolo))

# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))

df1 <- left_join(df0,NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Essence=factor(Essence,
                        levels=names(Palette_Essence)[length(Palette_Essence):1])) %>%
  group_by(NumForet,Essence) %>%
  summarise(Note_Tot=sum(Note_Tot,na.rm=T)) %>%
  ungroup() %>%
  arrange(desc(Essence)) %>%
  mutate(Tot=sum(Note_Tot,na.rm=T),
         Part=Note_Tot/Tot,
         Cumsum=cumsum(Part),
         Pos=Cumsum-Part/2) %>%
arrange(Essence)

ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Essence),
           stat="identity",position="fill",width=1) +
  geom_label(df1,
             mapping=aes("",Pos,label=ifelse(Part>0.06,
                                             paste0(round(Part*100,0)," %"),
                                             NA)),
             # position=position_dodge(width=1),
             label.padding = unit(0.15, "lines"),
             fill="white",
             size=3, alpha=1) +
  scale_fill_manual(name="Essences",
                    values=Palette_Essence) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=9),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 9),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 8),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    # plot.background = element_rect(fill="black"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
@
 \end{subfigure}
 \vspace{-3\baselineskip}
\caption{Répartition des valeurs écologiques entre les essences}
\label{Compo_NoteAFI}
\end{figure}
\FloatBarrier

La figure ci-dessous illustre la répartition des notes écologiques AFI, tirées de l'analyse de l'inventaire des dendromicrohabitats, entre les différentes catégories de diamètre.

\begin{figure}[h]
 \vspace{-3\baselineskip}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<Tab_CatNotesEco, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", comment=NA, message=F, warning=FALSE, results='asis'>>=

# df <- filter(gfForetDen_CatReg2CodeEcolo,
#               NumForet==Choix & Cycle==DernierCycle) %>%
#   select(NumForet,Cat,Reg2,CodeEcolo,Nha,Gha,Vha) %>%
#   left_join(NotesAFI_DF,
#             by=c("CodeEcolo"="Id")) %>%
#     mutate(Nha_Tot=Nha*Note_AFI,
#            Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB")),
#            Reg2=factor(Reg2,c("A+B","C+D"))) %>%
#   # mutate(Population=ifelse(is.na(Note_AFI),
#   #                          "Sans_Valeur",
#   #                          ifelse(Note_AFI > 3,
#   #                                 "Forte_Valeur",
#   #                                 "Avec_Valeur")),
#   #        Population=factor(Population,levels=c("Sans_Valeur",
#   #                                              "Avec_Valeur",
#   #                                              "Forte_Valeur"))) %>%
#   group_by(Cat,Reg2) %>%
#   summarise(Nha_Tot=sum(Nha_Tot,na.rm=T)) %>%
#   ungroup() %>%
#     arrange(Cat,Reg2) %>%
#     dcast(Cat ~ Reg2,
#           value.var="Nha_Tot")
#
# print(xtable(df,
#              # digits=rep(0,dim(t1)[2]+1),
#              digits=c(0,0,1,0,1,0),
#              align=c("M{0cm}|","M{1.2cm}",rep("|M{2cm}",dim(t1)[2]-1)),
#              caption = "Répartition des volumes prélevés et passés à la futaie par catégories de diamètre",
#              label   = "TabCat_Prelvt"),
#       caption.placement = "bottom",
#       hline.after=-1:dim(t1)[1],
#       sanitize.text.function=function(x){return(x)},
#       include.rownames=F,
#       size="\\footnotesize")




# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
t_Base <- filter(gfForetDen_CatReg2CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by(Cat,Reg2) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  group_by(Reg2) %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  ungroup() %>%
  mutate(Nha=paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}"),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Reg2=factor(Reg2,levels=c("A+B","C+D")),
         Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)

# --- Total
t_TOT1 <- filter(gfForetDen_Reg2CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by(Reg2) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  group_by(Reg2) %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  ungroup() %>%
  mutate(Nha=ifelse(Nha!=0,
                    paste0("\\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                    Part_Nha,
                    "\\%)}}}"),
                    ""),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Reg2=factor(Reg2,levels=c("A+B","C+D")),
         Cat="\\rowcolor{LightGray} \\textbf{Total par qualités}") %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)

# -- Total des essences (colonne total en bout de tableau)
t_TOT2 <- filter(gfForetDen_CatCodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by(Cat) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  # ungroup() %>%
  mutate(Nha=ifelse(Nha!=0,
                    paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{Brown}{(",
                    Part_Nha,
                    "\\%)}}}"),
                    "\\cellcolor{LightGray}"),
         Reg2="\\cellcolor{LightGray} \\textbf{Total par catégories}") %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)

# -- Total des totaux
t_TOT3 <- filter(gfForetDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by() %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  mutate(Nha=ifelse(Nha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{(",
                    Part_Nha,
                    "\\%)}}}"),
                    "\\cellcolor{DimGray}"),
         Cat="\\rowcolor{LightGray} \\textbf{Total par qualités}",
         Reg2="\\cellcolor{LightGray} \\textbf{Total par catégories}") %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)


# --- Total pour arbres dont valeur écolo > 3
t_TOT4 <- filter(gfForetDen_Reg2CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI,
         Population=ifelse(Note_AFI > 3,
                           "Valeur_Forte","Valeur"),
         Tot_Nha=sum(Nha,na.rm=T)) %>%
  group_by(Population,Reg2,Tot_Nha) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         # Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  filter(Population=="Valeur_Forte") %>%
  mutate(Nha=ifelse(Nha!=0,
                    paste0("\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{DarkViolet}{(",
                    Part_Nha,
                    "\\%)}}"),
                    ""),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Reg2=factor(Reg2,levels=c("A+B","C+D")),
         Cat="dont note écolo > 3") %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)

# -- Total toutes qualités confondues
t_TOT5 <- filter(gfForetDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI,
         Population=ifelse(Note_AFI > 3,
                           "Valeur_Forte","Valeur"),
         Tot_Nha=sum(Nha,na.rm=T)) %>%
  group_by(Population,Tot_Nha) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Nha=round(Nha,0),

         # Er_Nha=round(Er_Nha,1),

         # Tot_Nha=sum(Nha,na.rm=T),

         Part_Nha=round(Nha/Tot_Nha*100,0)) %>%
  filter(Population=="Valeur_Forte") %>%
  mutate(Nha=ifelse(Nha!=0,
                    paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                    Nha,
                    "} \\scriptsize{\\textcolor{DarkViolet}{(",
                    Part_Nha,
                    "\\%)}}}"),
                    ""),
                    # ifelse(!is.na(Er_Nha),
                    #        paste0("\\textcolor{Gray}{±",
                    #               Er_Nha,
                    #               "\\%}}"),
                    #        "}")),
         Reg2="\\cellcolor{LightGray} \\textbf{Total par catégories}",
         Cat="dont note écolo > 3") %>%
  select(Cat,Reg2,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  arrange(Cat,Reg2)

t_Base <- rbind(t_Base,t_TOT1,t_TOT2,t_TOT3,t_TOT4,t_TOT5)
# t_Base2 <- rbind(t_Base,t_TOT2)



t1 <- dcast(t_Base,
            Cat ~ Reg2,
          value.var="Nha") %>%
  rename_("Catégories"="Cat")

pos <- which(t1[,"Catégories"]=="dont note écolo > 3")-1
if (length(pos) > 0) {
ListPos <- list(pos)
Command <- rep("\\cmidrule[0.8pt]{1-4}",length(ListPos))
} else {
  pos <- dim(t1)[1]
  ListPos <- list(dim(t1)[1])
  Command <- "\\hline"
}
# ----- Impression -----
Digits=rep(0,dim(t1)[2]+1)

Title <- paste0("Répartition des points écologiques par catégories et qualité")

print(xtable(t1,
             caption=NULL,
             caption.placement="bottom",
             digits=Digits,
             align=c("M{0cm}|","|M{2cm}|",rep("M{1.8cm}|",dim(t1)[2]-1)),
             label = "TabMoyDisp_CatReg2CodeEcolo"),
      hline.after=c(-1,0,c(1:dim(t1)[1])[-pos]),
      sanitize.text.function=function(x){return(x)},
      include.rownames=FALSE,
      floating=F,
      add.to.row=list(
        pos=ListPos,
        command=Command),
      size="\\scriptsize")
@
\end{subfigure}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<CatNote_Radar, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", fig.cap=NA, results='asis', comment=NA, message=F, warning=FALSE, out.width="6cm", fig.width=4>>=
# , out.height="6cm"
# "Répartition de la note AFI par essence"
df0 <- filter(gfForetDen_CatCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Cat,CodeEcolo,Nha,Gha,Vha) %>%
  mutate(CodeEcolo=toupper(CodeEcolo))

# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))

df1 <- left_join(df0,NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Cat=factor(Cat,levels=names(Palette_Cat))) %>% # [length(Palette_Cat):1]
  group_by(NumForet,Cat) %>%
  summarise(Note_Tot=sum(Note_Tot,na.rm=T)) %>%
  ungroup() %>%
  arrange(desc(Cat)) %>%
  mutate(Tot=sum(Note_Tot,na.rm=T),
         Part=Note_Tot/Tot,
         Cumsum=cumsum(Part),
         Pos=Cumsum-Part/2) %>%
arrange(Cat)



ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Cat),
           stat="identity",position="fill",width=1) +
  geom_label(df1,
             mapping=aes("",Pos,label=ifelse(Part>0.06,
                                             paste0(round(Part*100,0)," %"),
                                             NA)),
             # position=position_dodge(width=1),
             label.padding = unit(0.15, "lines"),
             fill="white",
             size=3, alpha=1) +
  scale_fill_manual(name="Catégories de diamètre",
                    values=Palette_Cat) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=9),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 9),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 8),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    # plot.background = element_rect(fill="black"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())
@
 \end{subfigure}
 \vspace{-3\baselineskip}
\caption{Répartition des valeurs écologiques entre les catégories de diamètre}
\label{Cat_NoteAFI}
\end{figure}
\FloatBarrier


Les tableaux \ref{Tab_NotesEco_Plac} représentent la répartition des notes écologiques AFI, tirées de l'analyse de l'inventaire des dendromicrohabitats, entre les différentes placettes et entre les différentes classes.
\begin{figure}[H]
 % \vspace{-3\baselineskip}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<Boxplot_NotesEco_Plac, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", comment=NA, message=F, warning=FALSE, results='asis', fig.height=5>>=


df1 <- filter(gfPlaDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by(NumPlac) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  select(NumPlac,Nha) %>% #,VhaIFN # Nha,Nha,Vha,AcctG,AcctV,VcHa,VpHa,Gain
  # full_join(t) %>%
  mutate(NumPlac=as.numeric(NumPlac)) %>%
  arrange(NumPlac)

# --- Total 1
df_Tot1 <- filter(gfForetDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  mutate(NumPlac="\\rowcolor{LightGray} Moyenne") %>%
  select(NumPlac,Nha)

pos1 <- dim(df1)[1]
ListPos1 <- list(pos1)

t1 <- rbind(df1,df_Tot1) %>%
  rename_("\\textbf{Placettes}"="NumPlac",
          "\\textbf{Points/ha}"="Nha")


# --- Répartition des valeurs écologiques par classes de diamètre
df2 <- filter(gfForetDen_ClasseCodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  group_by(Classe) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  ungroup() %>%
  select(Classe,Nha)

# --- Total 2
df_Tot2 <- filter(gfForetDen_CodeEcolo,
             Cycle == DernierCycle & NumForet == Choix) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  filter(!is.na(Note_AFI)) %>%
  mutate(Nha=Nha*Note_AFI) %>%
  summarise(Nha=sum(Nha,na.rm=T)) %>%
  mutate(Classe="\\rowcolor{LightGray} Total") %>%
  select(Classe,Nha)

pos2 <- dim(df2)[1]
ListPos2 <- list(pos2)

t2 <- rbind(df2,df_Tot2) %>%
  rename_("\\textbf{Classes de diamètre}"="Classe",
          "\\textbf{Points/ha}"="Nha")

# # --- Répartition des valeurs écologiques par essences
# df3 <- filter(gfForetDen_EssenceCodeEcolo,
#              Cycle == DernierCycle & NumForet == Choix) %>%
#   left_join(NotesAFI_DF,
#             by=c("CodeEcolo"="Id")) %>%
#   filter(!is.na(Note_AFI)) %>%
#   mutate(Nha=Nha*Note_AFI) %>%
#   group_by(Essence) %>%
#   summarise(Nha=sum(Nha,na.rm=T)) %>%
#   ungroup() %>%
#   select(Essence,Nha)
#
# # --- Total 3
# df_Tot3 <- filter(gfForetDen_CodeEcolo,
#              Cycle == DernierCycle & NumForet == Choix) %>%
#   left_join(NotesAFI_DF,
#             by=c("CodeEcolo"="Id")) %>%
#   filter(!is.na(Note_AFI)) %>%
#   mutate(Nha=Nha*Note_AFI) %>%
#   summarise(Nha=sum(Nha,na.rm=T)) %>%
#   mutate(Essence="\\rowcolor{LightGray} Total") %>%
#   select(Essence,Nha)
#
# pos3 <- dim(df3)[1]
# ListPos3 <- list(pos3)
#
# t3 <- rbind(df3,df_Tot3) %>%
#   rename_("\\rowcolor{CornflowerBlue} \\textbf{Essences}"="Essence",
#           "\\textbf{Pointsha}"="Nha")


# ----- Impression -----
# Digits=rep(0,dim(t1)[2]+1)
#
#
# cat("\\begin{table}[h]
#     \\centering")
# print(xtable(t1,
#              digits=rep(0,dim(t1)[2]+1),
#              align=c("M{0cm}|","|M{2.4cm}|",rep("M{2cm}|",dim(t1)[2]-1)),
#              caption.placement = "bottom",
#              caption = NULL,
#              label = NULL),
#       floating=F,
#       hline.after=c(-1,0,c(1:dim(t1)[1])[-pos1]),
#       sanitize.text.function=function(x){return(x)},
#       include.rownames=FALSE,
#       add.to.row=list(
#         pos=ListPos1,
#         command=rep("\\cmidrule[0.8pt]{1-2}",length(ListPos1))
#         ),
#       size="\\footnotesize")
# cat("\\hspace{2cm}")

df1.m <- melt(df1,
              id="NumPlac") %>%
  mutate(variable=paste0(NbrePlac," placettes"))

# cat("\\begin{figure}[H]
#  \\vspace{-3\\baselineskip}
# \\begin{subfigure}[c]{0.49\\textwidth}
# \\centering
# ")
ggplot() +
  geom_boxplot(df1.m,mapping=aes(variable,value),
               width=0.5) +
  scale_y_continuous(limits=c(0,max(df1.m$value,na.rm=T)*1.1),
                     breaks=seq(0,max(df1.m$value,na.rm=T)*1.1,
                                250),
                     expand=c(0,0),
                     name="(Points/ha)") +
    # scale_x_continuous(limits=c(0.5,1.5),
    #                  breaks=paste0(NbrePlac," placettes"),
    #                  expand=c(0,0)) +
  theme_bw() +
  theme(axis.title.x=element_blank(),
        axis.title.y=element_text(size=15,colour="navy"), #element_text(hjust=1,angle=0)
        axis.ticks.x=element_blank(),
        axis.line.x=element_blank(),
        axis.text.x=element_text(size=15,colour="springgreen4"),
        axis.text.y=element_text(size=13,colour="navy"))
@
\end{subfigure}
\begin{subfigure}[c]{0.49\textwidth}
\centering
<<Tab_NotesEco_Plac, echo=F, eval = Eval_Codes, include = Eval_Codes, fig.pos="H", comment=NA, message=F, warning=FALSE, results='asis'>>=
if (Eval_Codes_AFI) {
print(
  xtable(
    t2,
    digits = rep(0, dim(t2)[2] + 1),
    align = c("M{0cm}|", "|M{2.4cm}|", rep("M{2cm}|", dim(t2)[2] - 1)),
    caption.placement = "bottom",
    caption = NULL,
    label = NULL
  ),
  floating = F,
  hline.after = c(-1, 0, c(1:dim(t2)[1])[-pos2]),
  sanitize.text.function = function(x){return(x)},
  include.rownames = FALSE,
  add.to.row = list(
    pos = ListPos2,
    command = rep("\\cmidrule[0.8pt]{1-2}", length(ListPos2))
  ),
  size = "\\footnotesize"
)



# cat("\\end{subfigure}
#  \\vspace{-3\\baselineskip}
# \\caption{Répartition des points écologiques par placettes et classes de diamètre}
# \\label{Tab_NotesEco_Plac}
# \\end{figure}
# \\FloatBarrier
# ")

# cat("~")
# print(xtable(t3,
#              digits=rep(0,dim(t3)[2]+1),
#              align=c("M{0cm}|","|M{2.4cm}|",rep("M{2cm}|",dim(t3)[2]-1)),
#              caption.placement = "bottom",
#              caption = NULL,
#              label = NULL),
#       floating=F,
#       hline.after=c(-1,0,c(1:dim(t3)[1])[-pos3]),
#       sanitize.text.function=function(x){return(x)},
#       include.rownames=FALSE,
#       add.to.row=list(
#         pos=ListPos3,
#         command=rep("\\cmidrule[0.8pt]{1-2}",length(ListPos3))
#         ),
#       size="\\footnotesize")


# cat("\\caption{Répartition des points écologiques par placettes et classes de diamètre}
# \\label{Tab_NotesEco_Plac}
#     \\end{table}")
}
NoteForte_Totale <- 1
Note_Totale <- 1
Indice1 <- 1
Indice2 <- 1
Indice3 <- 1
Indice4 <- 1
Indice5 <- 1
@
\end{subfigure}
 % \vspace{-3\baselineskip}
\caption{Répartition des points écologiques par placettes et classes de diamètre}
\label{Tab_NotesEco_Plac}
\end{figure}
\FloatBarrier

La note écologique totale est de \textbf{\Sexpr{Note_Totale} points/ha}, dont \textbf{\Sexpr{NoteForte_Totale} points/ha} représentant la part des notes écologique > 3, soit \textbf{\Sexpr{round(NoteForte_Totale/Note_Totale*100,0)} \%}.\\
Indices synthétiques :
\begin{itemize}[label=-]
\item Rapport Note Ecolo sur G/ha : \textbf{\Sexpr{Indice1}}
\item Rapport Note Ecolo > 3 sur G/ha : \textbf{\Sexpr{Indice2}}
\item Individus avec critère écologique particulier : \textbf{\Sexpr{Indice3} \%}
\item Individus avec forte valeur écologique : \textbf{\Sexpr{Indice4} \%}
\item Individus avec forte valeur écologique et forte valeur économique : \textbf{\Sexpr{Indice5} \%}
\end{itemize}


% \textcolor{red}{Propositions de figures en attendant. Mettre à plat la méthode de calcul de la note AFI... Pour l'instant cumul des notations (x3s3 ou b1b2) limité : on prend le plus élevé. A améliorer (si on a s6x3 on revient à une note pour x6 - change rien pour l'instant mais à réfléchir)}

<<NotesEco_AFI2, echo=F, include=F, eval=F, fig.pos="H", fig.height=3, fig.width=3, fig.cap= "Compte des DMH vs densités de tiges de chaque catégorie de diamètre", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetDen_CatCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,CodeEcolo,Cat,Nha)

# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))

df1 <- left_join(df0,NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=Note_AFI*Nha) %>%
  group_by(NumForet,Cat) %>%
  summarise(Note_Tot=sum(Note_Tot,na.rm=T)) %>%
  ungroup()

# --- Valeurs
df2 <- filter(gfForetDen_Cat,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Cat,Nha) %>%
  mutate(Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB"))) %>% #c("TGB","GB","BM","PB","PER")
  arrange(Cat)

ggplot() +
  geom_bar(df2,
           mapping=aes(Cat,Nha),
           stat="identity",position="identity") +
  geom_line(df1,
            mapping=aes(x=Cat,y=Note_Tot,group=1),
            colour="red") +
  theme_bw() + MyTheme
@
\FloatBarrier
% Figure \ref{fig:NotesEco_AFI2} : note obtenue en prenant l'occurence de chaque DMH (densité) et en multipliant par la note AFI que ces DMH représentent respectivement
\FloatBarrier

<<NotesEco_AFI3_Ancien, echo=F, include=F, eval=F, fig.pos="H", fig.height=3, fig.cap= "Comparaison des densités d'arbres porteurs de DMH vs arbres non porteurs de DMH", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetDen_ClasseCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Classe,CodeEcolo,Nha) %>%
  mutate(Mark=NA,
         Mark=ifelse(is.na(CodeEcolo),
                     0,1),
         Mark=factor(Mark,levels=c(0,1))) %>%
  group_by(NumForet,Classe,Mark) %>%
  summarise(Nha=sum(Nha)) %>%
  ungroup() %>%
  arrange(Classe,Mark)

Y=group_by(df0,Classe) %>%
  summarise(Nha=sum(Nha)) %>%
  ungroup() %>%
  filter(Nha==max(Nha)) %>%
  select(Nha) %>%
  unlist()


ggplot() +
  geom_bar(df0,
           mapping=aes(Classe,Nha,fill=Mark),
           stat="identity",position="stack") +
  scale_fill_manual(name="",
                    values=c("forestgreen","dodgerblue"),
                    label=c("arbres sans DMH",
                            "arbre porteur\nde DMH")) +
  scale_y_continuous(limits=c(0,Y*1),
                     breaks=seq(0,Y*1.3,5)) +
  theme_bw() + MyTheme
@

<<NotesEco_AFI4, echo=F, include=F, eval=F, fig.pos="H", fig.height=3, fig.cap= "Comparaison des densités d'arbres porteurs de DMH vs arbres non porteurs de DMH", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetDen_ClasseReg1CodeEcolo,
             NumForet==Choix & Cycle==DernierCycle &
               Reg1 %in% c("A","B")) %>%
  select(NumForet,Classe,CodeEcolo,Gha) %>%
  mutate(Mark=NA,
         Mark=ifelse(is.na(CodeEcolo),
                     0,1),
         Mark=factor(Mark,levels=c(0,1))) %>%
  group_by(NumForet,Classe,Mark) %>%
  summarise(Gha=sum(Gha)) %>%
  ungroup() %>%
  arrange(Classe,Mark)

df2 <- filter(gfForetDen_Classe,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Classe,Gha) %>%
  arrange(Classe) %>%
  melt(id=c("NumForet","Classe"))

df3 <- filter(gfForetDen_Classe,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Classe,Gha) %>%
  mutate(label="G moyenne") %>%
  arrange(Classe)

Y=group_by(df2,Classe) %>%
  summarise(value=sum(value)) %>%
  ungroup() %>%
  filter(value==max(value)) %>%
  select(value) %>%
  unlist()
X=max(df2$Classe)
Xmin=min(df2$Classe)

ggplot() +
  geom_bar(df0,
           mapping=aes(Classe,Gha,fill=Mark),
           stat="identity",position="stack") +
  geom_line(df3,
            mapping=aes(Classe,Gha,colour=label)) +
  scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(limits=c(0,Y*1),
                     breaks=seq(0,Y*1.3,0.5)) +
  scale_fill_manual(name="",
                    values=c("forestgreen","dodgerblue"),
                    label=c("arbres sans DMH",
                            "arbre porteur\nde DMH")) +
  scale_colour_manual(values="red") +
  guides(colour=guide_legend(title="")) +
  theme_bw() + MyTheme
@
\FloatBarrier

<<NotesEco_AFI5_Ancien, echo=F, include=F, eval=F, fig.pos="H", fig.height=3, fig.cap= "Répartition de la note AFI par catégories de diamètre et par essences", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetCodes_CatCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Cat,CodeEcolo,Nha,Gha,Vha)

df_Codes <- mutate(CodeEcolos,
                   Code=toupper(Code))

df1 <- left_join(df0,df_Codes,
            by=c("CodeEcolo"="Code")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Cat=factor(Cat,levels=names(Palette_Cat)[length(Palette_Cat):1])) %>%
  group_by(NumForet,Cat) %>%
  summarise(Note_Tot=sum(Note_Tot)) %>%
  ungroup()



p1 <- ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Cat),
           stat="identity",position="fill",width=1) +
  scale_fill_manual(name="Catégories de diamètre",
                    values=Palette_Cat) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



df0 <- filter(gfForetCodes_EssenceCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Essence,CodeEcolo,Nha,Gha,Vha)

df_Codes <- mutate(CodeEcolos,
                   Code=toupper(Code))

df1 <- left_join(df0,df_Codes,
            by=c("CodeEcolo"="Code")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Essence=factor(Essence,
                        levels=names(Palette_Essence)[length(Palette_Essence):1])) %>%
  group_by(NumForet,Essence) %>%
  summarise(Note_Tot=sum(Note_Tot)) %>%
  ungroup()

p2 <- ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Essence),
           stat="identity",position="fill",width=1) +
  scale_fill_manual(name="Essences",
                    values=Palette_Essence) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain',size=9),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@

<<NotesEco_AFI5, echo=F, include=F, eval=F, fig.pos="H", fig.height=3, fig.cap= "Répartition de la note AFI par catégories de diamètre et par essences", comment=NA, message=F, warning=FALSE>>=

df0 <- filter(gfForetDen_CatCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Cat,CodeEcolo,Nha,Gha,Vha)

# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))

df1 <- left_join(df0,NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Cat=factor(Cat,levels=names(Palette_Cat))) %>% # [length(Palette_Cat):1]
  group_by(NumForet,Cat) %>%
  summarise(Note_Tot=sum(Note_Tot,na.rm=T)) %>%
  ungroup()



p1 <- ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Cat),
           stat="identity",position="fill",width=1) +
  scale_fill_manual(name="Catégories de diamètre",
                    values=Palette_Cat) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=F)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 6),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())



df0 <- filter(gfForetDen_EssenceCodeEcolo,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Essence,CodeEcolo,Nha,Gha,Vha)

# df_Codes <- mutate(CodeEcolos,
#                    Code=toupper(Code))

df1 <- left_join(df0,NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Note_Tot=Note_AFI*Nha,
         Essence=factor(Essence,
                        levels=names(Palette_Essence)[length(Palette_Essence):1])) %>%
  group_by(NumForet,Essence) %>%
  summarise(Note_Tot=sum(Note_Tot,na.rm=T)) %>%
  ungroup()

p2 <- ggplot() +
  geom_bar(df1,
           mapping=aes("",Note_Tot,fill=Essence),
           stat="identity",position="fill",width=1) +
  scale_fill_manual(name="Essences",
                    values=Palette_Essence) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 6),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

grid.arrange(p1,p2,
             nrow=1,widths=rep(1,2))
@
\FloatBarrier

La figure \ref{fig:NotesEco_AFI6}, représente pour chaque classe de diamètre la répartition de la surface terrière totale entre trois populations :
\begin{itemize}[label=-]
\item les arbres sans valeur écologique particulière (sans dendromicrohabitats)
\item les arbres possédant une valeur écologique (au moins 1 DMH)
\item les arbres ayant une forte valeur écologique (note $\geqslant$ 3)
\end{itemize}

<<NotesEco_AFI6, echo=F, eval = Eval_Codes_AFI, include = Eval_Codes_AFI, fig.pos="H", fig.height=2.5, fig.cap= "Répartition de la surface terrière en fonction de la valeur écologique", comment=NA, message=F, warning=FALSE>>=

df <- filter(gfForetDen_ClasseCodeEcolo,
              NumForet==Choix & Cycle==DernierCycle) %>%
  select(NumForet,Classe,CodeEcolo,Nha,Gha,Vha) %>%
  mutate(CodeEcolo=toupper(CodeEcolo)) %>%
  left_join(NotesAFI_DF,
            by=c("CodeEcolo"="Id")) %>%
  mutate(Population=ifelse(is.na(Note_AFI),
                           "Sans_Valeur",
                           ifelse(Note_AFI > 3,
                                  "Forte_Valeur",
                                  "Avec_Valeur")),
         Population=factor(Population,levels=c("Sans_Valeur",
                                               "Avec_Valeur",
                                               "Forte_Valeur"))) %>%
  group_by(Classe,Population) %>%
  summarise(Gha_Tot=sum(Gha,na.rm=T)) %>%
  ungroup()

tab_lim <- group_by(df,
                    Classe) %>%
  summarise(G=sum(Gha_Tot,na.rm=T)) %>%
  ungroup()

X=max(df$Classe)
Y=max(tab_lim$G)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}
by_VALUE <- ifelse(Y <= 6.5,
                   0.5,1)

  ggplot() +
  geom_bar(df,
           mapping=aes(Classe,Gha_Tot,fill=Population),
           stat="identity",position="stack",
           colour="black") +
  scale_fill_manual(name="",
                    values=c("Gray90","olivedrab3","green3"),
                    label=c("Sans valeur écologique\nparticulière",
                            "Avec valeur écologique",
                            "Avec forte valeur écologique\n(Note > 3)")) +
  # scale_y_continuous(name="G (m2/ha)") +
    scale_y_continuous(name="G (m2/ha)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
    scale_x_continuous(limits=c(17,X*1.1),
                     breaks=seq(20,X*1.3,5),
                     expand=c(0,0)) +
  # coord_polar(theta="y") +
  # scale_colour_manual(values="red") +
  guides(fill=guide_legend(reverse=F)) +
  theme_bw() + MyTheme
@
\FloatBarrier
}{}
}{}

\section{Bois mort}

\EditIf{\Sexpr{Eval_BM}}{TRUE}{
<<Comment_3.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2")
cat(Comment$Texte)
@

\subsection{Répartition du bois mort}

<<Comment_3.2.1, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2.1")
cat(Comment$Texte)
@
Le tableau \ref{TabCompoBM} illustre la répartition du bois mort par essences et par catégories de diamètre. Il est complété par la figure \ref{fig:Radar_BM}.
<<TabBM, echo=F, message=F, results='asis',eval=Eval_BM, eval=Eval_BM>>=
t <-
  gfForetBM_Essence %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-VhaBMT) %>%
  mutate(
    BMSinf = ifelse(BMSinf > 0, round(BMSinf, 1) ,NA),
    BMSsup = ifelse(BMSsup > 0, round(BMSsup, 1), NA),
    BMPinf = ifelse(BMPinf > 0, round(BMPinf, 1), NA),
    BMPsup = ifelse(BMPsup > 0, round(BMPsup, 1), NA),
    VhaBMT = ifelse(VhaBMT > 0, round(VhaBMT, 1), NA),

    Tot_BMSinf = sum(BMSinf, na.rm = T),
    Tot_BMSsup = sum(BMSsup, na.rm = T),
    Tot_BMPinf = sum(BMPinf, na.rm = T),
    Tot_BMPsup = sum(BMPsup, na.rm = T),
    Tot_VhaBMT = sum(VhaBMT, na.rm = T),

    Part_BMSinf =
      ifelse(!is.na(BMSinf), round(BMSinf / Tot_BMSinf * 100, 0), NA),
    Part_BMSsup =
      ifelse(!is.na(BMSsup), round(BMSsup / Tot_BMSsup * 100, 0), NA),
    Part_BMPinf =
      ifelse(!is.na(BMPinf), round(BMPinf / Tot_BMPinf * 100, 0), NA),
    Part_BMPsup =
      ifelse(!is.na(BMPsup), round(BMPsup / Tot_BMPsup * 100, 0), NA),
    Part_VhaBMT =
      ifelse(!is.na(VhaBMT), round(VhaBMT/Tot_VhaBMT*100,0), NA),

    BMSinf =
      # != remplacé pour montrer les valeurs nulles
      ifelse(
        !is.na(BMSinf),
        paste0(
          "\\footnotesize{", BMSinf,
          ifelse(
            !is.na(Part_BMSinf),
            paste0(
              "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_BMSinf, "\\%)}}"
            ),
            "}"
          )
        ),
        NA
      ),
    BMSsup =
      ifelse(
        !is.na(BMSsup),
        paste0(
          "\\footnotesize{",
          BMSsup,
          ifelse(
            !is.na(Part_BMSsup),
            paste0(
              "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_BMSsup, "\\%)}}"
            ),
            "}"
          )
        ),
        NA
      ),
    BMPinf =
      ifelse(
        !is.na(BMPinf),
        paste0(
          "\\footnotesize{",
          BMPinf,
          ifelse(
            !is.na(Part_BMPinf),
            paste0(
              "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_BMPinf, "\\%)}}"
            ),
            "}"
          )
        ),
        NA
      ),
    BMPsup =
      ifelse(
        !is.na(BMPsup),
        paste0(
          "\\footnotesize{",
          BMPsup,
          ifelse(
            !is.na(Part_BMPsup),
            paste0(
              "} \\scriptsize{\\textcolor{CornflowerBlue}{(", Part_BMPsup, "\\%)}}"
            ),
            "}"
          )
        ),
        NA
      ),
    VhaBMT =
      ifelse(
        !is.na(VhaBMT),
        paste0(
          "\\cellcolor{LightGray} \\textbf{\\footnotesize{", VhaBMT,
          "} \\scriptsize{\\textcolor{Brown}{(", Part_VhaBMT, "\\%)}}}"
        ),
        "\\cellcolor{LightGray}"
      )
  ) %>%
  select(Essence,BMSinf,BMSsup,BMPinf,BMPsup,VhaBMT)

# --- Total
t_TOT <-
  gfForetBM_ %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  arrange(-VhaBMT) %>%
  mutate(
    Essence = "\\rowcolor{LightGray} \\textbf{Total}",

    BMSinf = ifelse(BMSinf > 0, round(BMSinf, 1), NA),
    BMSsup = ifelse(BMSsup > 0, round(BMSsup, 1), NA),
    BMPinf = ifelse(BMPinf > 0, round(BMPinf, 1), NA),
    BMPsup = ifelse(BMPsup > 0, round(BMPsup, 1), NA),
    VhaBMT = ifelse(VhaBMT > 0, round(VhaBMT, 1), NA),

    Tot_BMSinf = sum(BMSinf, na.rm = T),
    Tot_BMSsup = sum(BMSsup, na.rm = T),
    Tot_BMPinf = sum(BMPinf, na.rm  = T),
    Tot_BMPsup = sum(BMPsup, na.rm = T),
    Tot_VhaBMT = sum(VhaBMT, na.rm = T),

    Part_BMSinf = ifelse(
      !is.na(BMSinf), round(BMSinf / Tot_BMSinf * 100, 0), NA
    ),
    Part_BMSsup = ifelse(
      !is.na(BMSsup), round(BMSsup / Tot_BMSsup * 100, 0), NA
    ),
    Part_BMPinf = ifelse(!is.na(BMPinf),
                       round(BMPinf/Tot_BMPinf*100,0),
                       NA),
    Part_BMPsup = ifelse(
      !is.na(BMPsup), round(BMPsup / Tot_BMPsup * 100, 0), NA
      ),
    Part_VhaBMT = ifelse(
      !is.na(VhaBMT), round(VhaBMT / Tot_VhaBMT * 100, 0), NA
      ),

    BMSinf = ifelse(
      !is.na(BMSinf),
      paste0(
        "\\textbf{\\footnotesize{",
        BMSinf,
        ifelse(
          !is.na(Part_BMSinf),
          paste0(
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
            Part_BMSinf,
            "\\%)}}}"
          ),
          "}}"
        )
      ),
      ""
    ),
    BMSsup = ifelse(
      !is.na(BMSsup),
      paste0(
        "\\textbf{\\footnotesize{",
        BMSsup,
        ifelse(
          !is.na(Part_BMSsup),
          paste0(
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
            Part_BMSsup,
            "\\%)}}}"
          ),
          "}}"
        )
      ),
      ""
    ),
    BMPinf = ifelse(
      !is.na(BMPinf),
      paste0(
        "\\textbf{\\footnotesize{",
        BMPinf,
        ifelse(
          !is.na(Part_BMPinf),
          paste0(
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
            Part_BMPinf,
            "\\%)}}}"
          ),
          "}}"
        )
      ),
      ""
    ),
    BMPsup = ifelse(
      !is.na(BMPsup),
      paste0(
        "\\textbf{\\footnotesize{",
        BMPsup,
        ifelse(
          !is.na(Part_BMPsup),
          paste0(
            "} \\scriptsize{\\textcolor{CornflowerBlue}{(",
            Part_BMPsup,
            "\\%)}}}"
          ),
          "}}"
        )
      ),
      ""
    ),
    VhaBMT = ifelse(
      !is.na(VhaBMT),
      paste0(
        "\\cellcolor{DimGray} \\textcolor{White}{\\textbf{\\footnotesize{",
        VhaBMT,
        ifelse(
          !is.na(Part_VhaBMT),
          paste0("} \\scriptsize{(", Part_VhaBMT, "\\%)}}}"),
          "}}}"
        )
      ),
      "\\cellcolor{DimGray}"
    )
  ) %>%
  select(Essence, BMSinf, BMSsup, BMPinf, BMPsup, VhaBMT)


t <- rbind(t, t_TOT) %>% #,VhaIFN
  rename_(
    "\\hline\n\\multirow{2}{*}{\\parbox{1.2cm}{\\centering \\textbf{Essence}}}"="Essence",
          " & \\multicolumn{2}{c|}{\\textbf{Bois mort au sol}}"="BMSinf",
          " "="BMSsup",
          " & \\multicolumn{2}{c|}{\\textbf{Bois mort sur pied}}"="BMPinf",
          " "="BMPsup",
          " & \\multirow{2}{*}{\\parbox{2cm}{\\centering \\textbf{Bois mort total \\scriptsize{(m3/ha)}}}}\\\\\n"="VhaBMT"
    )

Entete <- paste0(paste0(names(t), collapse = ""), "\n\\cline{2-5}\n")
names(t) <- c(
  " ",
  "< 30 cm \\scriptsize{(m3/ha)}",
  "$\\geqslant$ 30 cm \\scriptsize{(m3/ha)}",
  "< 30 cm \\scriptsize{(m3/ha)}",
  "$\\geqslant$ 30 cm \\scriptsize{(m3/ha)}",
  " "
)

Digits = rep(0,dim(t)[2] + 1)
print(
  xtable(
    t,
    digits = Digits,
    align = c("M{0cm}", "|M{1.8cm}|", rep("M{2cm}|", dim(t)[2] - 1)),
    caption = "Répartition du volume de bois mort par essences et par type",
    label   = "TabCompoBM"
  ),
  caption.placement = "bottom",
  hline.after = 0:dim(t)[1],
  sanitize.text.function = function(x){return(x)},
  include.rownames = F,
  add.to.row = list(
    pos = list(-1),
    command = Entete
  ),
  size = "\\footnotesize"
)
@

<<Hist_BMPBMS, echo=F, message=F, comment=NA, size='footnotesize', fig.pos='H', fig.height=3.5, fig.cap= "Répartition du volume de bois mort sur pied et du volume de bois mort au sol par classes de diamètre",eval=Eval_BM,include=Eval_BM>>=
BM_ALIBI <- expand.grid(Classe=seq(10,40,10),
                        variable=c("BMP","BMS"))

df <- filter(gfForetBM_Classe,
             NumForet==Choix & Cycle==DernierCycle) %>%
  mutate(BMS=BMSinf+BMSsup,
         BMP=BMPinf+BMPsup) %>%
  select(Classe,BMP,BMS) %>%
  melt(id=c("Classe")) %>%
  full_join(BM_ALIBI) %>%
  mutate(value=ifelse(is.na(value),
                      0,value),
         variable=factor(variable,levels=c("BMS","BMP")))

X=ifelse(max(df$Classe,na.rm=T) < 60,
         60,max(df$Classe,na.rm=T))
Xmin=min(df$Classe,na.rm=T)

Y=group_by(df,
           Classe) %>%
  mutate(Max=sum(value)) %>%
  ungroup()
Y=max(Y$value,na.rm=T)
Y=ifelse(Y!=0,
         Y,5)

by_VALUE <- ifelse(Y <= 6.5,
                   0.5,1)

Palette_BM <- c("burlywood1","chocolate4")
names(Palette_BM) <- c("BMS","BMP")

ggplot() +
  geom_bar(df,
           mapping=aes(Classe,value,fill=variable),
           stat="identity",position="stack") +
  scale_x_continuous(name="Classes de diamètre",
                     limits=c(2.5,X*1.1),
                     breaks=seq(Xmin,X*1.3,5),
                     expand=c(0,0)) +
  scale_y_continuous(name="V (m3/ha)",
                     limits=c(0,Y),
                     breaks=seq(0,Y,by_VALUE)) +
  scale_fill_manual(name="",
                    values=Palette_BM,
                    label=c("Bois mort au sol",
                            "Bois mort sur pied")) +
  # labs(y="",x="Classes de diamètre") +
  theme_bw() + MyTheme +
  theme(legend.position="bottom",
        plot.margin=unit(c(0.1,0.3,0.1,0.1),"cm"))
@

<<Radar_BM, echo=F, include=Eval_BM, eval=Eval_BM, fig.pos='H', fig.height=3, fig.cap= "Répartition du volume de bois mort total par catégories de diamètre et par essences", comment=NA, message=F, warning=FALSE>>=
BM_ALIBI <-
  expand.grid(
    NumForet = Choix,
    Classe = seq(10, 40, 10),
    variable = c("BMSinf", "BMSsup", "BMPinf", "BMPsup")
  )

BM_Intitule <-
  data.frame(
    Base = c("BMSinf", "BMSsup", "BMPinf", "BMPsup"),
    Intitule = c("Bois mort au sol < ou = 30",
                 "Bois mort au sol > 30",
                 "Bois mort sur pied < ou = 30",
                 "Bois mort sur pied > 30"),
    stringsAsFactors = T
  ) %>%
  mutate(Base = factor(Base, levels = c("BMSinf", "BMSsup", "BMPinf", "BMPsup")))

t <-
  gfForetBM_ %>%
  filter(Cycle == DernierCycle & NumForet == Choix) %>%
  select(NumForet, BMSinf, BMSsup, BMPinf, BMPsup) %>%
  melt(id = "NumForet") %>%
  # full_join(BM_ALIBI) %>%
  left_join(BM_Intitule, by = c("variable" = "Base")) %>%
  mutate(
    variable = Intitule,
    variable = factor(
      variable,
      levels = c(
        "Bois mort au sol < ou = 30",
        "Bois mort sur pied < ou = 30",
        "Bois mort au sol > 30",
        "Bois mort sur pied > 30"
      )
    )
  ) %>%
  arrange(desc(variable)) %>%
  mutate(
    Tot_Vha = sum(value, na.rm = T),
    Part_Vha = round(value / Tot_Vha, 2),
    value_Cumsum = cumsum(Part_Vha),
    pos = value_Cumsum - Part_Vha / 2
  ) %>%
arrange(variable)

Palette_CatBM <- c("Gray15","Gray40","Gray60","Gray80")
names(Palette_CatBM) <- c(
  "Bois mort sur pied > 30",
  "Bois mort au sol > 30",
  "Bois mort sur pied < ou = 30",
  "Bois mort au sol < ou = 30"
)

p1 <-
  ggplot() +
  geom_bar(t,
           mapping=aes("",value,fill=variable),
           stat="identity",position="fill",width=1) +
  geom_label(t,
             mapping=aes("",pos,label=ifelse(Part_Vha>=0.05,
                                             paste0(round(Part_Vha*100,0)," %"),
                                             NA)),
             # position=position_dodge(width=1),
             label.padding = unit(0.15, "lines"),
             fill="white",
             size=1.7, alpha=1) +
  scale_fill_manual(name="Type de\nbois mort",
                    values=Palette_CatBM) +
  scale_y_continuous(labels=percent) +
  guides(fill=guide_legend(reverse=F,
                           nrow=2)) +
  coord_polar(theta="y") +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 6),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 5),
    legend.title = element_text(size=6,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

t <-
  gfForetBM_EssReg %>%
  filter(Cycle == DernierCycle & NumForet == Choix & VhaBMT > 0) %>%
  rename(Essence=EssReg) %>%
  mutate(
    Essence =
      factor(
        Essence,
        levels = names(Palette_Essence_BM)[ length(Palette_Essence_BM):1 ])
  ) %>%
  arrange(desc(Essence)) %>%
  select(NumForet,Essence,VhaBMT) %>%
  mutate(Tot_Vha=sum(VhaBMT,na.rm=T),
         Part_Vha=round(VhaBMT/Tot_Vha,2),
         value_Cumsum=cumsum(Part_Vha),
         pos=value_Cumsum-Part_Vha/2) %>%
  arrange(Essence)

p2 <- ggplot() +
  geom_bar(t,
           mapping=aes("",VhaBMT,fill=Essence),
           stat="identity",position="fill",width=1) +
  geom_label(t,
             mapping=aes("",pos,label=ifelse(Part_Vha>=0.05,
                                             paste0(round(Part_Vha*100,0)," %"),
                                             NA)),
             # position=position_dodge(width=1),
             label.padding = unit(0.15, "lines"),
             fill="white",
             size=1.7, alpha=1) +
  scale_fill_manual(name="Essences",
                    values=Palette_Essence_BM) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta="y") +
  guides(fill=guide_legend(reverse=T)) +
  theme_bw() + MyTheme +
  theme(title=element_text(face='plain',size=7),
        plot.title=element_text(hjust=0.5),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 6),
    axis.ticks = element_blank(),
    axis.title.x=element_blank(),
    axis.title.y=element_blank(),
    legend.text = element_text(size = 5),
    legend.title = element_text(size=6,face='plain'),
    legend.position="bottom",
    legend.direction="horizontal",
    # legend.title=element_text(size = 7),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank())

# grid.arrange(p1,p2,nrow=1)
mylegend1 <- g_legend(p1)
mylegend2 <- g_legend(p2)

grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                               p2 + theme(legend.position="none"),
                         ncol=2,nrow=1),
             arrangeGrob(mylegend1,
                         mylegend2,
                         ncol=2,nrow=1,widths=c(5,3)),
             nrow=2,heights=c(8,4))
@

<<Preparation_CompositionBM, echo=F, message=F, eval=T >>=
t <- dplyr::filter(gfForetBM_Essence, NumForet==Choix & Cycle==DernierCycle & !is.na(Essence)) %>%
  dplyr::select(NumForet,Cycle,Essence,BMSinf,BMSsup,BMPinf,BMPsup) %>%
  melt(id=c("NumForet","Cycle","Essence"),
       variable.name="Type", value.name="Vha") %>%
  left_join(Essences[,c("Nom","Reg")], by=c("Essence"="Nom"))
ListEss_BM <- unique(t$Essence)
@
\FloatBarrier

% \subsection{Composition}

<<Comment_3.2.2, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2.2")
cat(Comment$Texte)
@

Sur les \Sexpr{length(unique(ListEss[,"Essence"]))} espèces échantillonnées au total sur le dispositif, \Sexpr{length(ListEss_BM)} sont présents sous forme de bois mort. La figure \ref{fig:DiversiteBoisMort} donne une  image  de la répartition du volume de bois mort représenté par les différentes essences selon la taille et la position.

<<PreparationDiversiteBoisMort, echo=F, comment=NA, message=F,eval=T,include=Eval_BM>>=
t <- dplyr::filter(gfForetBM_Essence, NumForet==Choix & Cycle==DernierCycle & !is.na(Essence)) %>%
  dplyr::select(NumForet,Cycle,Essence,BMSinf,BMSsup,BMPinf,BMPsup) %>%
  melt(id=c("NumForet","Cycle","Essence"),
       variable.name="Type", value.name="Vha") %>%
  left_join(Essences[,c("Nom","Reg")], by=c("Essence"="Nom"))

Levels1 <- sort(unique(t$Essence))
Levels2 <- c("BMSinf","BMSsup","BMPinf","BMPsup")

df_Scales <- data.frame(Nb_Essences=seq(0,40),
                        Classe_Essence=sort(c(rep(c(1,seq(5,35,5)),5),35)),
                        Height_Essence=c(sort(rep(seq(1,8),5)),8)) %>%
  mutate(Height_Essence=ifelse(Height_Essence==1 | Height_Essence==2,3,Height_Essence))
Param_Essence <- df_Scales$Height_Essence[match(length(Levels1),df_Scales$Nb_Essences)]
if (is.na(Param_Essence)) {
  Param_Essence <- 8
}
@

<<DiversiteBoisMort, echo=F, fig.pos='ht', comment=NA, message=F, fig.cap="R\u00E9partition des volumes de bois mort par essence (m3/ha)", fig.height=Param_Essence, fig.width="\\textwidth",eval=Eval_BM,include=Eval_BM>>=
# DiversiteBoisMort,

# Voir préparation du chunk ci-dessus
# tk_messageBox(type="ok",
#               message="DiversiteBoisMort")
t <- dplyr::mutate(t,Essence=match(Essence,Levels1),
            Type=match(Type,Levels2)) %>%

  dplyr::select(NumForet,Cycle,Type,Essence,Vha) %>%
  group_by(Type) %>%
  dplyr::mutate(rescale = rescale(Vha),
         taux=Vha/sum(Vha,na.rm=T)*100,
         Vha=ifelse(Vha<0.1,round(Vha,2),round(Vha,1))) %>%
  ungroup() %>%
  mutate(taux=ifelse(is.na(taux),0,taux))

ggplot(t, aes(Type,Essence)) +
  geom_tile(aes(fill = taux), colour = "black") +
  # ggplot2::geom_text(aes(Type,Nom,label=paste0(round(Vha,3)," tiges/ha")),size=2) + non m3/ha !!
  ggplot2::geom_text(aes(Type,Essence,
                         label=ifelse(Vha!=0,
                                      round(Vha,3),"")),
                     size=2.5) +
  scale_fill_gradient(name="Part du \nvolume (%)", low = "white", high = "darkgreen",
                      limits=c(0,100),
                      breaks=c(0,25,50,75,100)) +
  scale_x_continuous(expand=c(0,0),
                     breaks=seq(1,4),
                     limits=c(0.5,4.5),
                     minor_breaks=seq(0.5,4.5,0.1),
                     label=c("Bois Mort au sol \n< 30 cm de Diam",
                             "Bois Mort au sol \n> 30 cm de Diam",
                             "Bois Mort sur pied \n< 30 cm de Diam",
                             "Bois Mort sur pied \n> 30 cm de Diam")) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0.5,max(t$Essence,na.rm=T)+0.5),
                     breaks=seq(1,max(t$Essence,na.rm=T)),
                     minor_breaks=seq(0.5,max(t$Essence,na.rm=T)+0.5,0.1),
                     label=Levels1) +
  labs(x=NULL, y=NULL) + MyTheme +
  theme(axis.text.x  = element_text(size=9, angle = 45, hjust = 1),
        axis.text.y  = element_text(size=9),
        legend.text=element_text(size=8),
        legend.title=element_text(size=9,face='plain'),
        panel.grid.major=element_line(colour="gray"),
        panel.grid.minor=element_line(colour="gray"),
        panel.background=element_rect(fill="white"))

@
\FloatBarrier
% \clearpage
% \vspace{5cm}
% La figure \ref{fig:CompoBoisMort} illustre la part relative des  différentes essences relevées en volume et selon un regroupement opéré et précisé dans le tableau \ref{EssReg} en annexe \ref{Regroupement}.

<<CompoBoisMort, echo=F, message=F, fig.height=4, fig.cap="R\u00E9partition du volume de bois mort entre les diff\u00E9rentes essences relev\u00E9es.", fig.pos="H",include=F,eval=F>>=
# CompoBoisMort,
# tk_messageBox(type="ok",
#               message="CompoBoisMort")
# t <- dplyr::filter(gfForetBM_EssenceClasse,NumForet==Choix) %>%
  t <- dplyr::filter(gfForetBM_EssRegClasse,NumForet==Choix) %>%
  # left_join(CodeEssence) %>%
  # group_by(NumForet,Foret,Cycle,EssReg) %>%
  group_by(EssReg) %>%
  dplyr::summarise(Vha=sum(BMSinf,BMSsup,BMPinf,BMPsup,na.rm=T)) %>%
  ungroup() %>%
  melt(id="EssReg") %>%
  group_by(variable) %>%
  dplyr::mutate(Tot=sum(value,na.rm=T),
         Ratio=value/Tot,
         RatioCum=cumsum(value/Tot)) %>%
  ungroup() %>%
  arrange(variable)
ggplot() +
  geom_bar(t,mapping=aes(variable,y=value,fill=EssReg),
           stat="identity",position="fill", width=1) +
  coord_polar(theta="y") +
  ggplot2::geom_text(t, mapping=aes(x=1,
                           y=round(RatioCum-Ratio/2,3),
                           label = ifelse(Ratio > 0.1,
                                          paste0(round(value,1)," m3/ha"),
                                          "")),
            size=2.5, alpha=1, colour="black") +
  coord_polar(theta = "y") +
  scale_x_discrete("") +
  scale_y_continuous(name="Part relative des essences",labels = percent) +
  # scale_fill_discrete("Essences Regroup\u00E9es") +
  scale_fill_manual("Essences Regroup\u00E9es :", values=Palette) +
  guides(fill=guide_legend(ncol=ifelse(length(unique(t$EssReg))>10,2,1),bycol=T)) +
  theme_bw() + theme(title=element_text(face='plain'),
    axis.text.y  = element_blank(),
    axis.text.x = element_text(size = 6),
    axis.ticks = element_blank(),
    axis.title.x=element_text(face='plain'),
    legend.text = element_text(size = 7),
    # legend.title = element_text(size=9,face='plain'),
    legend.position="right",
    strip.text = element_text(size = 7, colour="white"),
    legend.title=element_text(size = 8),
    plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"),
    panel.grid.major = element_blank(),
    panel.border=element_blank(),
    strip.background = element_rect(fill="forestgreen", colour="black"))

@
\FloatBarrier

<<BMStades, echo=F, fig.pos="H", fig.width=3.5, fig.height=3, fig.cap= "Diversit\u00E9 des stades de d\u00E9composition par types de bois mort.\\\\BMinf = bois mort au sol inf\u00E9rieur \u00E0 30cm; BMSsup = bois mort au sol sup\u00E9rieur \u00E0 30cm; BMPinf = bois mort sur pied inf\u00E9rieur \u00E0 30cm; BMPsup = bois mort sur pied sup\u00E9rieur \u00E0 30cm", fig.subcap=c("Stade de duret\u00E9", "Stade d'\u00E9corce", out.width='.49\\linewidth', out.extra='scale=1'),include=F,eval=F>>=
# BMStades,
tab <- subset(gfForetBM_StadeD, NumForet==Choix & Cycle==DernierCycle)
pos <- which(is.na(is.na(tab$Type)))
if (length(pos) > 0) {
  tab <- tab[-pos,]
}
# tab <- tab[!is.na(tab$Type),]

ggplot(tab, aes(x=Type, y=Vha, fill=StadeD)) +
  geom_bar(stat = "identity", position='stack') +
  MyTheme2 + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(y="Volume \u00E0 l'hectare (m3/ha)") +
  scale_x_discrete() +
  guides(fill=guide_legend("Stade de \npourriture",
                           reverse=T))


tab <- subset(gfForetBM_StadeE, NumForet==Choix & Cycle==DernierCycle)
tab <- tab[!is.na(tab$Type),]
ggplot(tab, aes(x=Type, y=Vha, fill=StadeE)) +
  geom_bar(stat = "identity", position='stack') +
  MyTheme2 + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(y="Volume \u00E0 l'hectare (m3/ha)") +
  guides(fill=guide_legend("Stade \n\u00E9corce",
                           reverse=T))
@
\FloatBarrier

% Le tableau \ref{BoisMort} fournit par cycle, l'importance en volume du bois mort en distinguant bois mort au sol et sur pied.
<<BoisMort, echo=FALSE, results='asis', fig.pos="H", comment=F,include=F,eval=F>>=
t1 <- filter(gfForetBMP_,NumForet==Choix) %>%
  select(NumForet,Cycle,Vha) %>%
  mutate(Type="sur pied")
t2 <- filter(gfForetBMS_,NumForet==Choix) %>%
  select(NumForet,Cycle,Vha) %>%
  mutate(Type="au sol")

t <- rbind(t1,t2) %>%
  filter(!is.na(Vha)) %>%
  select(-NumForet) %>%
  arrange(Cycle) %>%
  MultiRow("Cycle")
pos <- which(!is.na(t$Cycle))-1

print(xtable(t,
             caption = "Importance et type de bois mort.",
             digits=c(0,0,1,0),
             label = "BoisMort",
             align=c(rep("c|",dim(t)[2]),"c"),
             caption.placement="top"),
      include.rownames=FALSE,
      hline.after=pos,
      sanitize.text.function=function(x){return(x)},
      size="\\footnotesize")
@

% \FloatBarrier
% \subsubsection{Importance par nature, dimension et stade de décomposition}
% La figure \ref{fig:BMSline1} fournit l'importance du bois mort au sol, exprimée en volume, tandis que la figure \ref{fig:BMSline2} l'exprime par stade de décomposition.
<<BMSline1, echo=FALSE, size='footnotesize', include=T, fig.pos="H", fig.height=2, fig.cap= "Importance du bois mort au sol.",include=F, eval=F>>=
t1 <- filter(gfForetBMS_ClasseStadeD,
             NumForet==Choix &
               !is.na(Vha)) %>%
  mutate(Type="BMS") %>%
  select(NumForet,Cycle,Classe,Vha,StadeD,Type)
t2 <- filter(gfForetBMP_ClasseStadeD,
             NumForet==Choix &
               !is.na(Vha)) %>%
  select(NumForet,Cycle,Classe,Vha,StadeD) %>%
  mutate(Type="BMP")
t <- rbind(t1,t2) %>%
  mutate(Titre=paste0("Cycle ",Cycle))
if (dim(t)[1] > 0) {
  ggplot() +
    geom_bar(t,mapping=aes(x=Classe,y=Vha,fill=Type),
             stat="identity",position='stack') +
    labs(x="Classe de diamètre",y="Volume( m3/ha)") +
    facet_wrap(~Titre,ncol=2) +
    MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                    strip.background = element_rect(fill=NA, colour=NA))
} else {print("Pas de bois mort")}
@

<<BMSline2, echo=F, fig.pos="H", fig.height=2, fig.cap= "Importance du bois mort au sol par stade de dureté du bois.",include=F, eval=F>>=
t1 <- filter(gfForetBMS_ClasseStadeD,
             NumForet==Choix &
               !is.na(Vha)) %>%
  mutate(Type="BMS") %>%
  select(NumForet,Cycle,Classe,Vha,StadeD,Type)
t2 <- filter(gfForetBMP_ClasseStadeD,
             NumForet==Choix &
               !is.na(Vha)) %>%
  select(NumForet,Cycle,Classe,Vha,StadeD) %>%
  mutate(Type="BMP")
t <- rbind(t1,t2) %>%
  arrange(desc(StadeD)) %>%
  mutate(Titre=paste0("Cycle ",Cycle))
if (dim(t)[1] > 0) {
  ggplot() +
    geom_bar(t,mapping=aes(x=Classe,y=Vha,fill=factor(StadeD)),
             stat="identity",position='stack') +
    #     scale_x_continuous(limits=c(0,max(t$Classe,na.rm=T)),
    #                        breaks=seq(10,max(t$Classe,na.rm=T),20)) +
    #   ,
    #                        expand=c(0,0)) +
    # scale_y_continuous(expand=c(0,0)) +
    facet_wrap(~Titre,ncol=2) +
    scale_fill_grey(name="Stade de\npourriture",
                    start=0.9,
                    end=0.1,
                    na.value="grey50") +
    MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                    strip.background = element_rect(fill=NA, colour=NA))
} else {print("Pas de bois mort")}
@

<<BMSline3, echo=F, fig.pos="H", fig.height=2, fig.cap= "Importance du bois mort au sol par stade de décomposition de l'écorce.",include=F, eval=F>>=
t1 <- filter(gfForetBMS_ClasseStadeE,
             NumForet==Choix &
               !is.na(Vha)) %>%
  mutate(Type="BMS") %>%
  select(NumForet,Cycle,Classe,Vha,StadeE,Type)
t2 <- filter(gfForetBMP_ClasseStadeE,
             NumForet==Choix &
               !is.na(Vha)) %>%
  select(NumForet,Cycle,Classe,Vha,StadeE) %>%
  mutate(Type="BMP")
t <- rbind(t1,t2) %>%
  arrange(-StadeE) %>%
  mutate(Titre=paste0("Cycle ",Cycle))
if (dim(t)[1] > 0) {
  ggplot() +
    geom_bar(t,mapping=aes(x=Classe,y=Vha,fill=factor(StadeE)),
             stat="identity",position='stack') +
    facet_wrap(~Titre,ncol=2) +
    scale_fill_grey(name="Stade\nécorce",
                    start=0.9,
                    end=0.1,
                    na.value="grey50") +
    MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                    strip.background = element_rect(fill=NA, colour=NA))
}

@
\FloatBarrier

\EditIf{\Sexpr{DernierCycle > 1}}{TRUE}{

\subsection{Evolution du bois mort}
Le tableau \ref{Tab_EvolBM} et la figure \ref{fig:Hist_EvolBM} présentent l'évolution des volumes de bois mort.

<<Tab_EvolBM, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3,results='asis',eval=(Eval_BM & Eval_Evol),include=(Eval_BM & Eval_Evol),message=F,warning=F>>=
EvolBM_ALIBI <- expand.grid(Cycle=1:DernierCycle,
                            NumForet=Choix,
                           variable=c("BMSinf","BMSsup",
                                      "BMPinf","BMPsup","VhaBMT"),
                           stringsAsFactors=F) %>%
  data.frame() %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(variable=factor(variable,levels=c("BMSinf","BMSsup",
                                           "BMPinf","BMPsup","VhaBMT")))

df1 <- filter(gfForetBM_,
         NumForet==Choix) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Cycle,Annee,BMSinf,BMSsup,BMPinf,BMPsup,VhaBMT) %>%
  melt(id=c("Annee","Cycle")) %>%
  mutate(variable=factor(variable,levels=c("BMSinf","BMSsup",
                                           "BMPinf","BMPsup","VhaBMT"))) %>%
  full_join(EvolBM_ALIBI) %>%
  select(Annee,variable,value) %>%
  dcast(Annee ~ variable,
        value.var="value") %>%
  arrange(-Annee) %>%
  group_by(Annee) %>%
  mutate(Part_BMSinf=round(BMSinf/VhaBMT*100,0),
         Part_BMSsup=round(BMSsup/VhaBMT*100,0),
         Part_BMPinf=round(BMPinf/VhaBMT*100,0),
         Part_BMPsup=round(BMPsup/VhaBMT*100,0),
         Part_VhaBMT=round(VhaBMT/VhaBMT*100,0),

         BMSinf=ifelse(BMSinf!=0,
                       ifelse(BMSinf > 0.1,
                              round(BMSinf,1),round(BMSinf,2)),NA),
         BMSsup=ifelse(BMSsup!=0,
                       ifelse(BMSsup > 0.1,
                              round(BMSsup,1),round(BMSsup,2)),NA),
         BMPinf=ifelse(BMPinf!=0,
                       ifelse(BMPinf > 0.1,
                              round(BMPinf,1),round(BMPinf,2)),NA),
         BMPsup=ifelse(BMPsup!=0,
                       ifelse(BMPsup > 0.1,
                              round(BMPsup,1),round(BMPsup,2)),NA),
         VhaBMT=ifelse(VhaBMT!=0,
                       ifelse(VhaBMT > 0.1,
                              round(VhaBMT,1),round(VhaBMT,2)),NA),

         # Tot_BMSinf=sum(BMSinf,na.rm=T),
         # Tot_BMSsup=sum(BMSsup,na.rm=T),
         # Tot_BMPinf=sum(BMPinf,na.rm=T),
         # Tot_BMPsup=sum(BMPsup,na.rm=T),
         # Tot_VhaBMT=sum(VhaBMT,na.rm=T),

         BMSinf=ifelse(!is.na(BMSinf),
                       paste0("\\footnotesize{",
                              BMSinf,
                              ifelse(!is.na(Part_BMSinf),
                                     paste0("} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                            Part_BMSinf,
                                            "\\%)}}"),"}")),
                       ""),
         BMSsup=ifelse(!is.na(BMSsup),
                       paste0("\\footnotesize{",
                              BMSsup,
                              ifelse(!is.na(Part_BMSsup),
                                     paste0("} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                            Part_BMSsup,
                                            "\\%)}}"),"}")),
                       ""),
         BMPinf=ifelse(!is.na(BMPinf),
                       paste0("\\footnotesize{",
                              BMPinf,
                              ifelse(!is.na(Part_BMPinf),
                                     paste0("} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                            Part_BMPinf,
                                            "\\%)}}"),"}")),
                       ""),
         BMPsup=ifelse(!is.na(BMPsup),
                       paste0("\\footnotesize{",
                              BMPsup,
                              ifelse(!is.na(Part_BMPsup),
                                     paste0("} \\scriptsize{\\textcolor{CornflowerBlue}{(",
                                            Part_BMPsup,
                                            "\\%)}}"),"}")),
                       ""),
         VhaBMT=ifelse(!is.na(VhaBMT),
                       paste0("\\cellcolor{LightGray} \\textbf{\\footnotesize{",
                              VhaBMT,
                              "} \\scriptsize{\\textcolor{Brown}{(",
                              Part_VhaBMT,
                              "\\%)}}}"),
                       "\\cellcolor{LightGray}")) %>%
  ungroup() %>%
  select(Annee,BMSinf,BMSsup,BMPinf,BMPsup,VhaBMT) %>%
  arrange(Annee) %>%
  rename_("\\hline\n\\multirow{2}{*}{\\parbox{2cm}{\\centering \\textbf{Années d'inventaire}}}"="Annee",
          " & \\multicolumn{2}{c|}{\\textbf{Bois mort au sol}}"="BMSinf",
          " "="BMSsup",
          " & \\multicolumn{2}{c|}{\\textbf{Bois mort sur pied}}"="BMPinf",
          " "="BMPsup",
          " & \\multirow{2}{*}{\\parbox{2cm}{\\centering \\textbf{Bois mort total \\scriptsize{(m3/ha)}}}}\\\\\n"="VhaBMT")



Entete <- paste0(paste0(names(df1),collapse=""),"\n\\cline{2-5}\n")
names(df1) <- c(" ",
              "< 30cm \\scriptsize{(m3/ha)}",
              "$\\geqslant$ 30cm \\scriptsize{(m3/ha)}",
              "< 30cm \\scriptsize{(m3/ha)}",
              "$\\geqslant$ 30cm \\scriptsize{(m3/ha)}",
              " ")

Digits=rep(0,dim(df1)[2]+1)

# %%%%%%%%%% Impression tableau
print(xtable(df1,
             # digits=rep(0,dim(t1)[2]+1),
             digits=c(0,0,rep(1,dim(df1)[2]-1)),
             align=c("M{0cm}","|M{2cm}|",rep("M{2cm}|",dim(df1)[2]-2),"M{2cm}|"),
             caption="Evolution des volumes de bois mort au cours du temps",
             label="Tab_EvolBM"),
      caption.placement = "bottom",
      hline.after=0:dim(df1)[1],
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      add.to.row=list(
        pos=list(-1),
        command=Entete),
      size="\\footnotesize")
@

<<Courbe_EvolBM, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3, fig.cap= "Evolution des volumes de bois mort",results='asis',eval=F,include=F,message=F,warning=F>>=
  # BM_Intitule <- data.frame(Base=c("BMSinf","BMSsup","BMPinf","BMPsup"),
  #                   Intitule=c("Bois mort au sol < ou = 30",
  #                              "Bois mort au sol > 30",
  #                              "Bois mort sur pied < ou = 30",
  #                              "Bois mort sur pied > 30"),
  #                   stringsAsFactors=T) %>%
  # mutate(Base=factor(Base,levels=c("BMSinf","BMSsup","BMPinf","BMPsup")))
  BM_Intitule <- data.frame(Base=c("BMS","BMP"),
                    Intitule=c("Bois mort au sol",
                               "Bois mort sur pied"),
                    stringsAsFactors=T) %>%
  mutate(Base=factor(Base,levels=c("BMS","BMP")))


EvolBM_ALIBI <- expand.grid(Cycle=1:DernierCycle,
                            NumForet=Choix,
                           variable=c("BMS","BMP"),
                           stringsAsFactors=F) %>%
  data.frame() %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  mutate(variable=factor(variable,levels=c("BMS","BMP")))

df <- filter(gfForetBM_,
         NumForet==Choix) %>%
  mutate(BMS=BMSinf+BMSsup,
         BMP=BMPinf+BMPsup) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Cycle,Annee,BMS,BMP) %>%
  melt(id=c("Annee","Cycle")) %>%
  mutate(variable=factor(variable,levels=c("BMS","BMP"))) %>%
  full_join(EvolBM_ALIBI) %>%
  left_join(BM_Intitule,
            by=c("variable"="Base")) %>%
  mutate(variable=Intitule,
         variable=factor(variable,levels=c("Bois mort au sol",
                               "Bois mort sur pied"))) %>%
  select(Cycle,Annee,variable,value) %>%
  replace(is.na(.),0)

df_Bis <- filter(df,
         is.element(Cycle,c(1,DernierCycle)))

# df1$value[which(is.na(df1$value))] <- 5

Y=max(df1$value)

Palette_CatBM <- c("Gray30","Gray75")
names(Palette_CatBM) <- c("Bois mort au sol",
                               "Bois mort sur pied")

ggplot() +
  geom_line(df,
             mapping=aes(factor(Annee),value,colour=variable,group=variable)) +
  # geom_point(df,
  #            mapping=aes(factor(Annee),value,colour=variable,group=variable)) +
  geom_label_repel(df_Bis,
                   mapping=aes(factor(Annee),value,label=variable),
                   label.padding = unit(0.15, "lines"),
                     size=1.7, alpha=1, colour="black") +
  # geom_label_repel(df_Bis,
  #                  mapping=aes(Cat,Moy_AcctD,label=Annee),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  # scale_x_continuous(name="Catégories de diamètre",
  #                    # limits=c(10,max(df_AcctD$Classe,na.rm=T)),
  #                    # breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,5),
  #                    expand=c(0,0)) +
  scale_y_continuous(name="Volumes de bois mort (m3/ha/an)") +
  scale_colour_manual(name="Années d'inventaire",
                      values=Palette_CatBM) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
  labs(x="Années d'inventaire") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
@

<<Hist_EvolBM, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=3, fig.cap= "Evolution des volumes de bois mort",results='asis',eval=(Eval_BM & Eval_Evol),include=(Eval_BM & Eval_Evol),message=F,warning=F>>=
  # BM_Intitule <- data.frame(Base=c("BMSinf","BMSsup","BMPinf","BMPsup"),
  #                   Intitule=c("Bois mort au sol < ou = 30",
  #                              "Bois mort au sol > 30",
  #                              "Bois mort sur pied < ou = 30",
  #                              "Bois mort sur pied > 30"),
  #                   stringsAsFactors=T) %>%
  # mutate(Base=factor(Base,levels=c("BMSinf","BMSsup","BMPinf","BMPsup")))
  BM_Intitule <- data.frame(Base=c("BMS","BMP"),
                    Intitule=c("Bois mort au sol",
                               "Bois mort sur pied"),
                    stringsAsFactors=T) %>%
  mutate(Base=factor(Base,levels=c("BMS","BMP")))


EvolBM_ALIBI <- expand.grid(Cycle=1:DernierCycle,
                            NumForet=Choix,
                           variable=c("BMS","BMP"),
                           stringsAsFactors=F) %>%
  data.frame() %>%
  left_join(Cycles_Disp[,c("NumForet","Cycle","Annee")]) %>%
  mutate(variable=factor(variable,levels=c("BMS","BMP")))

df <- filter(gfForetBM_,
         NumForet==Choix) %>%
  mutate(BMS=BMSinf+BMSsup,
         BMP=BMPinf+BMPsup) %>%
  left_join(Cycles[,c("NumForet","Cycle","Annee")]) %>%
  select(Cycle,Annee,BMS,BMP) %>%
  melt(id=c("Annee","Cycle")) %>%
  mutate(variable=factor(variable,levels=c("BMS","BMP"))) %>%
  full_join(EvolBM_ALIBI) %>%
  left_join(BM_Intitule,
            by=c("variable"="Base")) %>%
  mutate(variable=Intitule,
         variable=factor(variable,levels=c("Bois mort au sol",
                               "Bois mort sur pied"))) %>%
  select(Cycle,Annee,variable,value) %>%
  replace(is.na(.),0)

df_Bis <- filter(df,
         is.element(Cycle,c(1,DernierCycle)))

# df1$value[which(is.na(df1$value))] <- 5

Y=max(df$value,na.rm=T)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

# Palette_CatBM <- c("Gray30","Gray75")
Palette_CatBM <- c("burlywood1","chocolate4")
names(Palette_CatBM) <- c("Bois mort au sol",
                               "Bois mort sur pied")

ggplot() +
  geom_bar(df,
             mapping=aes(factor(Annee),value,fill=variable),
           position="dodge",stat="identity",width=0.5) +
  # geom_point(df,
  #            mapping=aes(factor(Annee),value,colour=variable,group=variable)) +
  # geom_label_repel(df_Bis,
  #                  mapping=aes(factor(Annee),value,label=variable),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  # geom_label_repel(df_Bis,
  #                  mapping=aes(Cat,Moy_AcctD,label=Annee),
  #                  label.padding = unit(0.15, "lines"),
  #                    size=1.7, alpha=1, colour="black") +
  # scale_x_continuous(name="Catégories de diamètre",
  #                    # limits=c(10,max(df_AcctD$Classe,na.rm=T)),
  #                    # breaks=seq(10,floor(max(df_AcctD$Classe,na.rm=T)/20+0.5)*20,5),
  #                    expand=c(0,0)) +
  scale_y_continuous(name="Volumes de bois mort (m3/ha/an)",
                     limits=c(0,Y*1.1),
                     breaks=seq(0,Y*1.3,by_VALUE)) +
  scale_fill_manual(name="",
                      values=Palette_CatBM) +
  # guides(colour=guide_legend(nrow=1,
  #                            byrow=T,
  #                            order=2),
  #        size=guide_legend(order=1)) +
  labs(x="Années d'inventaire") +
  MyTheme + theme(legend.position="bottom",
                  legend.direction="horizontal",
                  legend.box="vertical",
                  legend.box.just="bottom",
                  legend.spacing.y = unit(0,"cm"),
                  legend.title=element_text(size=8),
                  legend.text=element_text(size=7),

                  axis.title.x=element_text(size=8),
                  axis.title.y=element_text(size=8),
                  axis.text.x=element_text(size=7),
                  axis.text.y=element_text(size=7),

                  strip.background=element_blank(),
                  strip.text=element_text(face="bold"))
@
}{}

\subsection{Ratio entre bois mort et bois vivant}

<<Comment_3.2.3, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2.3")
cat(Comment$Texte)
@

La figure \ref{fig:Hist_BMBV} représente conjointement le volume de bois mort total (hors classe 5 cm) et le volume de bois total (c'est-à-dire la somme des volumes de bois mort et de bois vivant) par classe de diamètre.\\

<<Ratio, echo=F, fig.pos='H', fig.height=3, fig.cap= "Importance relative du bois mort par classes de diamètre.", message=F, eval=F, include=F>>=
t1 <- filter(gfForetBMS_Classe,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(Cycle,Classe,Vha) %>%
  mutate(Type="BMP",
         Type1="BM")
t2 <- filter(gfForetBMS_Classe,NumForet==Choix) %>%
  select(Cycle,Classe,Vha) %>%
  mutate(Type="BMS",
         Type1="BM")
t3 <- filter(gfForetDen_Classe,
             NumForet==Choix & Cycle==DernierCycle) %>%
  select(Cycle,Classe,Vha) %>%
  mutate(Type="Vivant",
         Type1="Vivant")
t <- rbind(t1,t2,t3) %>%
  mutate(Titre=paste0("Cycle ",Cycle))
tText <- group_by(t,Cycle,Type1,Titre) %>%
  summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup() %>%
  dcast(Cycle + Titre ~ Type1,value.var="Vha") %>%
  mutate(ratio=BM/(Vivant+BM)) %>%
  replace(is.na(.),0)
t <- left_join(t,tText)

X <- max(t3$Classe,na.rm=T)*0.8
Y <- max(t3$Vha,na.rm=T)

ggplot(t,aes(x=Classe,y=Vha,fill=Type,group=Titre)) +
  geom_bar(stat="identity",position='stack') +
  # facet_wrap(~Titre) +
  geom_text(data=tText,
            mapping=aes(x=X,y=Y,label=paste0("Ratio = ",
                                            round(ratio*100,1),
                                            "%"),
                        group=Titre),
            size=3,
            parse=F,inherit.aes=F) +
  #   annotate("text",x=X,y=Y,label=paste("ratio =",
  #                                       round(t$ratio*100,1),
  #                                       "%"),
  #            size=3) +
  scale_fill_grey() +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                  strip.background = element_rect(fill=NA, colour=NA))
@

% \textcolor{red}{Attention : problème sur les calculs de perches détecté avec la figure ci-dessous. Revoir afi\_Calculs() pour les perches (+ Vc + Acct ...)}
% Mettre ratio BM/BV dans une phrase à part et non sur figure.
<<Hist_BMBV, echo=F, message=F, comment=NA, size='footnotesize', fig.pos="H", fig.height=3.5, fig.cap= "Importance relative du bois mort par classes de diam\u00E8tre.",eval=T,include=Eval_BM>>=

t <- dplyr::filter(gfForetBM_Classe,
                   NumForet==Choix & Cycle==DernierCycle &
                     Classe > 5) %>%
  select(NumForet,Foret,Classe,VhaBMT)

## -- ##
t1_PREC <- dplyr::filter(gfForetDen_Classe,
                    NumForet==Choix & Cycle==DernierCycle) %>%
  dplyr::select(NumForet,Foret,Classe,Vha) %>%
  group_by(NumForet,Foret,Classe) %>%
  dplyr::summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup()
t1_PER <- dplyr::filter(gfForetPer_Classe,
                    NumForet==Choix & Cycle==DernierCycle) %>%
  dplyr::select(NumForet,Foret,Classe,Vha) %>%
  group_by(NumForet,Foret,Classe) %>%
  dplyr::summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup()
t1_TAILLIS <- dplyr::filter(gfForetTaillis_Classe,
                    NumForet==Choix & Cycle==DernierCycle) %>%
  dplyr::select(NumForet,Foret,Classe,Vha) %>%
  group_by(NumForet,Foret,Classe) %>%
  dplyr::summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup()

t1 <- rbind(t1_PREC,
            t1_PER,
            t1_TAILLIS) %>%
  group_by(NumForet,Foret,Classe) %>%
  summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup()
## -- ##

t2 <- full_join(t,t1) %>%
 replace(is.na(.),0) %>%
    ungroup()
# Ratio=round(mean(t2$VhaBMT/(t2$Vha+t2$VhaBMT),na.rm=T),3)
# Mean =round(mean(t2$VhaBMT,na.rm=T),2)
BMTot=round(sum(t2$VhaBMT,na.rm=T),1)
BTot=round(sum(t2$Vha+t2$VhaBMT,na.rm=T),1)
Ratio=round(BMTot/BTot,3)
t2 <- melt(t2,id=c("NumForet","Foret","Classe")) %>%
  dplyr::mutate(value=ifelse(is.na(value),0,value),
         variable=factor(variable,levels=c("VhaBMT","Vha"))) %>%
  arrange(variable)

 # En absolu

X=max(t2$Classe,na.rm=T)
# value_breaks <- ifelse(X >= 50,
#                        c(0,10,30,seq(50,X,20)),
#                        seq(0,X,10))
value_breaks <- seq(0,X,10)


Y=max(t2$value,na.rm=T)
Y=ifelse(Y==0,
         10,Y)
# value_by <- ifelse(Y>=5000,
#                    1000,Y/10)
# if (Y >= 1000) {
by_VALUE <- floor(((Y/8+Y/15)/2)/100+0.5)*100
# }
if (Y < 650) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/50+0.5)*50
}
if (Y < 325) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/25+0.5)*25
}
if (Y < 130) {
by_VALUE <- floor(((Y/8+Y/15)/2)/10+0.5)*10
}
if (Y < 65) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/5+0.5)*5
  by_VALUE <- ifelse(by_VALUE==0,
                     5,by_VALUE)
}
if (Y < 40) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/3+0.5)*3
  by_VALUE <- ifelse(by_VALUE==0,
                     3,by_VALUE)
}
if (Y < 27) {
  by_VALUE <- floor(((Y/8+Y/15)/2)/2+0.5)*2
  by_VALUE <- ifelse(by_VALUE==0,
                     2,by_VALUE)
}
if (Y <= 13) {
  by_VALUE <- 1
}

ggplot() +
  geom_bar(arrange(t2,variable),
           mapping=aes(Classe,value,fill=variable), #,colour=variable
                 stat='identity',position='stack',alpha=1) +
  # geom_hline(yintercept=Mean, colour="blue", linetype=2, size=0.5) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(5,X+5),
                     breaks=value_breaks,
                     name="Classes de diam\u00E8tre") +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,Y*1.3),
                     breaks=seq(0,Y*1.3,by_VALUE),
                     # labels=percent,
                     name="Volume de bois (m3/ha)") +
  scale_fill_manual(name="Population",
                    values=c("chocolate4","green3"),
                    labels=c("Bois mort","Bois vivant")) +
#   scale_colour_manual(name="Population",
#                     values=c("gray60","limegreen"),
#                     labels=c("Bois vivant","Bois mort")) +
  annotate("text", label = c(paste("Volume bois mort total = ",BMTot,"m3/ha"),
                             # paste("Volume bois mort moyen = ",Mean,"m3/ha"),
                            paste("Volume bois total = ",BTot,"m3/ha")),
           x = rep(0.7*(max(t2$Classe,na.rm=T)+5),2), #3
           y = c(Y*1.1,
                 # Mean,
                 Y*1.1),
           vjust=c(-1.5,
                   # -0.7,
                   0),
           size=2.5,fontface='plain',color="navyblue") +
  MyTheme + theme(legend.direction="horizontal",
                  legend.position="bottom")
 # En relatif
# p2 <- ggplot() +
#   geom_bar(t2,mapping=aes(Classe,value,fill=variable),
#                  stat='identity',position='fill') +
#   # geom_hline(yintercept=Ratio, colour="blue", linetype=2, size=0.5) +
#   scale_x_continuous(expand=c(0,0),
#                      limits=c(0,max(t2$Classe,na.rm=T)+5),
#                      breaks=c(0,10,30,seq(50,max(t2$Classe,na.rm=T),20)),
#                      name="Classes de diam\u00E8tre") +
#   scale_y_continuous(expand=c(0,0),
#                      # limits=c(-1,3),
#                      breaks=seq(0,1,0.2),
#                      labels=percent,
#                      name="Part du volume total") +
#   scale_fill_manual(name="Population",
#                     values=c("limegreen","palegoldenrod"),
#                     labels=c("Bois mort","Bois vivant")) +
#   annotate("text", label = paste("ratio bois mort / bois total = ",Ratio*100,"%"),
#            x = 0.5*(max(t2$Classe,na.rm=T)+5), y = Ratio,
#            vjust=-0.7,size=2.5,fontface='plain',color="navyblue") +
#   MyTheme
#
# mylegend <- g_legend(p1)
#
# grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
#                          p2 + theme(legend.position="none"),
#                          nrow=1),
#              mylegend, nrow=2,heights=c(9, 1))
# print(getwd())
@
La part du volume de bois mort par rapport au volume de bois total s'élève dans ce dispositif à \textbf{\Sexpr{round(Ratio*100,0)} \%}.\\

% \begin{figure}[H]
% \begin{center}
% \includegraphics[width=\textwidth]{/Users/Valentin/Foret/Travail/Programmation/PSDRF/Nouvelle_Base/Template/Figures/Cycle1/RatioBis1-1.pdf}
% \end{center}
% \end{figure}
% \textcolor{red}{Ici la figure est tirée d'une analyse PSDRF pour gagner du temps (=avoir un retour sur le carnet et son contenu plus rapidement)}
\FloatBarrier


% \subsection{Bois mort sur pied}
% % \vspace{5cm}
% La figure \ref{fig:BMPtypo} s'intéresse au bois mort sur pied et permet de visualiser la répartition -- en absolu et en relatif -- du volume, selon les 3 types de bois morts sur pied inventoriés (types arbres\footnote{\underline{Type arbre :} c'est le cas des arbres qui viennent de dépérir, ou bien des arbres qui ont perdu une partie de leurs rameaux fins, mais pas de parties importantes de leur squelette.}, chandelles\footnote{\underline{Type chandelle :} il comprend les volis de hauteur supérieure à 1,30 m, ainsi que les arbres ayant perdu une partie importante de leur squelette.} et souches\footnote{\underline{Type souche :} il comprend les volis de hauteur inférieure à 1,30 m, ainsi que les souches non déracinées. Les souches sont échantillonnées quelle que soit leur hauteur.} ).

<<BMPtypo, echo=F, size='footnotesize', fig.pos="H", fig.height=3, fig.cap= "Répartition du volume de bois mort sur pied par type à l'échelle de l'ensemble du domaine d'inventaire.\\\\\\scriptsize{Arbre = arbre mort ayant conservé son squelette d'arbre vivant\\\\Souches = hauteur < 1,30 m\\\\Chandelles = arbre mort n'ayant pas conservé son squelette + hauteur > 1,30 m.}", include=F, eval=F>>=
# BMPtypo,
tab <- dplyr::filter(gfForetBMP_ClasseType,
                     NumForet==Choix & Cycle==DernierCycle & !is.na(Type)) %>%
  right_join(data.frame(NumForet=rep(Choix,4),
                        Cycle=rep(DernierCycle,4),
                        Classe=c(10,40,10,40),
                        Type=c("BMS","BMS","BMP","BMP"),
                        stringsAsFactors=F))
if (dim(tab)[1] > 0) {
  dplyr::select(NumForet,Classe,Type,Vha) %>%
    merge(CodeTypoArbres,
          by.x="Type", by.y="Code", all.x=T) %>%
    dplyr::mutate(Descriptif=factor(Descriptif,levels=c("Souches","Chandelles","Arbres"))) %>%
    arrange(Descriptif) %>%
    group_by(NumForet,Classe) %>%
    dplyr::mutate(VhaTot=sum(Vha, na.rm=T),
                  PartVha=Vha/VhaTot) %>%
    ungroup()
  SumS <- round(sum(tab$Vha[tab$Descriptif=="Souches"],na.rm=T),1)
  SumA <- round(sum(tab$Vha[tab$Descriptif=="Arbres"],na.rm=T),1)
  SumC <- round(sum(tab$Vha[tab$Descriptif=="Chandelles"],na.rm=T),1)
  SumTot <- SumS+SumA+SumC
  if (dim(tab)[1] > 0) {
    X <- max(tab$Classe,na.rm=T)
    Y <- max(tab$VhaTot,na.rm=T)
  } else {
    X=100
    Y=50
  }


  p1 <-  ggplot() +
    geom_bar(tab,
             mapping=aes(x=Classe, y=Vha, fill=Descriptif),
             stat = "identity", position='stack') +
    annotate("text",label=paste0("Volume 'Bois mort sur pied' total = ",
                                 SumTot,
                                 " m3/ha"),
             x=X*0.4,
             y=Y*1.07,
             # vjust=-5.5,
             size=2,
             col="red",fontface ='bold') +
    annotate("segment", x = X*0.2, xend = X*0.6, y = Y*1.04, yend = Y*1.04,
             colour = "red") +
    # annotate("text",label=paste0("Volume 'Arbres' total = ",
    #                             SumA,
    #                             " m3/ha"),
    #          x=X*0.4,
    #          y=Y*0.9,
    #          vjust=-3.5,
    #          size=2,
    #          col="darkred") +
    geom_label(data.frame(x=c(X*0.4,
                              X*0.4,
                              X*0.4),
                          y=c(Y*1.0,
                              Y*0.94,
                              Y*0.88),
                          label=c(paste0("Volume 'Arbres' total = ",
                                         SumA,
                                         " m3/ha"),
                                  paste0("Volume 'Chandelles' total = ",
                                         SumC,
                                         " m3/ha"),
                                  paste0("Volume 'Souches' total = ",
                                         SumS,
                                         " m3/ha"))),
               mapping=aes(x,y,label=label),
               size=2,
               col="darkred",position="dodge",
               label.padding=unit(0.1, "lines"),alpha=0.7) +
    # annotate("text",label=paste0("Volume 'Chandelles' total = ",
    #                               SumC,
    #                               " m3/ha"),
    #            x=X*0.4,
    #            y=Y*0.9,
    #            vjust=-1.5,
    #            size=2,
    #            col="darkred") +
    #   annotate("text",label=paste0("Volume 'Souches' total = ",
    #                               SumS,
    #                               " m3/ha"),
  #            x=X*0.4,
  #            y=Y*0.9,
  #            size=2,
  #            col="darkred") +
  labs(x="Classes de diamètre", y="Volume à l'hectare (m3/ha)") +
    scale_x_continuous(limits=c(5,X+5),
                       expand=c(0,0),
                       breaks=seq(10,X,10)) +
    scale_y_continuous(limits=c(0,Y*1.1),
                       expand=c(0,0)) +
    guides(fill=guide_legend(reverse=F)) +
    scale_fill_grey() +
    MyTheme + theme(legend.direction="horizontal")

  tab <- arrange(tab,Descriptif)
  if (dim(tab)[1] > 0) {
    Y <- max(tab$PartVha,na.rm=T)
  } else {
    Y=0
  }
  p2 <- ggplot(tab, aes(x=Classe, y=Vha, fill=Descriptif)) +
    geom_bar(stat = "identity", position='fill') +
    labs(x="Classes de diamètre", y="Part du volume (%)") +
    scale_x_continuous(limits=c(5,X+5),
                       expand=c(0,0),
                       breaks=seq(10,X,10)) +
    scale_y_continuous(labels=percent,
                       # limits=c(0,1),
                       expand=c(0,0)) +
    guides(fill=guide_legend(reverse=F)) +
    scale_fill_grey() +
    MyTheme

  if (dim(tab)[1] > 0) {
    mylegend <- g_legend(p1)

    grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                             p2 + theme(legend.position="none"),
                             nrow=1),
                 mylegend, nrow=2,heights=c(8,1))
  } else {
    grid.arrange(arrangeGrob(p1 + theme(legend.position="none"),
                             p2 + theme(legend.position="none"),
                             nrow=1,widths=c(1,1)))
  }
}
@
% % \vspace{5cm}
% \begin{figure}[H]
% \begin{center}
% \includegraphics[width=\textwidth]{/Users/Valentin/Foret/Travail/Placettes_Tetras/Template/Figures/BMPtypo-1.pdf}
% \end{center}
% \end{figure}
% \textcolor{red}{Ici la figure est tirée du rapport tétras pour gagner du temps (=avoir un retour sur le carnet et son contenu plus rapidement)}
% \FloatBarrier

\subsection{Diversité des stades de décomposition (pourriture et écorce)}
\EditIf{\Sexpr{Eval_Stades}}{TRUE}{
<<Comment_3.2.4, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2.4")
cat(Comment$Texte)
@

En plus de l'essence et du diamètre du bois mort, de nombreuses espèces saproxyliques sont particulièrement sensibles au stade de décomposition. On rencontre en effet des cortèges très différents selon les cas de figure (notamment chez les champignons lignicoles). L'application du protocole AFI prévoit de relever cette information selon les classes suivantes :

\begin{table}[ht]
\centering
{\footnotesize
  \begin{tabular}{cc}
  \hline
Pourriture & Ecorce\\
\hline
1. Dur ou non altéré & 1. Présente sur tout le billon\\
2. Pourriture <1/4 du diamètre & 2. Présente sur plus de 50\% de la surface\\
3. Pourriture entre 1/4 et 1/2 du diamètre & 3. Présente sur moins de 50\% de la surface\\
4. Pourriture entre 1/2 et 3/4 du diamètre & 4. Absente du billon\\
5. Pourriture supérieure à 3/4. & \\
\hline
  \end{tabular}
\caption{Codification des stades de décomposition (pourriture et écorce)}
\label{TabCodeStade}
}
\end{table}
\FloatBarrier
% \vspace{5cm}
% La figure \ref{BMStades2}  permet de visualiser la répartition du volume de bois mort total selon la taille et la position (au sol ou sur pied) par paires de stades de décomposition (pourriture et écorce)

% \begin{figure}[h]
% {\centering
<<BMStades2, echo=F, fig.pos="H",fig.height=4, fig.cap= NULL,fig.subcap=c('one plot', 'the other one', 'the other one', 'the other one'),results='asis',cache=F,eval=F,include=F>>=
# BMStades2,
t <-
  gfForetBM_StadeDStadeE %>%
  dplyr::filter(NumForet == Choix & !is.na(StadeD) & Cycle == DernierCycle) %>%
  dplyr::select(
    NumForet, Cycle, StadeD, StadeE, BMSinf, BMSsup, BMPinf, BMPsup
  ) %>%
  melt(id = c("NumForet", "Cycle", "StadeD", "StadeE"),
       variable.name = "Type", value.name = "Vha") %>%
  group_by(NumForet,Cycle,Type) %>%
dplyr::mutate(VhaTot=sum(Vha,na.rm=T),
         taux=Vha/VhaTot*100,
         StadeD=as.numeric(StadeD),
         StadeE=as.numeric(StadeE)) %>%
  ungroup() %>%
  mutate(taux=ifelse(is.na(taux),0,taux))
tempBM <- data.frame(Type=c("BMSinf","BMSsup","BMPinf","BMPsup"),
                     Col=c("deepskyblue4","navyblue","forestgreen","darkgreen"),
                     Name=c("de bois\nmort au\nsol < 30 cm\nde Diam (%)",
                            "de bois\nmort au\nsol > 30 cm\nde Diam (%)",
                            "de bois\nmort sur\npied < 30 cm\nde Diam (%)",
                            "de bois\nmort sur\npied < 30 cm\nde Diam (%)"),
                     stringsAsFactors=F)
# PaletteBM        <- c("deepskyblue4","navyblue","forestgreen","darkgreen")
# names(PaletteBM) <- c("BMSinf","BMSsup","BMPinf","BMPsup")

# if (dim(t)[1] > 0) {
#   cat("La figure \\ref{BMStades2}  permet de visualiser la distribution du volume de bois mort selon la taille et la position par paires de stades de d\\u00E9composition (pourriture et \\u00E9corce)")
plotBM <- function(data,type) {
  p <- ggplot() +
  geom_tile(dplyr::filter(data,Type==type),
            mapping=aes(StadeD,StadeE,fill=taux),colour="black") +
  scale_fill_gradient(name=paste0("Part du \nvolume"),
                      low = "white", high = tempBM$Col[match(type,tempBM$Type)],
                      limits=c(0,100),
                      breaks=c(0,25,50,75,100)) +
    labs(x="Stade de pourriture",
                      y="Stade \u00E9corce") +
    scale_x_continuous(expand=c(0,0),
                     limits=c(0.5,5.5),
                     breaks=seq(1,5),
                     minor_breaks=seq(0.5,5.5,0.1)) +
    scale_y_continuous(expand=c(0,0),
                     limits=c(0.5,4.5),
                     breaks=seq(1,4),
                     minor_breaks=seq(0.5,4.5,0.1)) +
  # guides(fill=guide_legend(title="Importance relative")) +
    MyTheme2 +
  theme(panel.grid.major=element_line(colour="gray"),
        panel.grid.minor=element_line(colour="gray"),
#         panel.grid=element_line(),
#         panel.grid=element_line(),
        panel.background=element_rect(fill="white"),
# legend.key=element_rect(col="gray"),
        legend.key.height=unit(0.5,"cm"),
        legend.key.width=unit(0.5,"cm"))
} #facet_wrap(~Type,nrow=2,ncol=2)
p1 <- plotBM(t,"BMSinf")
p2 <- plotBM(t,"BMSsup")
p3 <- plotBM(t,"BMPinf")
p4 <- plotBM(t,"BMPsup")

p1
p2
p3
p4
# setwd(repGF)
# } else {cat("")}
@
% \subfloat[Bois mort au sol < 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0(repFigures,"Cycle",ChoixCycle,"/BMStades2-1")}}}
% \subfloat[Bois mort au sol > 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0(repFigures,"Cycle",ChoixCycle,"/BMStades2-2")}}}\\ %#\vspace{0.5cm}
% \subfloat[Bois mort sur pied < 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0(repFigures,"Cycle",ChoixCycle,"/BMStades2-3")}}}
% \subfloat[Bois mort sur pied > 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0(repFigures,"Cycle",ChoixCycle,"/BMStades2-4")}}}
% }

% \subfloat[Bois mort au sol < 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0("Figures",gsub(".","_","/BMStades2-1",fixed=T))}}}
% \subfloat[Bois mort au sol > 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0("Figures",gsub(".","_","/BMStades2-2",fixed=T))}}}\\ %#\vspace{0.5cm}
% \subfloat[Bois mort sur pied < 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0("Figures",gsub(".","_","/BMStades2-3",fixed=T))}}}
% \subfloat[Bois mort sur pied > 30 cm\label{fig:BMStades2}]{\includegraphics[width=.49\linewidth]{\Sexpr{paste0("Figures",gsub(".","_","/BMStades2-4",fixed=T))}}}
% }
% \caption[Distribution des volumes de bois mort par stades de pourriture et par stades écorce]{Distribution des volumes de bois mort par stades de pourriture et par stades écorce}%\label{fig:BMStades2}
% \label{BMStades2}
% \end{figure}
%
% \FloatBarrier
% \vspace{5cm}
La figure \ref{fig:BMStades3} permet de visualiser la répartition du volume de bois mort total par stades de décomposition (pourriture et écorce).
<<BMStades3, echo=F, fig.pos='H', fig.height=2.5, fig.cap= "R\u00E9partition du volume de bois mort total par stades de pourriture et par stades \u00E9corce",eval=Eval_BM & Eval_Stades,include=Eval_BM & Eval_Stades>>=
# BMStades3,
# print(paste0(repFigures,"Cycle",ChoixCycle,"/BMStades2-1"))
# tk_messageBox(type="ok",
#               message=Eval_Stades)
t <- dplyr::filter(gfForetBM_StadeDStadeE,
                   NumForet==Choix &
                     !is.na(StadeD) &
                     Cycle==DernierCycle) %>%
  dplyr::select(NumForet,Cycle,StadeD,StadeE,BMSinf,BMSsup,BMPinf,BMPsup) %>%
  melt(id=c("NumForet","Cycle","StadeD","StadeE"),
       variable.name="Type", value.name="Vha") %>%
# t <- filter(gfForetBM_StadeDStadeE, NumForet==Choix & !is.na(Type)) %>%
  group_by(NumForet,Cycle,StadeD,StadeE) %>%
  dplyr::summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup() %>%
  group_by(NumForet,Cycle) %>%
  dplyr::mutate(VhaTot=sum(Vha,na.rm=T),
         taux=Vha/VhaTot*100,
         StadeD=as.numeric(StadeD),
         StadeE=as.numeric(StadeE)) %>%
  ungroup()


ggplot() +
  geom_tile(t,
            mapping=aes(StadeD,StadeE,fill=taux),colour="black") +
  scale_fill_gradient(name="Part du volume\nde bois mort total (%) ",
                      low = "ghostwhite", high = "tan4",
                      limits=c(0,100),
                      breaks=c(0,25,50,75,100)) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0.5,5.5),
                     breaks=seq(1,5),
                     minor_breaks=seq(0.5,5.5,0.1)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0.5,4.5),
                     breaks=seq(1,4),
                     minor_breaks=seq(0.5,4.5,0.1)) +
  labs(x="Stade de pourriture",
       y="Stade \u00E9corce") +
  theme(axis.text.x  = element_text(size=9, angle = 0, hjust = 1),
        axis.text.y  = element_text(size=9),
        legend.text=element_text(size=8),
        legend.title=element_text(size=9,face='plain'),
        # panel.grid=element_blank(),
        panel.grid.major=element_line(colour="gray"),
        panel.grid.minor=element_line(colour="gray"),
        panel.background=element_rect(fill="white"))


@
% } % pour commande EditIf

% \clearpage
\FloatBarrier
% \vspace{5cm}
% \newpage
}{Les stades d'écorce et de décomposition ne sont pas renseignés}
}{Il n'y a pas de bois mort inventorié (ou de bois mort sur pied \textbf{cubé})}

\subsection{Indice de diversité de Shannon}
<<Shannon, echo=F, fig.height=7, fig.pos='H', fig.cap="Evolution de l'indice de diversité de Shannon.">>=
Shannon_DF <- filter(gfForetDen_Essence,
             NumForet==Choix & Cycle==DernierCycle &
             Gha > 0) %>%
  select(NumForet,Essence,Gha) %>%
  group_by(NumForet) %>%
  mutate(Gha_Tot=sum(Gha,na.rm=T)) %>%
  ungroup() %>%
  mutate(Freq_Shannon=Gha/Gha_Tot,
         Shannon=Freq_Shannon*log2(Freq_Shannon))

Shannon_INDICE <- round(-sum(Shannon_DF$Shannon),2)

@

Sur la forêt, l'indice de Shannon s'élève à H = \Sexpr{Shannon_INDICE}. L'indice de diversité de Shannon est donné par la formule $ H = -\Sigma p_ilog_2(p_i)$ où $ p_i $ correspond au pourcentage de l'essence. Il est calculé en pourcentage de surface terrière.

% \clearpage
\subsection[Evaluation de l'état de conservation des habitats forestiers : analyse des données de structure]{Evaluation de l'état de conservation des habitats forestiers : analyse des données de structure\protect\footnote{Commission scientifique  et groupe forêts de Réserves naturelles de France. Evaluation de l'état de conservation (habitats forestiers et éco-complexes alluviaux). Cahier  RNF n°2. 2013, 72 p. La méthode est disponible en téléchargement sur le site internet de RNF (www.reserves-naturelles.org/publications/numero-2-des-cahiers-rnf-evaluation-de-l-etat-de-conservation-habitats-forestiers-et) ou sur demande (rnf@espaces-naturels.fr)}}

<<Comment_3.2.5, echo=F,message=F,results='asis',eval=F,include=F>>=
Comment <- filter(Comments, Section=="3.2.5")
cat(Comment$Texte)
@

La figure \ref{fig:ConservHabitats1} fournit une représentation de l'évaluation de l'état de conservation du peuplement forestier inventorié.

<<ConservHabitats1, echo=F, cache=F, fig.cap= "Évaluation de la structure forestière au regard de l'état de conservation (pour l'ensemble de la forêt)", fig.pos='H', comment=F, error=F, include=T, eval=T, message=F, fig.height=3>>=
#----- Importation des données
t <- select(gfForetFpied_, NumForet, Cycle, Vha) %>%
  filter(NumForet== Choix & !is.na(Vha) & Vha!=0) %>%
  rename(VhaArbres=Vha) %>%
  left_join(gfForetTaillis_) %>%
  rename(VhaTaillis=Vha) %>%
  left_join(gfForetBMP_) %>%
  rename(VhaBMP=Vha) %>%
  left_join(gfForetBMS_) %>%
  rename(VhaBMS=Vha) %>%
  filter(Cycle==DernierCycle)

#----- Calcul des ensembles :
t$BVivantT <- rowSums(t[,c("VhaArbres","VhaTaillis")], na.rm=T)
t$BMortT <- rowSums(t[,c("VhaBMP","VhaBMS")], na.rm=T)
t$BTot <- rowSums(t[,c("BVivantT","BMortT")], na.rm=T)

#---------- Notation Bois Mort :
#----- Ratio volume bois mort sur volume bois total
t1 <- t[,c("NumForet","Cycle","BMortT","BTot")]
t1$RatioBMT <- with(t1, BMortT/BTot*100)
t1$NoteRatioBMT <- cut(t1$RatioBMT, breaks=c(-Inf,3,5,10,15,100),labels=c(1,2,3,4,5)) #Rqe : 1er intervale = ]-Inf;3]. right=F pour changer

#----- % de bois mort > 30 cm
temp <- mutate(gfForetBMS_Classe, Type="BMS") %>%
  select(NumForet,Cycle,Classe,Vha,Type) %>%
  filter(Cycle==DernierCycle)

t2 <- select(gfForetBMP_Classe, NumForet, Cycle, Classe, Vha) %>%
  # t2 <- select(data.frame(NumForet=numeric(),
  #                         Cycle=numeric(),
  #                         Classe=numeric(),
  #                         Vha=numeric(),
  #                         stringsAsFactors=F),
  #              NumForet, Cycle, Classe, Vha) %>%
  mutate(Type="BMP") %>%
  rbind(temp) %>%
  # mutate(Type=factor(Type,levels=c("BMP","BMS"))) %>%
  # dcast(NumForet + Cycle + Classe ~ Type, value.var="Vha")
  filter(NumForet==Choix & Cycle==DernierCycle) %>%
  right_join(data.frame(NumForet=rep(Choix,4),
                        Cycle=rep(DernierCycle,4),
                        Classe=c(10,40,10,40),
                        Type=c("BMS","BMS","BMP","BMP"),
                        stringsAsFactors=F)) %>%
  mutate(Vha=ifelse(is.na(Vha),0,Vha),
         Cat=cut(Classe, breaks=c(0,30,200), labels=c("Inf","Sup"))) %>%
  group_by(NumForet,Cycle,Type,Cat) %>%
  summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup() %>%
  dcast(NumForet + Cycle ~ Type + Cat, value.var="Vha") %>%
  rename(VPinf=BMP_Inf,
         VPsup=BMP_Sup,
         VSinf=BMS_Inf,
         VSsup=BMS_Sup) %>%
  mutate(VPinf=ifelse(is.na(VPinf),0,VPinf),
         VPsup=ifelse(is.na(VPsup),0,VPsup),
         VSinf=ifelse(is.na(VSinf),0,VSinf),
         VSsup=ifelse(is.na(VSsup),0,VSsup),
         VhaBMT=VSinf+VSsup+VPinf+VPsup)

# t2 <- psdrfBMdisp
t2$RatioBM30 <-  with(t2,VPsup+VSsup/VhaBMT*100)
t2$NoteRatioBM30 <- cut(t2$RatioBM30, breaks=c(-Inf,5,25,50,75,100),labels=c(1,2,3,4,5))
#-----Stades de décomposition
t3 <- select(gfForetBMP_ClasseStadeD,
             NumForet,Cycle,Classe,StadeD,Vha) %>%
  # mutate(Type="BMP") %>%
  rbind(gfForetBMS_ClasseStadeD[,c("NumForet","Cycle","Classe","StadeD","Vha")]) %>%
  filter(NumForet==Choix & Cycle==DernierCycle) %>%
  group_by(NumForet,Cycle,StadeD) %>%
  summarise(Vha=sum(Vha,na.rm=T)) %>%
  ungroup() %>%
  group_by(NumForet,Cycle) %>%
  mutate(VhaTot=sum(Vha,na.rm=T),
         RatioBMD=Vha/VhaTot*100,
         NoteRatioBMD=ifelse(RatioBMD > 5, 1, 0)) %>%
  summarise(NoteBMD=max(cumsum(NoteRatioBMD)))

#---------- Structure horizontale :
#----- Diversité des classes de diamètre :
t4 <- select(gfForetFpied_Classe,NumForet,Cycle,Classe,Nha,Gha,Vha) %>%
  rbind(gfForetPer_Classe[,c("NumForet","Cycle","Classe","Nha","Gha","Vha")]) %>%
  rename(GhaArbres=Gha) %>%
  left_join(gfForetTaillis_Classe) %>%
  filter(NumForet==Choix & Cycle==DernierCycle) %>%
  rename(GhaTaillis=Gha) %>%
  mutate(GhaArbres=ifelse(is.na(GhaArbres),0,GhaArbres),
         GhaTaillis=ifelse(is.na(GhaTaillis),0,GhaTaillis),
         Gha=GhaArbres+GhaTaillis) %>%
  group_by(NumForet,Cycle) %>%
  mutate(GhaTot=sum(Gha,na.rm=T)) %>%
  ungroup() %>%
  data.frame()
TabSav <- t4
t4 <- mutate(t4,
             RatioGha=Gha/GhaTot*100,
             NoteRatioGha=ifelse(RatioGha > 5, 1, 0)) %>%
  group_by(NumForet,Cycle) %>%
  summarise(CumGha=max(cumsum(NoteRatioGha)),
            Note=cut(CumGha, breaks=c(-Inf,3,4,5,6,+Inf),labels=c(1,2,3,4,5),right=F)) %>%
  ungroup() %>%
  data.frame()
#----- % de TGB (% de G):
t5 <- TabSav
t5$Cat <- cut(t5$Classe, breaks=c(-Inf,17.5,27.5,47.5,67.5,+Inf), labels=c("PER","PB","BM","GB","TGB"))
t5 <- summaryBy(Gha ~ NumForet + Cycle + GhaTot + Cat, data=t5, FUN=sum, na.rm=T, keep.names=T)
# Attention : erreur au niveau du dispositif 84 : NA repéré =>
t5 <- t5[!is.na(t5$Cat),]
# Calcul du ratio :
t5$RatioTGB <- with(t5, Gha/GhaTot*100)
# t5 <- merge(t5, psdrfDispCat[,c("NumForet","Cycle","Cat")], by=c("NumForet","Cycle","Cat"), all.y=T)
# t5$RatioTGB[t5$Cat!="TGB"] <- 0
t5 <- t5[t5$Cat=="TGB",]
t5$NoteRatioTGB <- cut(t5$RatioTGB,
                       breaks=c(-Inf,0,5,10,15,+Inf),
                       labels=c(1,2,3,4,5),right=F)

# Assemblage pour radar :
TabRadar <- merge(t1[,c("NumForet","Cycle","NoteRatioBMT")],
                  t2[,c("NumForet","Cycle","NoteRatioBM30")],
                  by=c("NumForet","Cycle"),all=T)
TabRadar <- merge(TabRadar,
                  t3,
                  by=c("NumForet","Cycle"),all=T)
TabRadar <- merge(TabRadar,
                  t4[,c("NumForet","Cycle","Note")],
                  by=c("NumForet","Cycle"),all=T)
TabRadar <- merge(TabRadar,
                  t5[,c("NumForet","Cycle","NoteRatioTGB")],
                  by=c("NumForet","Cycle"),all=T)
TabRadar[is.na(TabRadar)] <- 1
TabRadar <- unique(TabRadar)

#-------------------- Graphiques :
# Preparation :

maxmin <- data.frame(
  BMort=c(5, 0),
  BMort30=c(5,0),
  StadeD=c(5, 0),
  DivClasses=c(5, 0),
  PartTGB=c(5, 0))


names(TabRadar)[match(c("NoteRatioBMT","NoteRatioBM30","NoteBMD","Note","NoteRatioTGB"),
                      names(TabRadar))] <- c("BMort","BMort30","StadeD","DivClasses","PartTGB")

ListCycle <- unique(TabRadar$Cycle) # Liste des Cycles à représenter.
ListDat <- c()
for (cycl in ListCycle) {
  # cycl <- ListCycle[1]
  temp <- TabRadar[TabRadar$Cycle==cycl,c("BMort","BMort30","StadeD","DivClasses","PartTGB")]

  dat <- rbind(maxmin,temp)
for (i in 1:dim(dat)[2]) {
  dat[,i] <- as.numeric(dat[,i])
}
ListDat <- c(ListDat,list(dat))
}

# if (length(ListDat) > 1) {
  Slot <- ceiling(length(ListDat)/2)
# TabSplit <- data.frame(xmin=rep(c(0,0.525),Slot),
#                        xmax=rep(c(0.475,1),Slot),
#                        ymin=sort(rep(seq(1,0,-1/Slot)[2:(Slot+1)],2), decreasing=T),
#                        ymax=sort(rep(seq(1,0,-1/Slot)[1:Slot],2), decreasing=T))
  TabSplit <- data.frame(xmin=0,
                       xmax=1,
                       ymin=0,
                       ymax=1)
# magnif <- data.frame(cex.main=0.1, calcex=0.13, vlcex=0.13) #changer l'échelle de représentation... faire une table avec les bonnes échelles au fur et à mesure des expériences.
# magnif <- 1-magnif*floor(length(ListDat)/2+0.5)
  magnif <- data.frame(cex.main=1, calcex=1, vlcex=1)
# }
TabSplit <- TabSplit[1:length(ListDat),]

for (i in 1:dim(TabSplit)[1]) {
  cycl <- ListCycle[i]
  cycl <- Cycles_Disp$Annee[match(cycl,Cycles_Disp$Cycle)]
  # NbPlacCycle <- NbPlac$NbPlacettes[NbPlac$NumForet==Choix & NbPlac$Cycle==cycl]
  NbPlacCycle <- length(unique(Placettes$NumPlac[which(Placettes$NumForet==Choix &
                                                         Placettes$Cycle==DernierCycle)]))
  if (i == 1) {
    par(mar=c(0, 0, 1, 0),family="Times",cex.main=magnif$cex.main, fig=TabSplit[i,],mgp=c(5,5,5)) #,family="Times"
radarchart(as.data.frame(ListDat[i]), axistype=1,
           pty=32, pcol="black",
           plty=1, pdensity=50,plwd=0.3,pfcol="salmon",
           title=paste0("Année ",cycl),
           centerzero=T,seg=5,caxislabels=c(0,1,2,3,4,5),calcex=magnif$calcex,
           vlcex=magnif$vlcex, vlabels=c("Rapport : BMort/BTotal",
                                "\b\bRapport :\n\b\b\bBMort>30 /\n\b\b\bBMort total",
                                "Stades de \npourriture présents",
                                "Diversité des \nclasses de diamètre ",
                                "Part de TGB             "))
# text(0.75,0.9,paste0("Nombre de \n placettes : ",NbPlacCycle), cex=magnif$vlcex, col="firebrick")
  } else {
    par(mar=c(0, 0, 1, 0),family="Times",cex.main=magnif$cex.main, fig=TabSplit[i,],mgp=c(5,5,5),new=T) #,family="Times"
radarchart(ListDat[[i]], axistype=1,
           pty=32, pcol="black",
           plty=1, pdensity=50,plwd=0.3,pfcol="salmon",
           title=paste0("Année ",cycl),
           centerzero=T,seg=5,caxislabels=c(0,1,2,3,4,5),calcex=magnif$calcex,
           vlcex=magnif$vlcex, vlabels=c("Rapport : BMort/BVivant",
                                 "\b\bRapport :\n\b\b\bBMort>30 /\n\b\b\bBMort total",
                                "Stades de \ndécompositions présents",
                                "Diversité des \nclasses de diamètre ",
                                "Part de TGB             "))
# text(0.75,0.9,paste0("Nombre de \n placettes : ",NbPlacCycle), cex=magnif$vlcex, col="firebrick")
  }
}



@
\FloatBarrier






























































% \cleardoublepage
% {\LARGE \textcolor{red}{Fin carnet nouveau - Début anciennes figures}}
% \section{Renouvellement}

% \subsection{Perches}
<<Perches, echo=F, message=F, comment=NA, warning=NA, fig.height=4, eval=F, include=F>>=
t <- filter(gfForetPer_Essence, NumForet==Choix) %>%
  mutate(Titre=paste0("Cycle ",Cycle))

ggplot() +
  geom_bar(t, mapping=aes(x="",Nha,fill=Essence),stat="identity",position="fill",width=1) +
  # geom_text(tLevel,mapping=aes(rep(,3), 1:3, label="Nha"), size=2) +
  annotate("text",x=1,y=0.5,label="Nha",size=2) +
  scale_y_continuous(labels=percent) +
  coord_polar(theta = "y") +
  facet_wrap(~Titre) +
  MyTheme +
  theme(legend.position="bottom",
        axis.title.y=element_blank(),
        axis.title.x=element_blank(),
        axis.text.y=element_blank(),
        axis.text.x=element_text(size=5),
        axis.ticks.y=element_blank(),
        # strip.text=element_text(size=7),
        plot.margin=unit(rep(0,4),"cm"),
        strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
        strip.background = element_rect(fill=NA, colour=NA))
@

% \subsection{Semis}

<<Rege1, echo=F, size='footnotesize', fig.pos='H', fig.height=8, fig.cap= "Régénération par stade de développement.", eval=F, include=F>>=
tab <- filter(gfForetRege_Essence, NumForet==Choix) %>%
  select(Cycle, Essence, Classe1Ha, Classe2Ha, Classe3Ha) %>%
  rename_("Classe 1"="Classe1Ha",
          "Classe 2"="Classe2Ha",
          "Classe 3"="Classe3Ha")
tab.m <- melt(tab, id=c("Cycle","Essence")) %>%
  arrange(Essence)
tab.m$Titre <- paste0("Cycle ", tab.m$Cycle)
# tab.m <- arrange(tab.m,Essence)
p1 <- ggplot(tab.m, aes(x=variable, y=value, fill=Essence)) +
  geom_bar(stat = "identity", position='stack',width=0.5) +
  facet_wrap(~ Titre, ncol=2, scales="free") +
  guides(fill=guide_legend(reverse=T)) +
  MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                  strip.background = element_rect(fill=NA, colour=NA))

t <- group_by(tab.m,Cycle,variable) %>%
  summarise(value=sum(value,na.rm=T))
p2 <- ggplot() +
  geom_line(t,
            mapping=aes(Cycle,value,col=variable)) +
  scale_colour_manual(values=c("forestgreen","dodgerblue4","black")) +
  MyTheme

grid.arrange(p1,p2,nrow=2,heights=c(7,3))
@
% \FloatBarrier
% \subsection{Abroutissement}
<<Abroutissement, echo=F, fig.pos='H', fig.height=3, fig.cap= "Abroutissement.", eval=F,include=F>>=
# load("Tables/gfDonneesBrutes.Rdata")
t1 <- subset(Reges, NumForet==Choix)
t1$Abroutis <- ifelse(t1$Abroutis=="",0,1)
tab <- summaryBy(Recouv + Class1 ~ NumForet + Cycle + Abroutis, data=t1,
                 FUN=sum, na.rm=T, keep.names=T)
tab.m <- melt(tab, id=1:3)
tab.m$Titre <- paste0("Cycle ", tab.m$Cycle)
ggplot(tab.m, aes(x=variable, y=value, fill=factor(Abroutis))) + geom_bar(stat = "identity", position='fill') +
  scale_fill_manual(values=c("grey","black")) + facet_wrap(~ Titre, ncol=2) + theme_bw()
@




% \chapter{Bilan de la gestion passée}

% \section{Bilan financier}
% \subsection{Evolution du capital argent}

% La figure \ref{fig:EvolCap1} montre l'évolution des valeurs de consommation et potentielles au cours du temps. La figure \ref{fig:EvolCap2} fournit leurs fonctions de répartition au cours du temps.
<<EvolCap1, echo=F, fig.height=2, fig.cap="Evolution comparée des valeurs de consommation et potentielles au cours du temps.", fig.pos='H', eval=F, include=F>>=
t1 <- subset(gfForetFpied_, NumForet==Choix, select=c(Cycle, VcHa, VpHa))
t1 <- melt(t1, id="Cycle")
t1 <- melt(t1, id="Cycle")
ggplot(t1, aes(x=Cycle, y=value, color=variable)) + geom_line() + MyTheme + ylim(c(0,max(t1$value))) +
  labs(y="Valeur en euro/ha", color="")
@

<<TabFinance, echo=F, eval=F, include=F>>=
b <- subset(Arbres, NumForet==Choix, select=c("Cycle","Taux","Vha","VcHa","VpHa","Coupe"))
b <- subset(b, !is.na(Taux))
b <- b[order(b$Cycle,b$Taux),]
c <- data.frame()
for (i in 1:max(b$Cycle)) {
  d <- subset(b, Cycle==i)
  for (j in 3:(dim(d)[2]-1)) {
    somme <- sum(d[,j], na.rm=T)
    d[,j] <- cumsum(d[,j])/somme
  }
  c <- rbind(c,d)
}
c.m <- melt(c, id=c("Cycle","Taux","Coupe"))
c.m$Titre <- paste0("Cycle ", c.m$Cycle)
# c.m$Cycle <- as.factor(c.m$Cycle)
@

<<EvolCap2, echo=F, fig.height=3, fig.pos='H', fig.cap="Fonctions de répartition des valeurs de consommation et potentielles.", eval=F, include=F>>=
a.m <- subset(c.m, variable!="Vha")
ggplot(a.m, aes(x=Taux, y=value, color=factor(Cycle))) +
  geom_line() +
  facet_wrap(~ variable, ncol=2, scales="free_y") +
  xlim(c(0,0.15)) +
  geom_segment(aes(x = 0, y = 0.1, xend = 0.03, yend = 0.1),
               linetype=3, color='grey') +
  labs(y="Fonction de répartition", color="Cycle") +
  MyTheme +
  theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
        strip.background = element_rect(fill=NA, colour=NA))
@


% La figure \ref{fig:EvolCap3} permet de mesurer l'impact d'un prélèvement sur la valeur potentielle.
<<EvolCap3, echo=F, fig.height=4, fig.cap="Evolution comparée des valeurs de consommation et potentielles.", fig.pos='H', eval=F, include=F>>=
ggplot(c, aes(x=VcHa, y=VpHa, color=factor(Cycle))) + geom_line() + MyTheme + labs(color="Cycle")
@

% \FloatBarrier
% \subsection{Prise en compte des risques}
%
% \FloatBarrier
% \subsubsection{Temps de rotation du capital}
% \subsubsection{Taux d'accroissement et temps de rotation du capital volume et argent}
% Le tableau \ref{Taux} fournit les taux d'accroissement et les temps de passage en volume (TauxV et TempsV) et en argent (TauxA et TempsA). Les taux sont exprimés en \% et les temps de rotation en années\footnote{Dans des peuplements en équilibre, les temps de rotations du volume sont compris entre 35 et 45 ans.}.

<<Taux, echo=F, results='asis', fig.pos="H", comment=F, eval=F, include=F>>=
# tab <- subset(gfForet, NumForet==Choix)
# tab$TauxA <- tab$GainHa/tab$VcHa*100
# tab$TauxV <- tab$AcctVHa/tab$Vha*100
# tab$TempsV <- 100/tab$TauxV
# tab$TempsA <- 100/tab$TauxA
#
# print(xtable(tab[,c(2,12:15)],
#              caption = "Taux d'accroissement et temps de rotation du capital volume et argent.",
#              caption.placement = "top",
#              digits=c(0,0,1,1,0,0),
#              align=rep("c",dim(tab)[2]+1),
#              label = "Taux"),
#       include.rownames=F,
#       size="\\footnotesize")


t <- filter(gfForetFpied_,
            NumForet==Choix) %>%
  mutate(TauxA=Gainper/VcHa*100,
         TauxV=AcctVper/Vha*100,
         TempsV=100/TauxV,
         TempsA=100/TauxA) %>%
  select(Cycle,TauxA,TauxV,TempsA,TempsV)
print(xtable(t,
             caption = "Taux d'accroissement et temps de rotation du capital volume et argent.",
             caption.placement = "top",
             digits=c(0,0,1,1,0,0),
             align=rep("c",dim(t)[2]+1),
             label = "Taux"),
      include.rownames=F,
      size="\\footnotesize")
@

<<Plasticite, echo=F, message=F, comment=NA, warning=NA, fig.height=4, eval=F, include=F>>=
# t <- filter(Arbres, NumForet==Choix) %>%
#   select(NumForet,Cycle,Taux,VcHa,VpHa) %>%
#   arrange(Taux) %>%
#   group_by(Cycle) %>%
#   mutate(TotVpHa=sum(VpHa,na.rm=T),
#          TotVcHa=sum(VcHa,na.rm=T),
#          CumVpHa=cumsum(VpHa)/TotVpHa,
#          CumVcHa=cumsum(VcHa)/TotVcHa) %>%
#   ungroup()
# pos <- which(t$CumVcHa>0.5)
# p <- ggplot() +
#   geom_line(t, mapping=aes(CumVcHa, CumVpHa, col=factor(Cycle))) +
#   geom_vline(xintercept=0.5, linetype=2) +
#   geom_hline(yintercept=t$CumVpHa[min(pos,na.rm=T)-1]) +
#   scale_x_continuous(expand=c(0,0)) +
#   scale_y_continuous(expand=c(0,0)) +
#   theme_bw()

t <- filter(Arbres, NumForet==Choix) %>%
  select(NumForet,Cycle,Taux,VcHa,Vha) %>%
  arrange(Taux) %>%
  group_by(Cycle) %>%
  mutate(TotVha=sum(Vha,na.rm=T),
         TotVcHa=sum(VcHa,na.rm=T),
         CumVha=cumsum(Vha)/TotVha,
         CumVcHa=cumsum(VcHa)/TotVcHa) %>%
  ungroup()
t2bis <- group_by(t, Cycle) %>%
  filter(CumVcHa < 0.5) %>%
  rename(CumVhabis=CumVha) %>%
  summarise(CumVhabis=max(CumVhabis, na.rm=T)) %>%
  ungroup()
t2 <- group_by(t, Cycle) %>%
  filter(CumVcHa > 0.5) %>%
  summarise(CumVha=min(CumVha, na.rm=T)) %>%
  ungroup() %>%
  full_join(t2bis,by="Cycle") %>%
  mutate(CumVha=(CumVha+CumVhabis)/2)
# Palette <- c("red","green","blue","gold","gray")
p <- ggplot() +
  geom_line(t, mapping=aes(CumVcHa, CumVha, col=factor(Cycle))) +
  geom_vline(xintercept=0.5, linetype=2) +
  geom_hline(t2, mapping=aes(yintercept=CumVha[Cycle], col=factor(Cycle)), linetype=2) +
  # geom_text(t2, mapping=aes(1:dim(t2)[1]/10, y=CumVha, label=round(CumVha,1)))
  scale_x_continuous(expand=c(0,0)) +
  scale_y_continuous(expand=c(0,0)) +
  labs(x="Valeur de consommation (€/ha)",
       y="Volume (m3/ha)",
       colour="Cycle") +
  theme_bw() +
  theme(axis.title=element_text(size=8),
        axis.text=element_text(size=7),
        legend.title=element_text(size=8),
        legend.text=element_text(size=7))
p
# pg <- ggplot_build(p)



#  a <- pg$data[[1]]
@

% \FloatBarrier
% \subsubsection{Vitesse de cicatrisation}
%
% \FloatBarrier
% \subsection{Recettes / Dépenses}

<<Depenses, echo=FALSE, message=F, eval=F, include=F>>=
CoefActu <- rename(CoefActu,Annee=Année)
surf <- Dispositifs$SurfParc[which(Dispositifs$NumForet==Choix)]
depart <- InfosSuiviEco[which(InfosSuiviEco$NumForet==Choix),"DépartSuiviEco"]
fin <- max(CoefActu$Annee)

t <- filter(Depenses,NumForet==Choix) %>%
  rename(Annee=Année) %>%
  select(Annee,TotalHT,Code) %>%
  # merge(CoefActu,by.x="Annee",by.y="Année")
  left_join(CoefActu) %>% # ,by=c("Année"="Annee")
  mutate(Montant=TotalHT*CoefActu) %>%
  group_by(Code) %>%
  summarise(Montant=sum(Montant,na.rm=T)) %>%
  ungroup() %>%
  right_join(PlanComptable) %>%
  rename(Categorie=Catégorie)
Cout <- filter(t,
             Categorie %in% c("Exploitation","Entretien du capital",
                              "Soins aux peuplements","Martelage",
                              "Frais de gestion forestière","Frais généraux",
                              "Dotations aux comptes d'amortissement","Impôts") &
               !is.na("Montant")) %>%
  select(Code,Montant,Categorie) %>%
  group_by(Categorie) %>%
  summarise(Montant=sum(Montant,na.rm=T),
            Montant=Montant/(fin-depart+1)/surf) %>%
  ungroup()
Vente <- filter(Recettes,NumForet==Choix) %>%
  rename(Annee=Année) %>%
  select(Annee,Volume,PU) %>%
  left_join(CoefActu) %>% #,by=c("Annee"="Année")
  mutate(Montant=Volume*PU,
         Montant=Montant*CoefActu)
Recette <- filter(t,
                  Categorie %in% c("Recettes bois","Recettes Chasse","Subvention","Autres recettes") &
                    !is.na("Montant")) %>%
  select(Code,Montant,Categorie) %>%
  group_by(Categorie) %>%
  summarise(Montant=sum(Montant,na.rm=T)) %>%
  ungroup() %>%
  mutate(Montant=ifelse(Categorie=="Recettes bois",
                        Montant+sum(Vente$Montant,na.rm=T),
                        Montant),
         Montant=Montant/(fin-depart+1)/surf)




# surf <- Dispositifs$SurfParc[which(Dispositifs$NumForet==Choix)]
# t1 <- subset(Depenses, NumForet==Choix, select=c(Année,TotalHT,Code))
# t1 <- merge(t1, CoefActu, by="Année", all.x=T)
# t1$Montant <- t1$TotalHT*t1$CoefActu
# t2 <- summaryBy(Montant ~ Code, data=t1, FUN=sum, na.rm=T, keep.names=T)
# t3 <- merge(PlanComptable[1:23,c(1,3)], t2, by="Code", all.x=T)
# Cout <- summaryBy(Montant ~ Catégorie , data=t3, FUN=sum, na.rm=T, keep.names=T)
# depart <- InfosSuiviEco[which(InfosSuiviEco$NumForet==Choix),"DépartSuiviEco"]
# fin <- max(CoefActu$Année)
# Cout$Montant <- Cout$Montant/(fin-depart+1)/surf
#
# t3 <- merge(PlanComptable[-(1:23),c(1,3)], t2, by="Code", all.x=T)
# recettes <- summaryBy(Montant ~ Catégorie , data=t3, FUN=sum, na.rm=T, keep.names=T)
# recettes$Montant <- recettes$Montant/(fin-depart+1)/surf
#
# t1 <- subset(Recettes, NumForet==Choix, select=c(Année,Volume,PU))
# t1$Montant <- t1$Volume*t1$PU
# t1 <- merge(t1, CoefActu, by="Année", all.x=T)
# t1$Montant <- t1$Montant*t1$CoefActu
# recettes$Montant[2] <- sum(t1$Montant, na.rm=T)/(fin-depart+1)/surf
@

% Pour ce dispositif, \Sexpr{depart} correspond à l'année de début de suivi économique. Les montants indiqués dans le tableau ci-dessous sont exprimés en euros \Sexpr{fin}. \\
%
%
% \begin{tabular}{|p{6cm}|r|p{7cm}|r|}
% \hline
% \multicolumn{2}{|c|}{Recettes} & \multicolumn{2}{c|}{Dépenses} \\
% \hline
% Catégorie & Montant  & Catégorie & Montant \\
% \hline
% Autres recettes & \Sexpr{round(Recette[1,2],2)} & Dotations aux comptes d'amortissement & \Sexpr{round(Cout[1,2],2)} \\
% Recettes bois & \Sexpr{round(Recette[2,2],2)} & Entretien du capital & \Sexpr{round(Cout[2,2],2)} \\
% Recettes Chasse & \Sexpr{round(Recette[3,2],2)} & Exploitation & \Sexpr{round(Cout[3,2],2)} \\
% Subvention & \Sexpr{round(Recette[4,2],2)} & Frais de gestion forestière & \Sexpr{round(Cout[4,2],2)} \\
%  &  & Frais généraux & \Sexpr{round(Cout[5,2],2)} \\
%  &  & Impôts & \Sexpr{round(Cout[6,2],2)} \\
%  &  & Martelage & \Sexpr{round(Cout[7,2],2)} \\
%  &  & Soins aux peuplements & \Sexpr{round(Cout[8,2],2)} \\
% \hline
% Total & \Sexpr{round(sum(Recette[,2]),2)} & Total & \Sexpr{round(sum(Cout[,2]),2)} \\
% \hline
% \end{tabular}
<<Recettes>>=

@
% \FloatBarrier
% \section{Martelage}
% La figure \ref{fig:Martelage} permet une première analyse des martelages.
<<Martelage, echo=F, fig.height=5, fig.cap="Prélèvements", eval=F, include=F>>=
b <- subset(Arbres, NumForet==Choix, select=c("Cycle","Taux","Vha","VcHa","VpHa","Coupe"))
b <- subset(b, !is.na(Taux))
b <- b[order(b$Cycle,b$Taux),]
b <- b[order(b$Coupe),] %>%
   mutate(Titre=paste0("Cycle ",Cycle),
         Coupe=ifelse(Coupe=="E","Récolté",Coupe),
         Coupe=ifelse(Coupe=="PF/E","Récolté",Coupe),
         Coupe=ifelse(Coupe=="C","Chablis",Coupe),
         Coupe=ifelse(Coupe=="PF","Sur pied",Coupe),
         Coupe=ifelse(Coupe=="","Sur pied",Coupe),
         Coupe=factor(Coupe, levels=c("Sur pied", "Chablis", "Récolté")))
ggplot(b, aes(x=VcHa, y=VpHa, color=Coupe)) +
  geom_point(alpha=0.9) +
  geom_abline(intercept = 0, slope = 1, colour="grey60") +
  # scale_y_log10(expand=c(0,0)) +
  # scale_x_log10(expand=c(0,0)) +
  scale_colour_manual(name="Prélèvement",
                      values=c("limegreen", "dodgerblue", "red3"),
                      # label=c("Exploitation","Chablis"),
                      na.value="grey90") +
  labs(x="Valeur de consommation (€/ha)",y="Valeur potentielle (€/ha)") +
  facet_wrap(~ Titre, ncol=3) +
  MyTheme + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                  strip.background = element_rect(fill=NA, colour=NA))
@

<<Martelage2, echo=F,fig.height=3, fig.width=3.2, fig.cap="Prélèvements", eval=F, include=F>>=
t1 <- filter(Arbres,
             NumForet==Choix & Coupe=="E")
t2 <- group_by(t1,
               Cycle,Cat) %>%
  summarise(VpHa=sum(VpHa,na.rm=T),
            VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  melt(id=c("Cycle","Cat")) %>%
  mutate(variable=ifelse(variable=="VpHa","Vp","Vc")) %>%
  arrange(Cat)
t3 <- group_by(t1,
               Cycle,Reg1) %>%
  summarise(VpHa=sum(VpHa,na.rm=T),
            VcHa=sum(VcHa,na.rm=T)) %>%
  ungroup() %>%
  melt(id=c("Cycle","Reg1")) %>%
  mutate(variable=ifelse(variable=="VpHa","Vp","Vc")) %>%
  arrange(Reg1)

ggplot(t2,
       aes(x=factor(Cycle), y=value, fill=Cat)) +
  geom_bar(stat= "identity", position = "stack") +
  labs(x="Cycle", y="Valeur (€/ha)") +
  guides(fill=guide_legend(title="Catégories\nde diamètre",reverse=T)) +
  facet_wrap(~ variable) +
  theme_bw() + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                     strip.background = element_rect(fill=NA, colour=NA))
ggplot(t3,
       aes(x=factor(Cycle), y=value, fill=Reg1)) +
  geom_bar(stat= "identity", position = "stack") +
  guides(fill=guide_legend(title="Qualité",reverse=T)) +
  labs(x="Cycle", y="Valeur (€/ha)") +
  facet_wrap(~ variable) + theme_bw() + theme(strip.text = element_text(size = 7, colour="lightsteelblue4", face="bold"),
                                              strip.background = element_rect(fill=NA, colour=NA))

# t1 <- subset(Arbres, NumForet==Choix & Coupe == "E")
# t2 <- summaryBy(VpHa + VcHa ~  Cycle + Cat, data = t1, FUN = sum, na.rm = T, keep.names = T)
# t3 <- summaryBy(VpHa + VcHa ~  Cycle + Reg1, data = t1, FUN = sum, na.rm = T, keep.names = T)
# t2.m <- melt(t2, id=c("Cycle","Cat")) %>%
#   arrange(Cat)
# t3.m <- melt(t3, id=c("Cycle","Reg1"))
#
# ggplot(t2.m,
#        aes(x=factor(Cycle), y=value, fill=Cat)) +
#   geom_bar(stat= "identity", position = "stack") +
#   labs(x="Cycle", y="Valeur (€/ha)") +
#   guides(fill=guide_legend(reverse=T)) +
#    facet_wrap(~ variable) + theme_bw()
# ggplot(t3.m,
#        aes(x=factor(Cycle), y=value, fill=Reg1)) +
#   geom_bar(stat= "identity", position = "stack") +
#   guides(fill=guide_legend(reverse=T)) +
#   labs(x="Cycle", y="Valeur (€/ha)") +
#    facet_wrap(~ variable) + theme_bw()
@
\FloatBarrier



%%%%%%%%%%%%%%%%%%%% Tronches des chapitres pour les annexes
\titleformat{\chapter}[frame]
{\normalsize}%
{\filright\sffamily\Large%
\enspace Annexe \thechapter\enspace}%
{8pt}
{\sffamily\Huge\bfseries\filcenter}

% ----- Numérotation figures en fonction des chapitres :
\counterwithin{figure}{chapter}
\begin{appendices}

\chapter{Regroupements d'essence}\label{Regroupement}
Le tableau \ref{EssReg} liste les regroupements d'essence.
<<EssReg, echo=FALSE, results='asis', fig.pos="th", comment=F, message=F, warning=F>>=
# t <- unique(Arbres[Arbres$NumDisp==Choix,c("Essence","EssReg")])
MultiRow1 <- function(Table,Columns) {
    Table <- as.data.frame(Table)
  for (i in Columns) {
    pos <- which(duplicated(Table[,i]))
    if (length(pos) > 0) {
      # pos <- sort(unique(c(pos, which(duplicated(t[,1],fromLast=T)))))
      Table <- mutate(Table,
                      Mark=factor(Table[,i])) %>%
        group_by(Mark) %>%
        mutate(Count=length(Mark)) %>%
        ungroup() %>%
        data.frame()
      Table[,i] <- as.character(Table[,i])
      Table[pos,i] <- NA

      # Repere des lignes à mettre en multirow
      pos2 <- which(Table$Count > 1 & !is.na(Table[,i]))
      # pos3 <- which(!is.na(Table[,i]))
      Table[pos2,i] <- paste0("\\multirow{",Table$Count[pos2],"}{*}{",Table[pos2,i],"}")
      Table$Count <- NULL
      Table$Mark <- NULL
    }
  }
  return(Table)
}

t <- filter(EssReg,
            NumForet == Choix) %>%
  select(Essence,EssReg) %>%
  arrange(EssReg)

t <- MultiRow1(t,2) %>%
  rename_("Essences regroupées"="EssReg")

pos_NA <- which(!is.na(t[,2]))
print(xtable(t,
             label="EssReg",
             align=c("l","l","|c"),
             caption="Regroupements d'essence",
             caption.placement="bottom"),
      include.rownames=F,
      sanitize.text.function=function(x){return(x)},
      hline.after=c(-1,pos_NA-1,dim(t)[1]),
      size="\\footnotesize")
# xtable(tab, caption = "Tarifs de cubage retenus par le gestionnaire.",
#       digits=rep(0,4),label = "Tarifs", caption.placement = "top")
@

\chapter{Echantillon}
% \EditIf{\Sexpr{Eval_BMP}}{TRUE}{Les figures \ref{fig:Echantillonnage_DiamDist} et \ref{fig:Echantillonnage_DiamDist_BMP} permettent}{La figure \ref{fig:Echantillonnage_DiamDist} permet} de vérifier le bon respect du protocole ainsi que de détecter d'éventuels arbres limites.
La figure \ref{fig:Echantillonnage_DiamDist} permet de vérifier le bon respect du protocole ainsi que de détecter d'éventuels arbres limites.
<<DiamDist, echo=F, fig.pos='H', fig.height=5, fig.cap= "Vérification de l'échantillon.", eval=F, include=F>>=
Angle=Echantillonnages$Coeff[Echantillonnages$NumForet==Choix &
                               Echantillonnages$Cycle==DernierCycle]*100
# Arbres_Limite <- filter(Arbres,
#                         NumForet==Choix & Lim==1)

ggplot() +
  geom_point(ArbresEnTour,
       mapping=aes(Dist, Diam1, colour=EssReg),
       alpha=1) +
  geom_point(ArbresEnTour,
       mapping=aes(Dist, Diam1),
       alpha=1,colour="gray50",shape=1) +
    # geom_point(Arbres_Limite,
    #    mapping=aes(Dist, Diam1),
    #    alpha=1,colour="red",shape=1,size=3) +
  geom_point(alpha=0.5) +
  geom_hline(yintercept=c(7.5,17.5), colour="dodgerblue3", linetype=2, size=0.5) +
  geom_abline(intercept = 0, slope = Angle, colour="dodgerblue3") +
  geom_vline(xintercept=10, colour="dodgerblue3", linetype=2, size=0.5) +
  scale_x_continuous(expand=c(0,0)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,max(ArbresEnTour$Diam1,na.rm=T)*1.1),
                     breaks=seq(0,floor(max(ArbresEnTour$Diam1,na.rm=T)/5+0.5)*5*1.3,10)) +
  scale_colour_manual(values=Palette_Essence) +
   theme_bw() + MyTheme
  # facet_wrap(~ Cycle, ncol=2)
@
\FloatBarrier

<<Echantillonnage_DiamDist, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=4, fig.cap= "\\footnotesize{Vérification de l'échantillon (pour les arbres vivants repérés en azimut/distance dans le dernier inventaire).}">>=

Rayon1=Echantillonnages$DiamLim1[Echantillonnages$NumForet==Choix &
                                   Echantillonnages$Cycle==DernierCycle]
Rayon2=Echantillonnages$DiamLim2[Echantillonnages$NumForet==Choix &
                                   Echantillonnages$Cycle==DernierCycle]
Rayon3=Echantillonnages$DiamLim3[Echantillonnages$NumForet==Choix &
                                   Echantillonnages$Cycle==DernierCycle]

Angle=Echantillonnages$Coeff[Echantillonnages$NumForet==Choix &
                               Echantillonnages$Cycle==DernierCycle]*100
Rayon=Echantillonnages$DiamLim[Echantillonnages$NumForet==Choix &
                                 Echantillonnages$Cycle==DernierCycle]

# BMP_Rayon1=Echantillonnages$BMP_DiamLim1[Echantillonnages$NumForet==Choix &
#                                  Echantillonnages$Cycle==DernierCycle]
# BMP_Rayon2=Echantillonnages$BMP_DiamLim2[Echantillonnages$NumForet==Choix &
#                                  Echantillonnages$Cycle==DernierCycle]

# Rayons <- c(Rayon1, Rayon2, Rayon3, Rayon, BMP_Rayon1, BMP_Rayon2)
Rayons <- c(Rayon1, Rayon2, Rayon3, Rayon)
Rayons <- na.omit(Rayons)
# --- Tri des arbres limites
Arbres_Echant <- left_join(IdArbres,ValArbres) %>%
  filter(NumForet==Choix) %>%
  mutate(NumPlac=as.character(NumPlac),
         Diam1=as.numeric(Diam1),
         Diam2=as.numeric(Diam2))
Arbres_DF <-
  Arbres_Echant %>%
  left_join(
    Echantillonnages[,  c(
      "NumForet", "Cycle", "Strate", "Surface", "NbPlac",
      "DiamLim1", "Rayon1", "DiamLim2", "Rayon2", "DiamLim3", "Rayon3",
      "Coeff", "DiamLim"
      # "BMP_DiamLim1", "BMP_Rayon1", "BMP_DiamLim2", "BMP_Rayon2"
    )]
  ) %>%
  left_join(
    Placettes[,c(
      "NumForet","NumPlac","Strate","Cycle","PoidsPlacette",
      "Pente","CoeffPente","Parcelle","Station"
    )]
  ) %>%
  mutate(
    Cycle = as.numeric(Cycle),
    # NumArbre = as.numeric(NumArbre),
    Limite = 1,
    Dist = as.numeric(Dist),
    Azimut = as.numeric(Azimut),
    Diam1 = as.numeric(Diam1),
    Diam2 = as.numeric(Diam2),
    Haut = as.numeric(Haut),
    Stade = as.numeric(Stade),

    Diam1 = ifelse(is.na(Diam1),Diam2,Diam1),
    Diam2 = ifelse(is.na(Diam2),Diam1,Diam2),
    Diam1 = ifelse(Diam1 == 0,Diam2,Diam1),
    Diam2 = ifelse(Diam2 == 0,Diam1,Diam2),
    Diam = (Diam1+Diam2) / 2,
    Classe = floor(Diam / 5 + 0.5) * 5,
    Cat = cut(Diam, breaks  =  c(0,17.5,27.5,47.5,67.5,200),
              labels  =  c("PER", "PB", "BM", "GB","TGB"),
              include.lowest  =  T,
              right  =  F),
    Cat = as.character(Cat),
    Nha = NA
  ) %>%
  arrange(NumForet,NumPlac,NumArbre,Cycle) %>%
  filter(!is.na(Diam1) | !is.na(Diam2) | Diam1 == 0 | Diam2 == 0) %>%
  mutate(Coeff = Coeff * 100) # correction nécessaire car 28 >= 14 * 0.02 * 100 est faux (tests B.Meheux)
##### ---------- Calcul du poids ---------- #####
# cat("Calcul du poids")

# # ---------- Cas des perches sans mesure de distance
# pos <- which(Arbres_DF$Cat=="PER" & is.na(Arbres_DF$Dist))
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon1[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # ---------- Cas des perches avec mesure de distance
# #   pos <- which(Arbres_DF$Cat=="PER" & !is.na(Arbres_DF$Dist) & Arbres_DF$Dist > Arbres_DF$Rayon1 * Arbres_DF$CoeffPente)
# #   if (length(pos) > 0) Arbres_DF[pos,"Nha"] <- 0
#
# # ---------- Cercles uniques
# pos <- which(is.na(Arbres_DF$Nha) & is.na(Arbres_DF$DiamLim2) &
#                Arbres_DF$Diam >= Arbres_DF$DiamLim1 &
#                # Arbres_DF$Diam < Arbres_DF$DiamLim & # Rajouté le 24/06. NON car si vide => NA. OK comme avant
#                Arbres_DF$Dist <= Arbres_DF$Rayon1 * Arbres_DF$CoeffPente)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon1[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # ---------- Cercles concentriques
# # 3eme cercle
# pos <- which(is.na(Arbres_DF$Nha) & !is.na(Arbres_DF$DiamLim3) &
#                Arbres_DF$Diam1 >= Arbres_DF$DiamLim3 &
#                Arbres_DF$Dist <= Arbres_DF$Rayon3 * Arbres_DF$CoeffPente)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon3[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # 2eme cercle avec 3eme cercle
# pos <- which(is.na(Arbres_DF$Nha) & !is.na(Arbres_DF$DiamLim3) &
#                Arbres_DF$Diam1 >= Arbres_DF$DiamLim2 & Arbres_DF$Diam1 < Arbres_DF$DiamLim3 &
#                Arbres_DF$Dist <= Arbres_DF$Rayon2 * Arbres_DF$CoeffPente)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon2[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # 2eme cercle sans 3eme cercle
# pos <- which(is.na(Arbres_DF$Nha) & is.na(Arbres_DF$DiamLim3) &
#                Arbres_DF$Diam1 >= Arbres_DF$DiamLim2 &
#                Arbres_DF$Dist <= Arbres_DF$Rayon2 * Arbres_DF$CoeffPente)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon2[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # 1er cercle avec 2eme cercle
# pos <- which(is.na(Arbres_DF$Nha) & !is.na(Arbres_DF$DiamLim2) &
#                Arbres_DF$Diam1 >= Arbres_DF$DiamLim1 & Arbres_DF$Diam1 < Arbres_DF$DiamLim2 &
#                Arbres_DF$Dist <= Arbres_DF$Rayon1 * Arbres_DF$CoeffPente)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon1[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
#
# # ---------- Angle fixe
# pos <- which(Arbres_DF$Diam1 < Arbres_DF$DiamLim)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Coeff"] <- NA
# }
# pos <- which(Arbres_DF$Diam1 >= Arbres_DF$DiamLim)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- NA # Remise à zéro au cas où il y aurait déjà des valeurs renseignées (cercle(s))
#   Arbres_DF[pos,"Limite"] <- 1
# }
# #   pos <- which(is.na(Arbres_DF$Nha) & Arbres_DF$Diam < Arbres_DF$DiamLim & Arbres_DF$Dist <= Arbres_DF$Rayon1 * Arbres_DF$CoeffPente)
# #   if (length(pos) > 0) Arbres_DF[pos,"Nha"] <- 10000/pi/Arbres_DF$Rayon1[pos]^2
# pos <- which(!is.na(Arbres_DF$Coeff) & Arbres_DF$Diam1 >= Arbres_DF$Dist * Arbres_DF$Coeff * 100)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- 10^8*Arbres_DF$Coeff[pos]^2/pi/Arbres_DF$Diam1[pos]^2
#   Arbres_DF$Limite[pos] <- NA
# }
# # cas des Arbres à inventorier par angle relascopique qui auraient été considérés comme non limite parce
# # que > DiamLim1, mais qui en fait sont hors inventaire
# pos <- which(!is.na(Arbres_DF$Coeff) & Arbres_DF$Diam1 < Arbres_DF$Dist * Arbres_DF$Coeff * 100)
# if (length(pos) > 0) {
#   Arbres_DF[pos,"Nha"] <- NA
#   Arbres_DF$Limite[pos] <- 1
# }
# rm(pos)

calculs_Nha <- function(df) {
        # ---------- Cas des perches sans mesure de distance
        pos <-
          with(
            df,
            which(
              Cat == "PER" & is.na(Dist) & Diam1 >= DiamLim & is.na(Type)
            )
          ) # Changement Verif_Calculs : rajout de la condition "Diam1 >= DiamLim1"
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon1[pos] ^ 2
          df$Limite[pos] <- NA
        }

        # ---------- Cercles uniques
        pos <-
          with(
            df,
            which(
              is.na(Nha) & is.na(DiamLim2) & Diam1 >= DiamLim1 &
                Dist <= Rayon1 * CoeffPente & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon1[pos] ^ 2
          df$Limite[pos] <- NA
        }
        # ---------- Cercles concentriques
        # 3eme cercle
        pos <-
          with(df,
               which(
                 is.na(Nha) & !is.na(DiamLim3) & Diam1 >= DiamLim3 &
                   Dist <= Rayon3 * CoeffPente & is.na(Type)
               )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon3[pos] ^ 2
          df$Limite[pos] <- NA
        }
        # 2eme cercle avec 3eme cercle
        pos <-
          with(
            df,
            which(
              is.na(Nha) & !is.na(DiamLim3) & Diam1 >= DiamLim2 & Diam1 < DiamLim3 &
                Dist <= Rayon2 * CoeffPente & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon2[pos] ^ 2
          df$Limite[pos] <- NA
        }
        # 2eme cercle sans 3eme cercle
        pos <-
          with(
            df,
            which(
              is.na(Nha) & is.na(DiamLim3) & Diam1 >= DiamLim2 &
                Dist <= Rayon2 * CoeffPente & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon2[pos] ^ 2
          df$Limite[pos] <- NA
        }
        # 1er cercle avec 2eme cercle
        pos <-
          with(
            df,
            which(
              is.na(Nha) & !is.na(DiamLim2) & Diam1 >= DiamLim1 &
                Diam1 < DiamLim2 & Dist <= Rayon1 * CoeffPente & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10000 / pi / df$Rayon1[pos] ^ 2
          df$Limite[pos] <- NA
        }

        # ---------- Angle fixe
        pos <- which(df$Diam1 < df$DiamLim & is.na(df$Type))
        if (length(pos) > 0) {
          df[pos,"Coeff"] <- NA
        }
        pos <- which(df$Diam1 >= df$DiamLim & is.na(df$Type)) # Changement Verif_Calculs Diam devient Diam1 -> indispensable sinon arbre de 29 par 32 sera inventorié ni par surface ni par angle fixe
        if (length(pos) > 0) {
          df[pos,"Nha"] <- NA # Remise à zéro au cas où il y aurait déjà des valeurs renseignées (cercle(s))
          df[pos,"Limite"] <- 1
        }
        pos <-
          with(
            df,
            which(
              !is.na(Coeff) & Diam1 >= Dist * Coeff & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- 10 ^ 4 * df$Coeff[pos] ^ 2 / pi / df$Diam1[pos] ^ 2
          df$Limite[pos] <- NA
        }
        # cas des Arbres à inventorier par angle relascopique qui auraient été considérés comme non limite parce
        # que > DiamLim1, mais qui en fait sont hors inventaire
        pos <-
          with(
            df,
            which(
              !is.na(Coeff) & Diam1 < Dist * Coeff & is.na(Type)
            )
          )
        if (length(pos) > 0) {
          df[pos, "Nha"] <- NA
          df$Limite[pos] <- 1
        }




        # #### BMP - A REVOIR !! ####
        # # 2eme cercle sans 3eme cercle
        # pos <-
        #   with(
        #     df,
        #     which(
        #       is.na(Nha) & Diam1 >= BMP_DiamLim2 &
        #         Dist <= BMP_Rayon2 * CoeffPente & !is.na(Type)
        #     )
        #   )
        # if (length(pos) > 0) {
        #   df[pos, "Nha"] <- 10000 / pi / df$BMP_Rayon2[pos] ^ 2
        #   df$Limite[pos] <- NA
        # }
        # # 1er cercle avec 2eme cercle pour les BMP
        # pos <-
        #   with(
        #     df,
        #     which(
        #       is.na(Nha) & !is.na(BMP_DiamLim2) & Diam1 >= BMP_DiamLim1 &
        #         Diam1 < BMP_DiamLim2 & Dist <= BMP_Rayon1 * CoeffPente & !is.na(Type)
        #     )
        #   )
        # if (length(pos) > 0) {
        #   df[pos, "Nha"] <- 10000 / pi / df$BMP_Rayon1[pos] ^ 2
        #   df$Limite[pos] <- NA
        # }



        # Nha mis à 0 pour les arbres limites
        pos <- which(df$Limite == 1)
        if (length(pos) > 0) df[pos, "Nha"] <- 0

        rm(pos)
        # retour fonction calculs_Nha
        return(df)
      }
      Arbres_DF <-
        Arbres_DF %>%
        calculs_Nha()


# ----- Fin calcul du poids et marquage des arbres limites
ArbresLimite_DF <- filter(Arbres_DF,
                        Limite==1) %>%
  mutate(Type=as.character(Type),
         Limite=as.factor(Limite))


Type_PALETTE <- c(21:24)
names(Type_PALETTE) <- c("AV","A","C","S")

Type_PALETTE2 <- c("limegreen","black","black","black")
names(Type_PALETTE2) <- c("AV","A","C","S")

Type_PALETTE3 <- c(0.3,1,1,1)
names(Type_PALETTE3) <- c("AV","A","C","S")

Limite_PALETTE <- c("red","black")
names(Limite_PALETTE) <- c(1,0)
# Limite_PALETTE <- c("red")
# names(Limite_PALETTE) <- c(1)

# Autres tables

ArbresPlot_DF <- select(Arbres_DF,
            NumForet,NumPlac,Azimut,Dist,Diam1,Limite,Type) %>%

  mutate(Type=ifelse(is.na(Type),
                        "AV",Type),
            Type=factor(Type,levels=names(Type_PALETTE)),

            Limite=ifelse(is.na(Limite),
                          0,Limite),
            Limite=factor(Limite,levels=names(Limite_PALETTE))) %>%
  filter(Type=="AV")

X_lim = max(ArbresPlot_DF$Dist,na.rm=T)

p1 <- ggplot() +
  geom_point(ArbresPlot_DF,

             mapping=aes(Dist, Diam1,
                         shape=Type,
                         fill=Type,
                         colour=Limite,
                         alpha=Type)) +
  scale_shape_manual(values=Type_PALETTE,
                     label=c("Arbres vivants",
                             "Bois mort sur pied (arbre)",
                             "Bois mort sur pied (chandelle)",
                             "Bois mort sur pied (souche)")) +
  scale_fill_manual(values=Type_PALETTE2,
                    label=c("Arbres vivants",
                            "Bois mort sur pied (arbre)",
                            "Bois mort sur pied (chandelle)",
                            "Bois mort sur pied (souche)")) +
  scale_alpha_manual(values=Type_PALETTE3,
                     label=c("Arbres vivants",
                             "Bois mort sur pied (arbre)",
                             "Bois mort sur pied (chandelle)",
                             "Bois mort sur pied (souche)")) +
  # geom_point(ArbresPlot_DF,
  #
  #            mapping=aes(Dist, Diam1,
  #                        shape=Type,
  #                        colour=Limite)) +
  scale_colour_manual(values=Limite_PALETTE,
                      label=c("Arbre limite",
                              "Arbre de l'inventaire")) +


  geom_hline(yintercept=Rayons, colour="dodgerblue3", linetype=2, size=0.5) +
  geom_abline(intercept = 0, slope = Angle, colour="dodgerblue3", linetype=2) +
  geom_vline(xintercept=c(10,20), colour="dodgerblue3", linetype=2, size=0.5) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,X_lim*1.1),
                     breaks=seq(0,
                                floor(X_lim/5+0.5)*5*1.3,
                                5)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,max(ArbresPlot_DF$Diam1,na.rm=T)*1.1),
                     breaks=seq(0,
                                floor(max(ArbresPlot_DF$Diam1,na.rm=T)/5+0.5)*5*1.3,
                                10)) +
  guides(shape=guide_legend(order=1),
         fill=guide_legend(order=1),
         alpha=guide_legend(order=1),
         colour=guide_legend(order=2,
                             override.aes=list(shape=1,
                                               size=1.75,
                                               alpha=0.5))) +
  theme_bw() +
  theme(axis.text.x  = element_text(size=8),
        axis.title.x  = element_text(size=9),
        axis.title.y  = element_text(size=9),
        axis.text.y  = element_text(size=8),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
  # facet_wrap(~ Cycle, ncol=2)
# p1 <-
  # p1 +
  #   geom_point(ArbresLimite_DF,
  #
  #            mapping=aes(Dist, Diam1,
  #                        # shape=Type,
  #                        colour="red",
  #                        fill=NA,
  #                        shape="1"))
  # scale_colour_manual(values=Limite_PALETTE,
  #                     label=c("Arbre limite"))
p1
@
\FloatBarrier

<<Echantillonnage_DiamDist_BMP, echo=F, comment=NA, warning=FALSE, fig.pos='H', fig.height=4, fig.cap= "\\footnotesize{Vérification de l'échantillon (pour les arbres morts repérés en azimut/distance dans le dernier inventaire).}", eval = F, include = F>>=

ArbresPlot_DF <- select(Arbres_DF,
            NumForet,NumPlac,Azimut,Dist,Diam1,Limite,Type) %>%

  mutate(Type=ifelse(is.na(Type),
                        "AV",Type),
            Type=factor(Type,levels=names(Type_PALETTE)),

            Limite=ifelse(is.na(Limite),
                          0,Limite),
            Limite=factor(Limite,levels=names(Limite_PALETTE))) %>%
  filter(Type!="AV")
p1 <- ggplot() +
  geom_point(ArbresPlot_DF,

             mapping=aes(Dist, Diam1,
                         shape=Type,
                         fill=Type,
                         colour=Limite,
                         alpha=Type)) +
  scale_shape_manual(values=Type_PALETTE,
                     label=c("Arbres vivants",
                             "Bois mort sur pied (arbre)",
                             "Bois mort sur pied (chandelle)",
                             "Bois mort sur pied (souche)")) +
  scale_fill_manual(values=Type_PALETTE2,
                    label=c("Arbres vivants",
                            "Bois mort sur pied (arbre)",
                            "Bois mort sur pied (chandelle)",
                            "Bois mort sur pied (souche)")) +
  scale_alpha_manual(values=Type_PALETTE3,
                     label=c("Arbres vivants",
                             "Bois mort sur pied (arbre)",
                             "Bois mort sur pied (chandelle)",
                             "Bois mort sur pied (souche)")) +
  # geom_point(ArbresPlot_DF,
  #
  #            mapping=aes(Dist, Diam1,
  #                        shape=Type,
  #                        colour=Limite)) +
  scale_colour_manual(values=Limite_PALETTE,
                      label=c("Arbre limite",
                              "Arbre de l'inventaire")) +


  geom_hline(yintercept=Rayons, colour="dodgerblue3", linetype=2, size=0.5) +
  geom_abline(intercept = 0, slope = Angle, colour="dodgerblue3", linetype=2) +
  geom_vline(xintercept=c(10,20), colour="dodgerblue3", linetype=2, size=0.5) +
  scale_x_continuous(expand=c(0,0),
                     limits=c(0,X_lim*1.1),
                     breaks=seq(0,
                                floor(X_lim/5+0.5)*5*1.3,
                                5)) +
  scale_y_continuous(expand=c(0,0),
                     limits=c(0,max(ArbresPlot_DF$Diam1,na.rm=T)*1.1),
                     breaks=seq(0,
                                floor(max(ArbresPlot_DF$Diam1,na.rm=T)/5+0.5)*5*1.3,
                                10)) +
  guides(shape=guide_legend(order=1),
         fill=guide_legend(order=1),
         alpha=guide_legend(order=1),
         colour=guide_legend(order=2,
                             override.aes=list(shape=1,
                                               size=1.75,
                                               alpha=0.5))) +
  theme_bw() +
  theme(axis.text.x  = element_text(size=8),
        axis.title.x  = element_text(size=9),
        axis.title.y  = element_text(size=9),
        axis.text.y  = element_text(size=8),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))
  # facet_wrap(~ Cycle, ncol=2)
# p1 <-
  # p1 +
  #   geom_point(ArbresLimite_DF,
  #
  #            mapping=aes(Dist, Diam1,
  #                        # shape=Type,
  #                        colour="red",
  #                        fill=NA,
  #                        shape="1"))
  # scale_colour_manual(values=Limite_PALETTE,
  #                     label=c("Arbre limite"))
p1
@
\FloatBarrier

\chapter{Tarifs de cubage}
Le tableau \ref{TarifsCubage} rappelle les tarifs de cubage retenus. Les tarifs de cubage par essence sont fournis par le gestionnaire de la forêt. Ils sont ensuite convertis en tarifs Schaeffer.
<<Tarifs, echo=F, results='asis', fig.pos="H", comment=F>>=
ListEssence <- filter(gfForetDen_Essence,
                      NumForet == Choix &
                      Cycle == DernierCycle) %>%
  select(Essence) %>%
  distinct() %>%
  unlist() %>%
  unname()
tab <- filter(Tarifs,
              NumForet==Choix &
                Cycle==DernierCycle &
                is.element(Essence,ListEssence)) %>%
  select(Essence,TypeTarif,NumTarif)
names(tab) <- c("Essence", "Type de tarif", "Numéro")
print(xtable(tab,
             caption = "Tarifs de cubage retenus",
             digits=rep(0,4),
             label = "TarifsCubage",
             caption.placement = "top"),
      include.rownames=F,
      size="\\footnotesize")
@
\FloatBarrier

\fancychapterstyle

\EditIf{\Sexpr{Eval_Maps}}{TRUE}{
\chapter{Cartes de résultats}

<<Resultats_MAPS, echo=F, results='asis', fig.pos="H", comment=F, eval=Eval_Maps, include=Eval_Maps>>=

cat(paste0("\\includepdf[pages=-]{",Map_ListFiles,"}\n\\FloatBarrier\n"))
@
}{}

% Carte Camembert Gha
% \includepdf[pages=-]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Out/Cartes/Carte_FD_Geneve_Gha.pdf}
%
% % Carte Camembert Gha - Cat
% \includepdf[pages=-]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Out/Cartes/Carte_FD_Geneve_GhaCat.pdf}
%
% % Carte Camembert Gha - EssReg
% \includepdf[pages=-]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Out/Cartes/Carte_FD_Geneve_GhaEssReg.pdf}
%
% % Carte Camembert AcctGper
% \includepdf[pages=-]{/Users/Valentin/Foret/Travail/Leforestier/Geneve/FD_Geneve/Out/Cartes/Carte_FD_Geneve_AcctG.pdf}


% \chapter{Protocole d'inventaire}
% \label{Protocole}
%
% \includepdf[pages=-]{Figures/Annexe_methodo_VD.pdf}
%
% \FloatBarrier


\EditIf{\Sexpr{Eval_Appendix}}{TRUE}{
\chapter{Plans des arbres sur la placette}
\clearpage

% \section{Localisation}

<<Initialisation_PlansPlacettes, echo=FALSE, warning=F, error=F, comment=F, message=F, include = Eval_Appendix, eval = Eval_Appendix >>=
# -------Import des donnees ------
# setwd(repGF)
# load("Tables/afiDonneesBrutes.RData")
# df <- left_join(IdArbres,ValArbres)
# load(paste0(repSav,"/Tables/gfTablesBrutes.RData"))
# df <- left_join(df,Arbres)
df <- filter(Arbres,
             NumForet==Choix & Cycle==DernierCycle) %>%
  left_join(ArbresEnTour[,c("NumForet","NumPlac","NumArbre","Cycle",
                            "Diam1","Diam2","Type")])
if (Eval_Codes) {
  df <- mutate(df,
               CodeEcolo=toupper(CodeEcolo)) %>%
    left_join(NotesAFI_DF,
              by=c("CodeEcolo"="Id"))
}
lang="FRA"
# -------Extraction ------
# Nom <- Dispositifs$Nom[which(Dispositifs$NumForet==Choix)]
# Nom <- "Forêt de M.Dupont"
nom1 <- NomForet
t1 <- subset(df, NumForet==Choix &
               Cycle==DernierCycle &
               is.na(Limite), select=-1)
DernierCycle <- max(df$Cycle, na.rm=T)
t1 <- subset(t1, Cycle==DernierCycle)  # , select=-16
t1 <- t1[order(t1$NumPlac, t1$Azimut),]

# ------------- Formats
# windowsFonts(Times=windowsFont("TT Times New Roman")) #Manoeuvre pour avoir Times New Roman sous windows...bizarre
MyTheme <-  theme_bw() +
  theme(axis.text.x  = element_text(size=8),
        axis.title.x  = element_text(size=9),
        axis.title.y  = element_text(size=9),
        axis.text.y  = element_text(size=8),
        plot.margin = unit(c(0.1,0.1,0.1,0.1), "cm"))

CodeCouleurs <- data.frame(Essence=unique(t1$Essence),
                           Col=Essences$Couleur[match(unique(t1$Essence),Essences$Nom)],
                           stringsAsFactors = F)
# unique(t1$Essence)




# ---------- Palette Essences
CodeCouleurs <- data.frame(Essence=unique(t1$Essence),
                           Col=Essences$Couleur[match(unique(t1$Essence),Essences$Nom)],
                           stringsAsFactors = F)
CodeCouleurs <- data.frame(Essence=unique(t1$Essence),
                           Col=Essences$Couleur[match(unique(t1$Essence),Essences$Nom)],
                           stringsAsFactors = F)


 # Palette
Palette_Essence <- CodeCouleurs$Col
# names(Palette_Essence) <- CodeCouleurs$Essence
names(Palette_Essence) <- str_wrap(CodeCouleurs$Essence, 15)

t1 <- t1 %>% mutate(Essence = str_wrap(Essence, 15))


# ----- Palette size - Essai 1
# Max_Diam1 <- max(t1$Classe,na.rm=T)
# Ecart_Size <- floor(Max_Diam1/5/5+0.5)*5
# Label_Size1 <- seq(10+Ecart_Size,
#                   Max_Diam1,
#                   Ecart_Size)
# Label_Size <- c(Label_Size1,
#                 Label_Size1[length(Label_Size1)]+Ecart_Size)
#
# t1 <- mutate(t1,
#              Size=cut(Diam1,
#                       breaks=c(0,Label_Size1+Ecart_Size/2,200),
#                       labels=Label_Size),
#              Size=as.character(Size))
# Palette_Size <- c(3:7)
# names(Palette_Size) <- sort(unique(t1$Size))

# ----- Palette size - Essai 2
# -- Localisation
Max_Classe <- max(t1$Classe,na.rm=T)
Breaks_Size <- seq(20,Max_Classe-10,10)+5
# Label_Size <- seq(20,Max_Classe,10)
Label_Size1 <- c("< ",paste0(Breaks_Size[-length(Breaks_Size)],"-"))
Label_Size2 <- Breaks_Size
Label_Size <- c(paste0(Label_Size1,Label_Size2),
                paste0("> ",Breaks_Size[length(Breaks_Size)]))

t1 <- mutate(t1,
             Size_Loc=cut(Diam1,
                      breaks=c(0,
                               seq(20,Max_Classe-10,10)+5,
                               200),
                      labels=Label_Size),
             Size_Loc=factor(Size_Loc,levels=Label_Size))


# Palette_Size <- 5:(Max_Classe/10+3)
Palette_Size <- seq(3, length.out = length(Label_Size), by = 0.5)
names(Palette_Size) <- Label_Size

Palette_L <- length(Palette_Size)

# -- Valeur de consommation
if (Eval_Qual == T) {
# Max_Classe <- max(t1$VcHa,na.rm=T) # Souci avec la valeur max. On peut avoir des arbres exceptionnels qui viennent fausser la donne
# Max_Classe <- mean(t1$VcHa,na.rm=T)*2
# Max_Classe <- median(t1$VcHa,na.rm=T)*2
Max_Classe <- unname(quantile(t1$VcHa,probs=0.98,na.rm=T))
Ecart_Size <-
  ifelse(
    Max_Classe >= 400,
    floor(Max_Classe / Palette_L / 100 + 0.5) * 100,
    50
  )
# Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L)
Breaks_Size <- seq(Ecart_Size, Max_Classe - Ecart_Size, Ecart_Size)
# Breaks_Size <- Breaks_Size[-c(1,length(Breaks_Size))]
# Breaks_Size[2:length(Breaks_Size)] <- Breaks_Size[2:length(Breaks_Size)]+Ecart_Size/2
Breaks_Size <- Breaks_Size + Ecart_Size / 2
# Label_Size <- seq(0,Max_Classe,Ecart_Size)[-1]
# Label_Sav <- Label_Size
Label_Size1 <- c("< ", paste0(Breaks_Size[-length(Breaks_Size)], "-"))
Label_Size2 <- Breaks_Size
Label_Size <- c(
  paste0(Label_Size1, Label_Size2),
  paste0("> ", Breaks_Size[length(Breaks_Size)])
)

t1 <-
  t1 %>%
  mutate(
    Size_Vc = ifelse(is.na(VcHa), 0, VcHa),
    Size_Vc = cut(
      Size_Vc,
      breaks = c(0, Breaks_Size, 100000),
      labels = Label_Size,
      include.lowest = T),
    Size_Vc = factor(Size_Vc, levels = Label_Size)
  )
# Palette_Size_Vc <- Palette_Size
Palette_Size_Vc <- 4 + (1:length(Label_Size))
names(Palette_Size_Vc) <- Label_Size
}



# -- Valeur de consommation
# Max_Classe <- max(t1$VcHa,na.rm=T)
# Ecart_Size <- floor(Max_Classe/Palette_L/100+0.5)*100
# # Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L)
# Breaks_Size <- seq(0,Max_Classe,Ecart_Size)[-1]
# # Breaks_Size[2:length(Breaks_Size)] <- Breaks_Size[2:length(Breaks_Size)]+Ecart_Size/2
# Breaks_Size <- Breaks_Size+Ecart_Size/2
# # Label_Size <- seq(0,Max_Classe,Ecart_Size)[-1]
# # Label_Sav <- Label_Size
# Label_Size1 <- c("< ",paste0(Breaks_Size[-length(Breaks_Size)],"-"))
# Label_Size2 <- Breaks_Size
# Label_Size <- c(paste0(Label_Size1,Label_Size2),
#                 paste0("> ",Breaks_Size[length(Breaks_Size)]))
#
# t1 <- mutate(t1,
#              Size_Vc=ifelse(is.na(VcHa),
#                             0,VcHa),
#              Size_Vc=cut(Size_Vc,
#                       breaks=c(0,Breaks_Size),
#                       labels=Label_Size,
#                       include.lowest=T),
#              Size_Vc=factor(Size_Vc,levels=Label_Size))
# Palette_Size_Vc <- Palette_Size
# names(Palette_Size_Vc) <- Label_Size


# -- AcctD
if (Eval_Evol) {
Max_Classe <- max(t1$AcctD,na.rm=T)+0.1
Ecart_Size <- floor(Max_Classe/Palette_L/0.01+0.5)*0.01
# Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L)
# Breaks_Size <- seq(0,Max_Classe,Ecart_Size)[-1]
# Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L)
if (Ecart_Size < 0.1) {
  Breaks_Size <- seq(0.1,Max_Classe,0.1)
} else {
Breaks_Size <- seq(0.25,Max_Classe,0.25)
}
# Breaks_Size[2:length(Breaks_Size)] <- Breaks_Size[2:length(Breaks_Size)]+Ecart_Size/2
# Breaks_Size <- Breaks_Size+Ecart_Size/2
# Label_Size <- seq(0,Max_Classe,Ecart_Size)[-1]
Label_Size1 <- c("< ",paste0(Breaks_Size[-length(Breaks_Size)],"-"))
Label_Size2 <- Breaks_Size
Label_Size <- c(paste0(Label_Size1,Label_Size2),
                paste0("> ",Breaks_Size[length(Breaks_Size)]))

t1 <- mutate(t1,
             Size_AcctD=ifelse(is.na(AcctD),
                               0,AcctD),
             Size_AcctD=cut(Size_AcctD,
                            breaks=c(0,Breaks_Size,10),
                            labels=Label_Size,
                            include.lowest=T),
             Size_AcctD=factor(Size_AcctD,levels=Label_Size))
# Palette_Size_AcctD <- Palette_Size
Palette_Size_AcctD <- 4+(1:length(Label_Size))
names(Palette_Size_AcctD) <- Label_Size
}

# # -- Note AFI
if (Eval_Codes) {
Max_Classe <- max(t1$Note_AFI,na.rm=T)
Ecart_Size <- floor(Max_Classe/Palette_L/0.5+0.5)*0.5
# Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L)
# Breaks_Size <- seq(Ecart_Size,Max_Classe-Ecart_Size,Ecart_Size)
# if (Breaks_Size[1] < 1) {
#   Breaks_Size <- Breaks_Size[-1]
# }
Breaks_Size <- seq(0,Max_Classe,length.out=Palette_L-1)
# Breaks_Size[2:length(Breaks_Size)] <- Breaks_Size[2:length(Breaks_Size)]+Ecart_Size/2
Breaks_Size <- Breaks_Size+Ecart_Size/2
# Label_Size <- seq(0,Max_Classe,Ecart_Size)
Label_Size1 <- c("< ",paste0(Breaks_Size[-length(Breaks_Size)],"-"))
Label_Size2 <- Breaks_Size
Label_Size <- c(paste0(Label_Size1,Label_Size2),
                paste0("> ",Breaks_Size[length(Breaks_Size)]))

t1 <- mutate(t1,
             Size_Note_AFI=ifelse(is.na(Note_AFI),
                            0,Note_AFI),
             Size_Note_AFI=cut(Size_Note_AFI,
                      breaks=c(0,Breaks_Size,10),
                      labels=Label_Size,
                      include.lowest=T),
             Size_Note_AFI=factor(Size_Note_AFI,levels=Label_Size),
             Type=factor(Type,levels=c("AV","A")))
Palette_Size_Note_AFI <- Palette_Size
names(Palette_Size_Note_AFI) <- Label_Size
}


# ---- Création tables pour superposition de 2 geom_point :
if (Eval_Codes) {
df <- mutate(t1,
             Value_Size_Note=unname(Palette_Size_Note_AFI)[match(Size_Note_AFI,
                                                         names(Palette_Size_Note_AFI))],
             Value_Size_Note=Value_Size_Note+4,
             Value_Size_Vc=unname(Palette_Size_Vc)[match(Size_Vc,
                                                 names(Palette_Size_Vc))],
             Value_Size_Vc=Value_Size_Vc+4.5) %>%
  select(NumPlac,NumArbre,Cycle,
         Essence,Azimut,Dist,
         Diam1,Classe,VcHa,Note_AFI,Type,

         Value_Size_Note,Value_Size_Vc) %>%
  melt(id=c("NumPlac","NumArbre","Cycle",
            "Essence","Azimut","Dist",
            "Diam1","Classe","VcHa","Note_AFI","Type")) %>%
  mutate(variable=ifelse(variable=="Value_Size_Vc",
                         "Valeur de consommation",
                         "Note écologique AFI"),
         variable=factor(variable,levels=c("Note écologique AFI",
                                           "Valeur de consommation")))
  # mutate(Color=ifelse(variable=="Value_Size_Vc",
  #                     "firebrick","limegreen"))

Palette_VcNote <- c("firebrick","limegreen")
names(Palette_VcNote) <- c("Valeur de consommation","Note écologique AFI")
# PlanArbres_DF <- select(t1,  # Harmoniser les noms ?
#                         NumPlac,NumArbre,Cycle,Essence,Diam1,Classe,
#                         Note_AFI,Size_Note_AFI,
#                         VcHa,Size_Vc) %>%
# t1 <- mutate(t1,
#              Value_Size_Note=Palette_Size_Note_AFI[match(Size_Note_AFI,
#                                                          names(Palette_Size_Note_AFI))],
#              Value_Size_Vc=Palette_Size_Vc[match(Size_Vc,
#                                                  names(Palette_Size_Vc))])

}

@

\section{Localisation}
<<PlanArbres, echo=FALSE, fig.height=10, fig.show='asis', fig.pos="H", warning=FALSE, message=FALSE, eval=Eval_Appendix, include=Eval_Appendix>>=
#N.B : pour avoir accès aux polices de Windows, il faut les importer grâce à la fonction import_font() du pckg extrafont
ListPlac <- sort(as.numeric(unique(t1$NumPlac)))
ListWarn <- c()
Count=0
pl_LIST <- list()
for (plac in ListPlac) {
  Count=Count+1
  #   i=1

    p <- filter(t1,
                NumPlac==plac) %>%
      mutate(Essence=factor(Essence, levels=str_wrap(names(Palette_Essence), 15)))

  pRepere <- p[p$Diam1 >= 17.5,]

  MaxDist <- ifelse(max(p$Dist, na.rm=T) < 20,
                    20,max(p$Dist, na.rm=T))

  if (length(unique(p$Diam1))==1) {
    if (is.na(unique(p$Diam1))) {
      ListWarn <- c(ListWarn,i)
    }
  } else {
    SizeMin <- 5
    SizeMax <- 15

  pl <- ggplot(data=p,
               aes(y=Dist,
                   x=Azimut,
                   # shape=Type,
                   # color=Essence,
                   fill=Essence,
                   size=Size_Loc,
                   label=NumArbre)) +

    geom_hline(yintercept=seq(5,MaxDist,5), colour="grey", linetype=2, alpha=1) +
    geom_vline(xintercept=c(0,100,200,300,400), colour="grey", size=0.5) +

    annotate("text",
               x=rep(seq(100,400,100),
                     (MaxDist-5)/5+1),
               y=sort(rep(seq(5,MaxDist,5),(400-100)/100+1)),
               label=paste0(sort(rep(seq(5,MaxDist,5),(400-100)/100+1))," m"),
               size=2, colour="grey", fontface="bold",
               vjust=-0.8, angle = rep(c(-90,180,90,0),(MaxDist-5)/5+1),alpha=1) +

    geom_point(alpha=0.6, shape=21) +
    geom_text(pRepere, mapping=aes(y=Dist, x=Azimut),
              color="navyblue", size=2, vjust=2, fontface="bold") +
    scale_size_manual(name="Ordres de grandeur\n de Diam1 (cm)",
                      values=Palette_Size,
                      drop=F) +
    ggtitle(paste0(NomForet," - Placette ",plac))

    pl <- pl +
      scale_y_continuous(limits=c(0,MaxDist), expand=c(0,0))+
      scale_x_continuous(limits=c(0,400),
                         expand=c(0,0),
                         label=paste0(c(0,100,200,300,400)," gr")) +
      scale_fill_manual(values=Palette_Essence,
                        drop=F) +
      theme_bw() +
      theme(text=element_text(size=6),
            axis.text.x  = element_text(colour="blue"),
            # text=element_text(family="Times"),
            axis.title.x  = element_blank(),
            axis.title.y  = element_blank(),
            axis.text.y= element_blank(),
            # axis.text.y  = element_text(size=8),
            axis.line=element_blank(),
            legend.position="bottom",
            legend.box="horizontal",
            # legend.box="vertical",
            legend.spacing.y=unit(1,"pt"),
            axis.ticks.y =element_blank(),

            panel.grid=element_blank(),
            panel.grid.minor.y=element_blank(),
            panel.border=element_blank(),
            plot.margin = unit(c(0.3,0.3,0.3,0.3), "cm")) +
      coord_polar() +

      # nrow=ifelse(length(unique(t_Histo$Essence)) > 7,
      #                                    round(length(unique(t_Histo$Essence))/7,0),
      #                                    1),
      #                        byrow=T

      # guides(size=FALSE) + # MyTheme +

      guides(
        fill =
          guide_legend(
            order = 1,
            ncol = 5,
            override.aes = list(shape = 21, size = 4.5)
          ),
        size =
          guide_legend(order = 2, ncol = 5, override.aes = list(shape = 1))
      ) +
      # guides(fill=guide_legend(order=1,
      #                            override.aes=list(shape=21,
      #                                              size=4.5)),
      #          size=guide_legend(order=2,
      #                            override.aes=list(shape=1))) +
      theme(
        legend.key = element_rect(colour = "white"),
        legend.direction = "vertical"
      )

    # if (Count==1) {
    #   pl_temp <- pl
    #   mylegend <- g_legend(pl)
    #
    # }
    # if (Count==2) {
    #   grid.arrange(arrangeGrob(pl_temp + theme(legend.position="none"),
    #                            pl + theme(legend.position="none"),
    #                            ncol=1),
    #                mylegend, nrow=2,heights=c(8,3))
    #   Count=0
    # }

    pl_LIST[[Count]] <- pl

    if (Count==4) {
      mylegend <- g_legend(pl_LIST[[1]])
      grid.arrange(arrangeGrob(pl_LIST[[1]] + theme(legend.position="none"),
                               pl_LIST[[2]] + theme(legend.position="none"),
                               pl_LIST[[3]] + theme(legend.position="none"),
                               pl_LIST[[4]] + theme(legend.position="none"),
                               ncol=2,nrow=2),
                   mylegend, nrow=2, heights=c(8,2))
      Count=0
    }
    # Cas où il n'y a plus assez de placettes (4) pour remplir une feuille
    if (Count < 4 & plac==ListPlac[length(ListPlac)]) {
      mylegend <- g_legend(pl_LIST[[1]]) # On récupère la légende

      miss_NBRE <- 4-Count
      # Boucle pour créer figure vide
      for (i in 1:miss_NBRE) {
        pl_LIST[[Count+i]] <- ggplot() +
          theme_void()
      }

      grid.arrange(arrangeGrob(pl_LIST[[1]] + theme(legend.position="none"),
                               pl_LIST[[2]] + theme(legend.position="none"),
                               pl_LIST[[4]] + theme(legend.position="none"),
                               pl_LIST[[3]] + theme(legend.position="none"),
                               ncol=2,nrow=2),
                   mylegend, nrow=2,heights=c(8,2))
      Count=0
    }

    # suppressWarnings(print(pl))
  }
  # info <- round(match(plac,ListPlac)/length(ListPlac)*100)
  # setTkProgressBar(pb, info, paste0("Edition (",info," %)"),
  #                  paste0(ifelse(lang=="FRA",
  #                                "Edition des plans placettes - dispositif ",
  #                                "Writing map plots - stand "),
  #                         nom1,
  #                         " : ",
  #                         info,"% done"))
}
# close(pb)

if (length(ListWarn) > 0) {
  if (length(ListWarn) > 1) {
    message(paste0(ifelse(lang=="FRA",
                          "Les placettes N° ",
                          "Plots N° "),
                   paste0(ListPlac[ListWarn],collapse=","),
                   ifelse(lang=="FRA",
                          " n'ont aucun Diam1 non vide.\nPas de plans créés pour ces placettes",
                          " don't have any Diam1 recorded.\nNo map drawn for these plots")))
  } else {
    message(paste0(ifelse(lang=="FRA",
                          "La placette N° ",
                          "Plot N° "),
                   ListPlac[ListWarn],
                   ifelse(lang=="FRA",
                          " n'a aucun Diam1 non vide.\nPas de plan créé pour cette placette",
                          " don't have any Diam1 recorded.\nNo map drawn for this plot")))
  }
}
#
# install.packages("extrafont")
# library(extrafont)
# font_import()
# loadfonts(device="win")       #Register fonts for Windows bitmap output
# fonts()                       #vector of font family names
# ##  [1] "Andale Mono"                  "AppleMyungjo"
# ##  [3] "Arial Black"                  "Arial"
##  [5] "Arial Narrow"                 "Arial Rounded MT Bold"


# windowsFonts(Times=windowsFont("TT Times New Roman"))
# library(ggplot2)
# data(mtcars)
# ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
#   ggtitle("Fuel Efficiency of 32 Cars") +
#   xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") +
#   theme_bw() +
#   theme(text=element_text(family="Times", face="bold", size=12)) #Times New Roman, 12pt, Bold
# #example taken from the Github project page



@
\clearpage
% \textbf{\textcolor{red}{Rajouter superposition Vc et Note AFI ?}}
% \textcolor{red}{Attention : après observation, manque Pin L dans la mercuriale de prix unitaires. Aligner sur Pin N ? -> confirmation Julien. Ok. A revoir\\
% Aussi en attente : carte sur accroissement (réviser fonction calculs arbres)}\\
%
% \textcolor{red}{+ Précision : si arbre est limite, VcHa = 0 -> changer représentation ?}

\EditIf{\Sexpr{Eval_Evol}}{TRUE}{
\section{Accroissement en diamètre}
<<PlanArbres_AcctD, echo=FALSE, fig.height=10, fig.show='asis', fig.pos="H", warning=FALSE, message=FALSE, eval=Eval_Evol && Eval_Appendix, include=Eval_Evol && Eval_Appendix>>=

ListPlac <- sort(as.numeric(unique(t1$NumPlac)))
ListWarn <- c()
Count=0
pl_LIST <- list()
for (plac in ListPlac) {
  Count=Count+1
  p <- filter(t1,
                NumPlac==plac) %>%
      mutate(Essence=factor(Essence,levels=names(Palette_Essence)))

  pRepere <- p[p$Diam1 >= 17.5,]

  MaxDist <- ifelse(max(p$Dist, na.rm=T) < 20,
                    20,max(p$Dist, na.rm=T))

  if (length(unique(p$Diam1))==1) {
    if (is.na(unique(p$Diam1))) {
      ListWarn <- c(ListWarn,i)
    }
  } else {
    SizeMin <- 5
    SizeMax <- 15


  pl <- ggplot(data=p,
                 aes(y=Dist,
                     x=Azimut,
                     # shape=Type,
                     size=Size_Loc,
                     # colour=Size_AcctD,
                     fill=Size_AcctD,
                     label=NumArbre)) +

      geom_hline(yintercept=seq(5,MaxDist,5), colour="grey", linetype=2, alpha=1) +
      geom_vline(xintercept=c(0,100,200,300,400), colour="grey", size=0.5) +

    annotate("text",
             x=rep(seq(100,400,100),(MaxDist-5)/5+1),
             y=sort(rep(seq(5,MaxDist,5),(400-100)/100+1)),
             label=paste0(sort(rep(seq(5,MaxDist,5),(400-100)/100+1))," m"),
             size=2, colour="grey", fontface="bold",
             vjust=-0.8, angle = rep(c(-90,180,90,0),(MaxDist-5)/5+1),
             alpha=1) +

      geom_point(alpha=0.8, shape=21) +
    geom_text(pRepere, mapping=aes(y=Dist, x=Azimut),
              color="navyblue", size=2, vjust=2, fontface="bold") +
    scale_size_manual(name="Ordres de grandeur\n de Diam1 (cm)",
                      values=Palette_Size,
                      drop=F) +
      scale_fill_brewer(name="Ordres de grandeur\n de AcctD (cm/an)",
                 palette="Greens",
                 drop=F) +
    # scale_colour_brewer(name="Ordres de grandeur\n de AcctD (cm/an)",
    #              palette="Greens",
    #              drop=F) +
    ggtitle(paste0(NomForet," - Placette ",plac))

    pl <- pl +
      scale_y_continuous(limits=c(0,MaxDist), expand=c(0,0))+
      scale_x_continuous(limits=c(0,400),
                         expand=c(0,0),
                         label=paste0(c(0,100,200,300,400)," gr")) +
      # scale_colour_manual(values=Palette_Essence,
      #            drop=F) +
            # scale_colour_manual(values=rep("black",length(Palette_Essence)),
            #      drop=F) +
      # pl +

      # annotate("text", x=seq(50,350,100),y=rep(MaxDist,4),
      # label=c("NE","SE","SO","NO"),
      # size=5, colour="black", fontface="bold", alpha=0.5) +
      theme_bw() +
      theme(text=element_text(size=6),
            axis.text.x  = element_text(colour="blue"),
            # text=element_text(family="Times"),
            axis.title.x  = element_blank(),
            axis.title.y  = element_blank(),
            axis.text.y= element_blank(),
            # axis.text.y  = element_text(size=8),
            axis.line=element_blank(),
            legend.position="bottom",
            legend.box="horizontal",
            legend.spacing.y=unit(1,"pt"),

            axis.ticks.y =element_blank(),

            panel.grid=element_blank(),
            panel.grid.minor.y=element_blank(),
            panel.border=element_blank(),
            plot.margin = unit(c(0.3,0.3,0.3,0.3), "cm")) +

      coord_polar() +

      guides(fill=guide_legend(order=1,
                                 override.aes=list(shape=21,
                                                   size=5)),
               size=guide_legend(order=2,
                                 override.aes=list(shape=1))) +

      theme(legend.key = element_rect(colour = "white"))

    # if (Count==1) {
    #   pl_temp <- pl
    #   mylegend <- g_legend(pl)
    #
    # }
    # if (Count==2) {
    # grid.arrange(arrangeGrob(pl_temp + theme(legend.position="none"),
    #                          pl + theme(legend.position="none"),
    #                          ncol=1),
    #              mylegend, nrow=2,heights=c(9,2))
    #   Count=0
    # }


    pl_LIST[[Count]] <- pl

    if (Count==4) {
      mylegend <- g_legend(pl_LIST[[1]])
      grid.arrange(arrangeGrob(pl_LIST[[1]] + theme(legend.position="none"),
                               pl_LIST[[2]] + theme(legend.position="none"),
                               pl_LIST[[3]] + theme(legend.position="none"),
                               pl_LIST[[4]] + theme(legend.position="none"),
                               ncol=2,nrow=2),
                   mylegend, nrow=2,heights=c(8,2))
      Count=0
    }
    # Cas où il n'y a plus assez de placettes (4) pour remplir une feuille
    if (Count < 4 & plac==ListPlac[length(ListPlac)]) {
      mylegend <- g_legend(pl_LIST[[1]]) # On récupère la légende

      miss_NBRE <- 4-Count
      # Boucle pour créer figure vide
      for (i in 1:miss_NBRE) {
        pl_LIST[[Count+i]] <- ggplot() +
          theme_void()
      }

      grid.arrange(arrangeGrob(pl_LIST[[1]] + theme(legend.position="none"),
                               pl_LIST[[2]] + theme(legend.position="none"),
                               pl_LIST[[4]] + theme(legend.position="none"),
                               pl_LIST[[3]] + theme(legend.position="none"),
                               ncol=2,nrow=2),
                   mylegend, nrow=2,heights=c(8,2))
      Count=0
    }

  }
}

if (length(ListWarn) > 0) {
  if (length(ListWarn) > 1) {
    message(paste0(ifelse(lang=="FRA",
                          "Les placettes N° ",
                          "Plots N° "),
                   paste0(ListPlac[ListWarn],collapse=","),
                   ifelse(lang=="FRA",
                          " n'ont aucun Vc non vide.\nPas de plans créés pour ces placettes",
                          " don't have any Vc recorded.\nNo map drawn for these plots")))
  } else {
    message(paste0(ifelse(lang=="FRA",
                          "La placette N° ",
                          "Plot N° "),
                   ListPlac[ListWarn],
                   ifelse(lang=="FRA",
                          " n'a aucun Vc non vide.\nPas de plan créé pour cette placette",
                          " don't have any Vc recorded.\nNo map drawn for this plot")))
  }
}
@
\clearpage



\fancychapterstyle
\chapter{Prélèvements par placettes}

<<Tab_Prelvt_Plac, echo=F, warning=F, size='footnotesize', fig.height=4, fig.cap="Répartition du prélèvement en volume et en valeur par catégories de diamètre (placettes d'inventaire passées en coupe)", fig.pos="H", results='asis', eval=Eval_Evol && Eval_Appendix, include=Eval_Evol && Eval_Appendix>>=

# ,eval=Eval_Evol, include=Eval_Evol

# --- Détection des placettes passées en coupe :
Plac_COUPE <- filter(gfPlaDen_Coupe,
                     NumForet==Choix &
                       is.element(Coupe,c("E","PF/E","C"))) %>%
  select(NumPlac) %>%
  distinct() %>%
  unlist() %>%
  unname()

Plac_COUPE <- filter(gfPlaDen_Coupe,
                     NumForet==Choix) %>%
  select(NumForet,NumPlac,Cycle,Coupe,Gha,Vha,VcHa) %>% # Rajouter comparaison avec AcctGper & Co.
  mutate(Coupe=ifelse(Coupe=="PF/E",
                      "E",Coupe),
         Coupe=ifelse(Coupe=="PF",
                      NA,Coupe),
         Coupe_Tot=Coupe,
         Coupe_Tot=ifelse(Coupe_Tot=="C",
                          "E",Coupe_Tot))

####################################################################
Prelvt_ALIBI0 <- expand.grid(NumPlac=unique(Placettes$NumPlac),
                             Cycle=c(1:(DernierCycle-1)),
                             Cat=c("Total"),
                             Coupe=c("C","E"),
                             stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Cat=as.character(Cat))

# --- Table Total (distinction sur Coupe)
t_Tot1 <- filter(gfPlaDen_Coupe,
            NumForet==Choix &
              is.element(Coupe,c("E","PF/E","C"))) %>%
  # mutate(Cat="Total",
  #        Cycle=paste0("\\textbf{",Cycle,"}"),
  #        Coupe=paste0("\\textbf{",Coupe,"}"),
  #        Cat=paste0("\\textbf{",Cat,"}"),
  #        Gha=paste0("\\textbf{",Gha,"}"),
  #        VcHa=paste0("\\textbf{",VcHa,"}")) %>%
  mutate(Coupe=as.character(Coupe),
         Cat="Total") %>%
  full_join(Prelvt_ALIBI0) %>%
  select(NumPlac,Cycle,Cat,Coupe,Gha,Vha,VcHa)

# Prelvt_ALIBI <- data.frame(Cycle=rep(1:(DernierCycle-1),12),
#                       Cat=sort(rep(c("PB","BM","GB","TGB"),(DernierCycle-1)*3)),
#                       Coupe=sort(rep(c("C","E"),(DernierCycle-1)*3)),
#                       stringsAsFactors=F)# %>%
Prelvt_ALIBI <- expand.grid(NumPlac=unique(Placettes$NumPlac),
                            Cycle=c(1:(DernierCycle-1)),
                            Cat=c("PB","BM","GB","TGB"),
                            Coupe=c("C","E"),
                            stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe),
         Cat=as.character(Cat))
  # mutate(Cat=factor(Cat,levels=c("PB","BM","GB","TGB"))) %>%
  # arrange(Cycle,Cat)

t0 <- filter(gfPlaDen_CatCoupe,
            NumForet==Choix &
              is.element(Coupe,c("E","PF/E","C"))) %>%
  select(NumPlac,Cycle,Cat,Coupe,Gha,Vha,VcHa) %>%
  mutate(Coupe=as.character(Coupe)) %>%
  # mutate(Cycle=as.character(Cycle),
  #        Coupe=as.character(Coupe),
  #        Cat=as.character(Cat),
  #        Gha=as.character(Gha),
  #        VcHa=as.character(VcHa)) %>%
  full_join(t_Tot1) %>%
  full_join(Prelvt_ALIBI) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         # Cycle=paste0("Cycle",Cycle),
         Cat=factor(Cat,levels=c("PB","BM","GB","TGB","Total"))) %>%
  group_by(NumPlac,Cycle,Cat,Coupe) %>%
  summarise(VcHa=sum(VcHa,na.rm=T),
            Gha=sum(Gha,na.rm=T),
            Vha=sum(Vha,na.rm=T),
            PU=VcHa/Vha) %>%
  ungroup() %>%
  melt(id=c("NumPlac","Cycle","Cat","Coupe")) %>%
  mutate(value=ifelse(variable=="Gha",
                      round(value,1),
                      round(value,0)),
         value=ifelse(value==0 | is.na(value),
                      "",value),
         value=ifelse(Cat=="Total",
                      ifelse(value!=0 & !is.na(value),
                             paste0("\\cellcolor{LightGray}{",
                                               value,
                                               "}"),
                             "\\cellcolor{LightGray}{}"),
                      value),
         # value=ifelse(Cat=="Total",
         #              paste0("\\textbf{",value,"}"),
         #              value),
         variable=factor(variable,levels=c("Gha","Vha","VcHa","PU")),
         Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
         Coupe=factor(Coupe,levels=c("Exploité","Chablis"))) %>%
  dcast(NumPlac + Cycle + variable ~ Coupe + Cat,
        value.var="value") %>%
  # mutate(Coupe=ifelse(Coupe=="E","Exploité","Chablis"),
  #        Coupe=factor(Coupe,levels=c("Exploité","Chablis"))) %>%
         # Coupe=ifelse(Cat=="Total",
         #              paste0("\\textbf{",Coupe,"}"),Coupe),
         # Cat=ifelse(Cat=="Total",
         #            "\\rowcolor{LightGray} \\textbf{Total}",Cat),
         # Cat=factor(Cat,levels=c("PER","PB","BM","GB","TGB",
         #                         "\\rowcolor{LightGray} \\textbf{Total}")),
         # Coupe=factor(Coupe,levels=c("Exploité","\\textbf{Exploité}",
         #                             "Chablis","\\textbf{Chablis}"))) %>%
  arrange(NumPlac,Cycle,variable)# %>%
  # mutate(Coupe=ifelse(Cat=="Total",
  #                     paste0("\\textbf{",Coupe,"}"),Coupe),
  #        Cat=ifelse(Cat=="Total",
  #                   "\\rowcolor{LightGray} Total",Cat)) %>%
  # MultiRow(1)





# %%%%%%%%%%%%%%%%%%%%%%%%% TOTAUX


# Prelvt_ALIBI2 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Total",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI2 <- expand.grid(NumPlac=unique(Placettes$NumPlac),
                             Cycle=c(1:(DernierCycle-1)),
                            Coupe=c("Total"),
                            stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe))

# -- Total (tous prélèvements confondus)
t_Tot <- filter(gfPlaDen_Coupe,
                NumForet==Choix &
                  is.element(Coupe,c("E","PF/E","C"))) %>%
  mutate(Coupe="Total") %>%
  select(NumPlac,Cycle,Coupe,Gha,Vha,VcHa) %>%
  full_join(Prelvt_ALIBI2) %>%
  group_by(NumPlac,Cycle,Coupe) %>%
  summarise(Gha=round(sum(Gha,na.rm=T),1),
            Vha=round(sum(Vha,na.rm=T)),
            VcHa=round(sum(VcHa,na.rm=T))) %>%
  ungroup() %>%
  mutate(PU=VcHa/Vha,
         PU=ifelse(is.na(PU),0,round(PU,0)),
         VcHa=ifelse(VcHa!=0,
                     paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                            VcHa,
                            "}}"),
                     "\\cellcolor{DimGray}"),
         Gha=ifelse(Gha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                           Gha,
                           "}}"),
                    "\\cellcolor{DimGray}"),
         Vha=ifelse(Vha!=0,
                    paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                           Vha,
                           "}}"),
                    "\\cellcolor{DimGray}"),
         PU=ifelse(PU!=0,
                   paste0("\\cellcolor{DimGray} \\textbf{\\textcolor{White}{",
                          PU,
                          "}}"),
                   "\\cellcolor{DimGray}")) %>%
  melt(id=c("NumPlac","Cycle","Coupe")) %>%
  # mutate(value=ifelse(Cat=="Total",
  #                     paste0("\\textbf{\\textcolor{White}{",value,"}}"),
  #                     value),
  #        variable=factor(variable,levels=c("Gha","VcHa"))) %>%
  mutate(variable=factor(variable,levels=c("Gha","Vha","VcHa","PU"))) %>%
  dcast(NumPlac + Cycle + variable ~ Coupe,
        value.var="value")

# command_Total1 <- unlist(unname(t_Tot[1,]))
# command_Total1 <- command_Total1[which(!duplicated(command_Total1))]
# command_Total1 <- paste0(command_Total1,
#                          collapse=" & ")

# %%%%%%%%%% %%%%%%%%%% #
# Prelvt_ALIBI3 <- data.frame(Cycle=rep(1:(DernierCycle-1)),
#                       Coupe=rep("Taux",DernierCycle-1),
#                       stringsAsFactors=F)
Prelvt_ALIBI3 <- expand.grid(NumPlac=unique(Placettes$NumPlac),
                             Cycle=c(1:(DernierCycle-1)),
                            Coupe=c("Taux"),
                            stringsAsFactors=F) %>%
  data.frame() %>%
  mutate(Coupe=as.character(Coupe))

# -- Taux de prélèvement (tous prélèvements confondus)
t_Prelvt <- filter(gfPlaDen_Coupe,
            NumForet==Choix) %>%
  select(NumPlac,Cycle,Coupe,Gha,Vha,VcHa) %>%
  mutate(Coupe=gsub("PF/","",Coupe),
         Coupe=gsub("PF","",Coupe),
         Coupe=gsub("C","E",Coupe),
         Coupe=ifelse(Coupe=="E","Taux",Coupe),
         Coupe=ifelse(Coupe=="",NA,Coupe),
         Coupe=as.character(Coupe)) %>%
  full_join(Prelvt_ALIBI3) %>%
  group_by(NumPlac,Cycle,Coupe) %>%
  summarise(VcHa=sum(VcHa,na.rm=T),
            Gha=sum(Gha,na.rm=T),
            Vha=sum(Vha,na.rm=T)) %>%
  # ungroup() %>%
  group_by(NumPlac,Cycle) %>%
  mutate(Gha_Tot=sum(Gha),
         Vha_Tot=sum(Vha),
         VcHa_Tot=sum(VcHa)) %>%
  ungroup() %>%
  filter(Coupe=="Taux") %>%
  mutate(Gha_Part=round(Gha/Gha_Tot*100,0),
         Vha_Part=round(Vha/Vha_Tot*100,0),
         VcHa_Part=round(VcHa/VcHa_Tot*100,0),
         PU="",

         Gha_Part=ifelse(Gha_Part!=0,
                         paste0("\\scriptsize{",Gha_Part," \\%}"),
                         ""),
         Gha_Part=paste0("\\multicolumn{1}{c|}{",Gha_Part,"}"),
         Vha_Part=ifelse(Vha_Part!=0,
                         paste0("\\scriptsize{",Vha_Part," \\%}"),
                         ""),
         Vha_Part=paste0("\\multicolumn{1}{c|}{",Vha_Part,"}"),
         VcHa_Part=ifelse(VcHa_Part!=0,
                         paste0("\\scriptsize{",VcHa_Part," \\%}"),
                         ""),
         VcHa_Part=paste0("\\multicolumn{1}{c|}{",VcHa_Part,"}")) %>%
  select(NumPlac,Cycle,Coupe,Gha_Part,Vha_Part,VcHa_Part,PU) %>%
  rename(Gha=Gha_Part,
         Vha=Vha_Part,
         VcHa=VcHa_Part) %>%
  melt(id=c("NumPlac","Cycle","Coupe")) %>%
  mutate(variable=factor(variable,levels=c("Gha","Vha","VcHa","PU"))) %>%
  dcast(NumPlac + Cycle + variable ~ Coupe,
        value.var="value")

# command_Total2 <- unlist(unname(t_Prelvt[1,]))
# command_Total2 <- command_Total2[which(!duplicated(command_Total2))]
# # command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\cellcolor{DimGray} \\textbf{\\textcolor{White}{Taux de prélèvement total}}}"
# command_Total2[which(command_Total2=="Taux")] <- "\\multicolumn{2}{|c|}{\\textbf{Taux de prélèvement total}}"
# command_Total2 <- paste0(command_Total2,
#                          collapse=" & ")
#
# command_Total <- paste0("\\hline\\hline\n",command_Total1,
#                         "\\\\\n\\hline\n",
#                         command_Total2,
#                         "\\\\")

# ListPos[length(ListPos)+1]=dim(t0)[1]
# command=c(command,command_Total)

# remplacement des Cycles par les année + ajout de multicolumn
CyclesPrelvt_DF <- data.frame(Cycle_Ante=1:(DernierCycle-1),
                              Cycle_Courant=2:DernierCycle,
                              stringsAsFactors=F) %>%
  mutate(Annee_Ante=Cycles_Disp$Annee[match(Cycle_Ante,Cycles_Disp$Cycle)],
         Annee_Courant=Cycles_Disp$Annee[match(Cycle_Courant,Cycles_Disp$Cycle)],

         Periodes=paste0(Annee_Ante,"-",Annee_Courant))

t0 <- left_join(t0,t_Tot) %>% #head(t0,8) %>%
  left_join(t_Prelvt) %>%
  left_join(CyclesPrelvt_DF[,c("Cycle_Ante","Periodes")],
            by=c("Cycle"="Cycle_Ante")) %>%
  mutate(variable=as.character(variable),
         variable=ifelse(variable=="Gha",
                         "G",variable),
         variable=ifelse(variable=="Vha",
                         "V",variable),
         variable=ifelse(variable=="VcHa",
                         "Vc",variable)) %>%
  select(one_of("Periodes",
                names(t0)[which(!names(t0) %in% c("Cycle","Periodes"))],
                "Total","Taux")) %>%
  MultiRow(c(1,2))

# %%%%%%%%%% IMPRESSION %%%%%%%%%% #

# Edition des tableaux
# NbLignes <- 58
# NbSheet <- ceiling(dim(t0)[1]/NbLignes)
#
# Count = 0
# for (k in 1:NbSheet) {
#  # -- Diminue le nombre de lignes du tableau de la première page pour pouvoir mettre un titre
#   # NbLignes <- ifelse(k==1,
#   #                    50,56) Pas besoin car titre en annexe est modifié
#
#   if (Count+NbLignes < dim(t0)[1]) {
#     temp <- t0[(Count+1):(Count+NbLignes),]
#     Count <- Count + dim(temp)[1]
#   } else {
#     temp <- t0[(Count+1):dim(t0)[1],]
#   }

# -- 0.Position Total
# pos_Total <- which(t0$Cat=="\\rowcolor{LightGray} \\textbf{Total}")-1
ListPos <- list()
command=c()
# for (i in 1:length(pos_Total)) {
#   ListPos[length(ListPos)+1] <- pos_Total[i]
#   command <- c(command,"\\hline\n")
# }


# %%%%%%%%%% %%%%%%%%%% #
ListPos <- list()
command=c()
# -- 1.Position changement Cycle.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
# pos_Cycle <- which(!is.na(t0$Periodes))[-1]
#
# if (DernierCycle > 2) {
#   for (i in 1:length(pos_Cycle)) {
#     ListPos[length(ListPos)+1] <- pos_Cycle[i]-1
#     command <- c(command,"\\midrule[0.5pt]\n")
#   }
# } else {
#   pos_Cycle <- dim(t0)[1]+1
# }

# -- 1Bis.Position changement de placettes.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
pos_Plac <- which(!is.na(t0$NumPlac))[-1]

# if (DernierCycle > 2) {
  for (i in 1:length(pos_Plac)) {
    ListPos[length(ListPos)+1] <- pos_Plac[i]-1
    command <- c(command,"\\midrule[0.5pt]\n")
  }
# } else {
#   pos_Plac <- dim(t0)[1]+1
# }


t0 <- mutate(t0,
             Periodes=NULL) %>%
  rename_("\\multirow{2}{*}{\\parbox{1.6cm}{\\centering \\textbf{\\No Placette}}}"="NumPlac",
              " & \\multirow{2}{*}{\\parbox{1cm}{\\centering \\textbf{Variable}}}"="variable",
              " & \\multirow{2}{*}{\\parbox{1.9cm}{\\centering \\textbf{Total des prélèvements}}}"="Total",
              " & \\multicolumn{1}{c|}{\\multirow{2}{*}{\\parbox{1.7cm}{\\centering \\textbf{Taux de prélèvement}}}}"="Taux")

# %%%%%%%%%% %%%%%%%%%% #
# -- 2.Construction entête :
Ligne1 <- str_sub(names(t0)[3:(dim(t0)[2]-2)],
                  str_locate(names(t0)[3:(dim(t0)[2]-2)],"_")[,1]+1,-1)
# Ligne1 <- gsub("VcHa","Vc",Ligne1)
# Ligne1 <- gsub("Gha","G",Ligne1)
# Ligne1 <- paste0("& & ",paste0(Ligne1,collapse=" & "))

names(t0)[3:(dim(t0)[2]-2)] <- str_sub(names(t0)[3:(dim(t0)[2]-2)],
                                   1,
                                   str_locate(names(t0)[3:(dim(t0)[2]-2)],"_")[,1]-1)



# Entete_Annees <- paste0(CyclesPrelvt_DF$Annee_Ante,
#                         " - ",
#                         CyclesPrelvt_DF$Annee_Courant)
# names(t0)[3:dim(t0)[2]] <- Entete_Annees

# ajout de multicolumn
pos_Dupl <- which(duplicated(names(t0)))
names(t0)[pos_Dupl-1] <- paste0(" & \\multicolumn{5}{c|}{\\textbf{",
                                names(t0)[pos_Dupl-1],"}}")
names(t0)[pos_Dupl] <- ""
Entete <- paste0(paste0(names(t0),collapse=""),
                 paste0("\\\\ \n\\cline{3-",dim(t0)[2]-2,"}"))

names(t0) <- c("","",Ligne1,"","")
names(t0)[which(names(t0)=="Total")] <- paste0("\\cellcolor{LightGray}{",
                                               names(t0)[which(names(t0)=="Total")],
                                               "}")
names(t0)[dim(t0)[2]] <- paste0("\\multicolumn{1}{c|}{",
                                names(t0)[dim(t0)[2]],"}")
# %%%%%%%%%% %%%%%%%%%% #
# -- 3.Position pour rajout \\cline{1-1}\\cline{3-dim(t0)[2]} : séparation pour un même mode de prélèvement

# command=paste0("\\cline{3-",dim(t0)[2],"}\\\\\n",
#                # paste0(rep("&",dim(t0)[2]-1),collapse=" "),
#                Ligne1,
#                "\n\\\\ \\cline{1-1}\\cline{3-",dim(t0)[2],"}\n")

# for (i in (1:(dim(t0)[1]))[-c(pos_Cycle,pos_Plac)]) {
#   ListPos[length(ListPos)+1] <- i-1
#   command <- c(command,paste0("\\cline{3-",dim(t0)[2],"}\n"))
# }



# %%%%%%%%%% %%%%%%%%%% #


NbLignes <- 14
Count = 0
NbSheet <- ceiling(dim(t0)[1]/4/NbLignes)
for (k in 1:NbSheet) {
 # -- Diminue le nombre de lignes du tableau de la première page pour pouvoir mettre un titre
  # NbLignes <- ifelse(k==1,
  #                    50,56) Pas besoin car titre en annexe est modifié

  if (k < NbSheet) { #Count+NbLignes < dim(t0)[1]
    temp <- t0[(Count+1):(Count+NbLignes*4),]
    Count <- Count + dim(temp)[1]
  } else {
    temp <- t0[(Count+1):dim(t0)[1],]
  }



  # ----- Position des midrule and Co
  ListPos <- list()
command=c()
# -- 1.Position changement Cycle.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
# pos_Cycle <- which(!is.na(t0$Periodes))[-1]
#
# if (DernierCycle > 2) {
#   for (i in 1:length(pos_Cycle)) {
#     ListPos[length(ListPos)+1] <- pos_Cycle[i]-1
#     command <- c(command,"\\midrule[0.5pt]\n")
#   }
# } else {
#   pos_Cycle <- dim(t0)[1]+1
# }

# -- 1Bis.Position changement de placettes.
# Rajout de \\cmidpoint[0.8pt]{1)dim(t0)[2]}
pos_Plac <- which(!is.na(temp[,1]))[-1]

# if (DernierCycle > 2) {
  for (i in 1:length(pos_Plac)) {
    ListPos[length(ListPos)+1] <- pos_Plac[i]-1
    command <- c(command,"\\midrule[0.5pt]\n")
  }

  pos_Dupl <- which(duplicated(names(temp)))

  pos <- -1
ListPos <- c(ListPos,list(pos))
command=c(command,paste0("\\hline\n",Entete,"\n"))

  for (i in (1:(dim(temp)[1]))[-c(pos_Plac)]) {
  ListPos[length(ListPos)+1] <- i-1
  command <- c(command,paste0("\\cline{2-",dim(temp)[2],"}\n"))
}

  ListPos[length(ListPos)+1] <- dim(temp)[1]
command <- c(command,paste0("\\cline{1-",dim(temp)[2]-1,"}"))


print(xtable(temp,
             # digits=rep(0,dim(t1)[2]+1),
             digits=rep(0,dim(temp)[2]+1),
             align=c("M{0cm}|","|M{1.6cm}","|M{1cm}",
                     rep("|M{0.5cm}",dim(temp)[2]-4),"|M{1.9cm}|","M{1.7cm}"),
             caption = paste0("Prélèvements constatés sur la période (toutes placettes confondues) - ",k,"/",NbSheet),
             label   = "Tab_Prelvt_Plac"),
      caption.placement = "bottom",
      hline.after=F,
      sanitize.text.function=function(x){return(x)},
      include.rownames=F,
      add.to.row=list(
            pos=ListPos,
            command=command),
      size="\\footnotesize")
}
@
\FloatBarrier
\clearpage
}{}
\fancychapterstyle
\chapter{Fiches de relevés d'inventaire}
\clearpage

\DefineVerbatimEnvironment{Sinput}{Verbatim}{formatcom = {\color[rgb]{0, 0, 0.56}}}
\begin{landscape}
\begin{center}

\newcolumntype{P}[1]{>{\centering\arraybackslash}p{#1}}
\newcolumntype{M}[1]{>{\centering\arraybackslash}m{#1}}
\newcolumntype{L}[1]{>{\raggedright\arraybackslash }b{#1}}

\pagestyle{plain} % numéros de page

<<Preparation_PrintFiches, echo=F, warning=FALSE, message=F, eval=Eval_Appendix, include=Eval_Appendix>>=
# ------------------------------------------- Paramètres
lang="FRA"
NbLignes <- ifelse(lang=="FRA",
                   26,
                   26) # nombres de lignes du tableau par page

# setwd(repGF)
# load("Tables/gfDonneesBrutes.Rdata")
# load("Tables/afiCodes.Rdata")
Arbres_Fiches <- left_join(IdArbres,ValArbres,
                           by="IdArbre")
Arbres_Fiches$IdArbre <- NULL


# -------Extraction ------
# Nom <- Dispositifs$Nom[which(Dispositifs$NumForet==Choix)]
# Nom <- "Forêt de M.Dupont"
DernierCycle <- max(Arbres_Fiches$Cycle[Arbres_Fiches$NumForet==Choix])
t1 <- dplyr::filter(Arbres_Fiches,
             NumForet==Choix & Cycle==DernierCycle) %>%
  dplyr::select(NumPlac,NumArbre,Essence,Azimut,Dist, #Cycle,
         Diam1,Diam2,Haut,Qual,
         Observations,CodeEcolo,

         Caract1,Caract2,Caract3,

         Type,Stade) %>% #Limite,Coupe,

  dplyr::mutate(NumArbre=as.numeric(NumArbre),
         Azimut=round(as.numeric(Azimut),1),
         Haut=ifelse(Haut==0,NA,Haut),
         # HautL=ifelse(HautL==0,NA,HautL),
         # Ray1=ifelse(Ray1==0,NA,Ray1),
         # Dh1=ifelse(Dh1==0,NA,Dh1),
         # Ray2=ifelse(Ray2==0,NA,Ray2),
         # Dh2=ifelse(Dh2==0,NA,Dh2),

         # Observation=str_replace(Observation,"œ","k")) %>%
         Observations=gsub("œ","oe",Observations),
         Observations=gsub("&","et",Observations),
         Observations=gsub("%","pour cent",Observations)) %>%

         # Mark_Perches=NA,
         #     Mark_Perches=ifelse(Diam1 < 17.5,
         #                         1,0)) %>%
         # Observation=gsub("?","\\?",Observation)) %>% # Observation=gsub(",",".",Observation)
  arrange(NumPlac,NumArbre,Azimut,Dist)
# DernierCycle = max(t1$Cycle)
# t1Bis <- dplyr::mutate(t1,
#                 Cycle=Cycle+1)
# t1Bis[,!names(t1Bis) %in% c("NumPlac","NumArbre","Cycle","Essence","Azimut","Dist")] <- NA
# t1 <- rbind(t1,t1Bis) %>%
#   arrange(NumPlac,NumArbre,Cycle,Azimut,Dist)
t1 <- arrange(t1,
              NumPlac,Azimut,Dist)
ListPlac <- sort(as.numeric(unique(t1$NumPlac)))
@

\renewcommand{\arraystretch}{1.3}  % changement : Hauteur des lignes passe de 1.4 à 1.3
\setlength{\tabcolsep}{1pt} % Espace entre trait et texte d'une colonne


<<Impression_Fiches, echo=F, results='asis', fig.pos="H", comment=F, error=F, size='scriptsize', cache=F, out.width="\\textwidth", eval=Eval_Appendix, include=Eval_Appendix>>=
# df <- dplyr::mutate(t1,
#              NumPlac=NULL)

# df[,] <- NA

for (plac in ListPlac) {  # 131 74
  # -------------- Extraction placette
  tab <- dplyr::filter(t1,
                NumPlac==plac) %>%
    dplyr::mutate(NumPlac=NULL,
    CodeEcolo=ifelse(nchar(CodeEcolo) > 14,
                   paste0(str_sub(CodeEcolo,1,14)," ",
                          str_sub(CodeEcolo,15,-1)),
                   CodeEcolo),
    CodeEcolo=str_trim(CodeEcolo, "both"),
    Observations=str_trim(Observations, "both"))
    # rbind(df[1:15,]) # rajout d'une vingtaine de lignes supplémentaire
  # tab <- tab[45,]
  # tab$Observations <- "TX"
  # gsub(" ","",tab$Observations, fixed=T)
  # str_trim(tab$Observations, "right")
  # tab$NumPlac <- NULL
  # names(tab)[names(tab) %in% "NumArbre"] <- "Num"
  nb <- dim(tab)[1]
  # tab <- rbind(tab,df) # ---- Insertion de lignes vides
  # nbtot <- dim(tab)[1]
  OverChar <- unique(which(nchar(tab$CodeEcolo) > 14 | nchar(tab$Observations) > 14))
  nb <- nb + length(OverChar)
  NbSheet <- ceiling(nb/NbLignes)
  # -------------- Remplissage entête
  Count = 0

  # for (j in 1:ceiling(nb/NbLignes)) {
  for (j in 1:NbSheet) {
    NomPlac <- paste0(ifelse(lang=="FRA",
                             "Placette : ",
                             "Plot : "),plac," (",j,"/",NbSheet,")")
    temp <- tab[(Count+1):(Count+NbLignes),]
    # ----- Gestion des lignes si trop de texte ----- #
    temp <- mutate(temp,
                   OverChar=ifelse(nchar(CodeEcolo,keepNA=F) > 15 | nchar(Observations,keepNA=F) > 14, # Repère les chaines de caractère trop longues
                                   2,1),
                   OverChar=ifelse(OverChar == 1,
                                   OverChar,
                                   ifelse(nchar(CodeEcolo,keepNA=F) > nchar(Observations,keepNA=F),
                                          CodeEcolo, Observations)),
                   OverChar=ifelse(OverChar == 1,
                                   OverChar,
                                   ceiling(nchar(OverChar,keepNA=F) / 14)), # * 3/4   * 9/10
                   Count=cumsum(OverChar)) %>%
      filter(Count <= NbLignes) %>%
      mutate(OverChar=NULL,
             Count=NULL)
    NbLignes2 <- dim(temp)[1]



    temp2 <- tab[(Count+1):(Count+NbLignes2),]
    rws <- seq(1, NbLignes2-1, by = 2)
    col <- rep("\\rowcolor[gray]{0.95}", length(rws))
    Count <- Count + dim(temp2)[1]


    # ------------------------------------------- Préparation de l'entête
    if (lang=="FRA") {
    titre <- data.frame(info1 = c(NomForet,NomPlac),
                        milieu = c("Fiche de mesure",
                                   paste0("- Cycle ",
                                          DernierCycle,"-")),
                        text2 = c("              Date :","Opérateurs :"),
                        stringsAsFactors=F)
    } else {
      titre <- data.frame(info1 = c(NomForet,NomPlac),
                        milieu = c("Measure sheet",
                                   paste0("- Cycle ",
                                          DernierCycle,"-")),
                        text2 = c("              Date :","Operators :"),
                        stringsAsFactors=F)
    }

    # -------------- Impression entête
    Format1 <-c("M{0cm}","L{7cm}","M{9cm}","L{7cm}")
    print(xtable(titre,
                 align= Format1),
          include.colnames=F,
          # scalebox= ech,
          include.rownames=F,
          floating=F,
          # latex.environments = "center",
          table.placement="ht",
          hline.after=NULL)


    # -------------- Impression Données
        Format2 <- c("|M{0cm}","|M{1.5cm}",
                 # "|M{1cm}", pour Cycle
                 "|M{2.5cm}","|M{1.3cm}","|M{1.4cm}",

                 rep("|M{1.1cm}",4),
                 "|c","|c|",
                 rep("M{1.4cm}|",3),
                 rep("M{1.1cm}|",dim(tab)[2]-13))
    cat("\\vspace{1cm}

    \\FloatBarrier")

    temp2 <- rename(temp2,
                    Num=NumArbre)

    print(xtable(temp2,
                 align=Format2,
                 digits=c(rep(0,4),1,rep(0,2),rep(1,1),rep(0,3),rep(0,5))),
          add.to.row = list(pos = as.list(rws),
                            command = col),
          # scalebox= ech,
          include.rownames=F,
          floating=F,
          # latex.environments = "center",
          hline.after=c(-1:NbLignes2),
          sanitize.text.function=function(x){return(x)},
          size="normalsize")
    # cat("\\vspace{0.5cm}
    #
    # \\FloatBarrier")
    cat("\\newpage")
  }
}

# Adresse de stockage
@
\newpage
\end{center}
\end{landscape}
}{}

\end{appendices}

\end{document}
